"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[472],{9098:(e,t,i)=>{i.d(t,{A:()=>h});var r=i(8687),s=i(3675),a=i(8119),n=i(6077),o=i(5432),d=i(2982);class h extends r.A{describe(){return this.deepExtend(super.describe(),{id:"bybit",name:"Bybit",countries:["VG"],version:"v5",userAgent:void 0,rateLimit:20,hostname:"bybit.com",pro:!0,certified:!0,has:{CORS:!0,spot:!0,margin:!0,swap:!0,future:!0,option:!0,borrowCrossMargin:!0,cancelAllOrders:!0,cancelAllOrdersAfter:!0,cancelOrder:!0,cancelOrders:!0,cancelOrdersForSymbols:!0,closeAllPositions:!1,closePosition:!1,createConvertTrade:!0,createMarketBuyOrderWithCost:!0,createMarketSellOrderWithCost:!0,createOrder:!0,createOrders:!0,createOrderWithTakeProfitAndStopLoss:!0,createPostOnlyOrder:!0,createReduceOnlyOrder:!0,createStopLimitOrder:!0,createStopLossOrder:!0,createStopMarketOrder:!0,createStopOrder:!0,createTakeProfitOrder:!0,createTrailingAmountOrder:!0,createTriggerOrder:!0,editOrder:!0,fetchBalance:!0,fetchBorrowInterest:!1,fetchBorrowRateHistories:!1,fetchBorrowRateHistory:!1,fetchCanceledAndClosedOrders:!0,fetchCanceledOrders:!0,fetchClosedOrder:!0,fetchClosedOrders:!0,fetchConvertCurrencies:!0,fetchConvertQuote:!0,fetchConvertTrade:!0,fetchConvertTradeHistory:!0,fetchCrossBorrowRate:!0,fetchCrossBorrowRates:!1,fetchCurrencies:!0,fetchDeposit:!1,fetchDepositAddress:!0,fetchDepositAddresses:!1,fetchDepositAddressesByNetwork:!0,fetchDeposits:!0,fetchDepositWithdrawFee:"emulated",fetchDepositWithdrawFees:!0,fetchFundingHistory:!0,fetchFundingRate:"emulated",fetchFundingRateHistory:!0,fetchFundingRates:!0,fetchGreeks:!0,fetchIndexOHLCV:!0,fetchIsolatedBorrowRate:!1,fetchIsolatedBorrowRates:!1,fetchLedger:!0,fetchLeverage:!0,fetchLeverageTiers:!0,fetchLongShortRatio:!1,fetchLongShortRatioHistory:!0,fetchMarginAdjustmentHistory:!1,fetchMarketLeverageTiers:!0,fetchMarkets:!0,fetchMarkOHLCV:!0,fetchMyLiquidations:!0,fetchMySettlementHistory:!0,fetchMyTrades:!0,fetchOHLCV:!0,fetchOpenInterest:!0,fetchOpenInterestHistory:!0,fetchOpenOrder:!0,fetchOpenOrders:!0,fetchOption:!0,fetchOptionChain:!0,fetchOrder:!0,fetchOrderBook:!0,fetchOrders:!1,fetchOrderTrades:!0,fetchPosition:!0,fetchPositionHistory:"emulated",fetchPositions:!0,fetchPositionsHistory:!0,fetchPremiumIndexOHLCV:!0,fetchSettlementHistory:!0,fetchTicker:!0,fetchTickers:!0,fetchTime:!0,fetchTrades:!0,fetchTradingFee:!0,fetchTradingFees:!0,fetchTransactions:!1,fetchTransfers:!0,fetchUnderlyingAssets:!1,fetchVolatilityHistory:!0,fetchWithdrawals:!0,repayCrossMargin:!0,sandbox:!0,setLeverage:!0,setMarginMode:!0,setPositionMode:!0,transfer:!0,withdraw:!0},timeframes:{"1m":"1","3m":"3","5m":"5","15m":"15","30m":"30","1h":"60","2h":"120","4h":"240","6h":"360","12h":"720","1d":"D","1w":"W","1M":"M"},urls:{test:{spot:"https://api-testnet.{hostname}",futures:"https://api-testnet.{hostname}",v2:"https://api-testnet.{hostname}",public:"https://api-testnet.{hostname}",private:"https://api-testnet.{hostname}"},logo:"https://github.com/user-attachments/assets/97a5d0b3-de10-423d-90e1-6620960025ed",api:{spot:"https://api.{hostname}",futures:"https://api.{hostname}",v2:"https://api.{hostname}",public:"https://api.{hostname}",private:"https://api.{hostname}"},demotrading:{spot:"https://api-demo.{hostname}",futures:"https://api-demo.{hostname}",v2:"https://api-demo.{hostname}",public:"https://api-demo.{hostname}",private:"https://api-demo.{hostname}"},www:"https://www.bybit.com",doc:["https://bybit-exchange.github.io/docs/inverse/","https://bybit-exchange.github.io/docs/linear/","https://github.com/bybit-exchange"],fees:"https://help.bybit.com/hc/en-us/articles/360039261154",referral:"https://www.bybit.com/register?affiliate_id=35953"},api:{public:{get:{"spot/v3/public/symbols":1,"spot/v3/public/quote/depth":1,"spot/v3/public/quote/depth/merged":1,"spot/v3/public/quote/trades":1,"spot/v3/public/quote/kline":1,"spot/v3/public/quote/ticker/24hr":1,"spot/v3/public/quote/ticker/price":1,"spot/v3/public/quote/ticker/bookTicker":1,"spot/v3/public/server-time":1,"spot/v3/public/infos":1,"spot/v3/public/margin-product-infos":1,"spot/v3/public/margin-ensure-tokens":1,"v3/public/time":1,"contract/v3/public/copytrading/symbol/list":1,"derivatives/v3/public/order-book/L2":1,"derivatives/v3/public/kline":1,"derivatives/v3/public/tickers":1,"derivatives/v3/public/instruments-info":1,"derivatives/v3/public/mark-price-kline":1,"derivatives/v3/public/index-price-kline":1,"derivatives/v3/public/funding/history-funding-rate":1,"derivatives/v3/public/risk-limit/list":1,"derivatives/v3/public/delivery-price":1,"derivatives/v3/public/recent-trade":1,"derivatives/v3/public/open-interest":1,"derivatives/v3/public/insurance":1,"v5/announcements/index":5,"v5/market/time":5,"v5/market/kline":5,"v5/market/mark-price-kline":5,"v5/market/index-price-kline":5,"v5/market/premium-index-price-kline":5,"v5/market/instruments-info":5,"v5/market/orderbook":5,"v5/market/tickers":5,"v5/market/funding/history":5,"v5/market/recent-trade":5,"v5/market/open-interest":5,"v5/market/historical-volatility":5,"v5/market/insurance":5,"v5/market/risk-limit":5,"v5/market/delivery-price":5,"v5/market/account-ratio":5,"v5/spot-lever-token/info":5,"v5/spot-lever-token/reference":5,"v5/spot-margin-trade/data":5,"v5/spot-cross-margin-trade/data":5,"v5/spot-cross-margin-trade/pledge-token":5,"v5/spot-cross-margin-trade/borrow-token":5,"v5/crypto-loan/collateral-data":5,"v5/crypto-loan/loanable-data":5,"v5/ins-loan/product-infos":5,"v5/ins-loan/ensure-tokens-convert":5}},private:{get:{"v5/market/instruments-info":5,"v2/private/wallet/fund/records":25,"spot/v3/private/order":2.5,"spot/v3/private/open-orders":2.5,"spot/v3/private/history-orders":2.5,"spot/v3/private/my-trades":2.5,"spot/v3/private/account":2.5,"spot/v3/private/reference":2.5,"spot/v3/private/record":2.5,"spot/v3/private/cross-margin-orders":10,"spot/v3/private/cross-margin-account":10,"spot/v3/private/cross-margin-loan-info":10,"spot/v3/private/cross-margin-repay-history":10,"spot/v3/private/margin-loan-infos":10,"spot/v3/private/margin-repaid-infos":10,"spot/v3/private/margin-ltv":10,"asset/v3/private/transfer/inter-transfer/list/query":50,"asset/v3/private/transfer/sub-member/list/query":50,"asset/v3/private/transfer/sub-member-transfer/list/query":50,"asset/v3/private/transfer/universal-transfer/list/query":25,"asset/v3/private/coin-info/query":25,"asset/v3/private/deposit/address/query":10,"contract/v3/private/copytrading/order/list":30,"contract/v3/private/copytrading/position/list":40,"contract/v3/private/copytrading/wallet/balance":25,"contract/v3/private/position/limit-info":25,"contract/v3/private/order/unfilled-orders":1,"contract/v3/private/order/list":1,"contract/v3/private/position/list":1,"contract/v3/private/execution/list":1,"contract/v3/private/position/closed-pnl":1,"contract/v3/private/account/wallet/balance":1,"contract/v3/private/account/fee-rate":1,"contract/v3/private/account/wallet/fund-records":1,"unified/v3/private/order/unfilled-orders":1,"unified/v3/private/order/list":1,"unified/v3/private/position/list":1,"unified/v3/private/execution/list":1,"unified/v3/private/delivery-record":1,"unified/v3/private/settlement-record":1,"unified/v3/private/account/wallet/balance":1,"unified/v3/private/account/transaction-log":1,"unified/v3/private/account/borrow-history":1,"unified/v3/private/account/borrow-rate":1,"unified/v3/private/account/info":1,"user/v3/private/frozen-sub-member":10,"user/v3/private/query-sub-members":5,"user/v3/private/query-api":5,"user/v3/private/get-member-type":1,"asset/v3/private/transfer/transfer-coin/list/query":50,"asset/v3/private/transfer/account-coin/balance/query":50,"asset/v3/private/transfer/account-coins/balance/query":25,"asset/v3/private/transfer/asset-info/query":50,"asset/v3/public/deposit/allowed-deposit-list/query":.17,"asset/v3/private/deposit/record/query":10,"asset/v3/private/withdraw/record/query":10,"v5/order/realtime":5,"v5/order/history":5,"v5/order/spot-borrow-check":1,"v5/position/list":5,"v5/execution/list":5,"v5/position/closed-pnl":5,"v5/position/move-history":5,"v5/pre-upgrade/order/history":5,"v5/pre-upgrade/execution/list":5,"v5/pre-upgrade/position/closed-pnl":5,"v5/pre-upgrade/account/transaction-log":5,"v5/pre-upgrade/asset/delivery-record":5,"v5/pre-upgrade/asset/settlement-record":5,"v5/account/wallet-balance":1,"v5/account/borrow-history":1,"v5/account/collateral-info":1,"v5/asset/coin-greeks":1,"v5/account/fee-rate":10,"v5/account/info":5,"v5/account/transaction-log":1,"v5/account/contract-transaction-log":1,"v5/account/smp-group":1,"v5/account/mmp-state":5,"v5/account/withdrawal":5,"v5/asset/exchange/query-coin-list":.5,"v5/asset/exchange/convert-result-query":.5,"v5/asset/exchange/query-convert-history":.5,"v5/asset/exchange/order-record":5,"v5/asset/delivery-record":5,"v5/asset/settlement-record":5,"v5/asset/transfer/query-asset-info":50,"v5/asset/transfer/query-account-coins-balance":25,"v5/asset/transfer/query-account-coin-balance":50,"v5/asset/transfer/query-transfer-coin-list":50,"v5/asset/transfer/query-inter-transfer-list":50,"v5/asset/transfer/query-sub-member-list":50,"v5/asset/transfer/query-universal-transfer-list":25,"v5/asset/deposit/query-allowed-list":5,"v5/asset/deposit/query-record":10,"v5/asset/deposit/query-sub-member-record":10,"v5/asset/deposit/query-internal-record":5,"v5/asset/deposit/query-address":10,"v5/asset/deposit/query-sub-member-address":10,"v5/asset/coin/query-info":28,"v5/asset/withdraw/query-record":10,"v5/asset/withdraw/withdrawable-amount":5,"v5/asset/withdraw/vasp/list":5,"v5/user/query-sub-members":5,"v5/user/query-api":5,"v5/user/sub-apikeys":5,"v5/user/get-member-type":5,"v5/user/aff-customer-info":5,"v5/user/del-submember":5,"v5/user/submembers":5,"v5/affiliate/aff-user-list":5,"v5/spot-lever-token/order-record":1,"v5/spot-margin-trade/interest-rate-history":5,"v5/spot-margin-trade/state":5,"v5/spot-cross-margin-trade/loan-info":1,"v5/spot-cross-margin-trade/account":1,"v5/spot-cross-margin-trade/orders":1,"v5/spot-cross-margin-trade/repay-history":1,"v5/crypto-loan/borrowable-collateralisable-number":5,"v5/crypto-loan/ongoing-orders":5,"v5/crypto-loan/repayment-history":5,"v5/crypto-loan/borrow-history":5,"v5/crypto-loan/max-collateral-amount":5,"v5/crypto-loan/adjustment-history":5,"v5/ins-loan/product-infos":5,"v5/ins-loan/ensure-tokens-convert":5,"v5/ins-loan/loan-order":5,"v5/ins-loan/repaid-history":5,"v5/ins-loan/ltv-convert":5,"v5/lending/info":5,"v5/lending/history-order":5,"v5/lending/account":5,"v5/broker/earning-record":5,"v5/broker/earnings-info":5,"v5/broker/account-info":5,"v5/broker/asset/query-sub-member-deposit-record":10},post:{"spot/v3/private/order":2.5,"spot/v3/private/cancel-order":2.5,"spot/v3/private/cancel-orders":2.5,"spot/v3/private/cancel-orders-by-ids":2.5,"spot/v3/private/purchase":2.5,"spot/v3/private/redeem":2.5,"spot/v3/private/cross-margin-loan":10,"spot/v3/private/cross-margin-repay":10,"asset/v3/private/transfer/inter-transfer":150,"asset/v3/private/withdraw/create":300,"asset/v3/private/withdraw/cancel":50,"asset/v3/private/transfer/sub-member-transfer":150,"asset/v3/private/transfer/transfer-sub-member-save":150,"asset/v3/private/transfer/universal-transfer":10,"user/v3/private/create-sub-member":10,"user/v3/private/create-sub-api":10,"user/v3/private/update-api":10,"user/v3/private/delete-api":10,"user/v3/private/update-sub-api":10,"user/v3/private/delete-sub-api":10,"contract/v3/private/copytrading/order/create":30,"contract/v3/private/copytrading/order/cancel":30,"contract/v3/private/copytrading/order/close":30,"contract/v3/private/copytrading/position/close":40,"contract/v3/private/copytrading/position/set-leverage":40,"contract/v3/private/copytrading/wallet/transfer":25,"contract/v3/private/copytrading/order/trading-stop":2.5,"contract/v3/private/order/create":1,"contract/v3/private/order/cancel":1,"contract/v3/private/order/cancel-all":1,"contract/v3/private/order/replace":1,"contract/v3/private/position/set-auto-add-margin":1,"contract/v3/private/position/switch-isolated":1,"contract/v3/private/position/switch-mode":1,"contract/v3/private/position/switch-tpsl-mode":1,"contract/v3/private/position/set-leverage":1,"contract/v3/private/position/trading-stop":1,"contract/v3/private/position/set-risk-limit":1,"contract/v3/private/account/setMarginMode":1,"unified/v3/private/order/create":30,"unified/v3/private/order/replace":30,"unified/v3/private/order/cancel":30,"unified/v3/private/order/create-batch":30,"unified/v3/private/order/replace-batch":30,"unified/v3/private/order/cancel-batch":30,"unified/v3/private/order/cancel-all":30,"unified/v3/private/position/set-leverage":2.5,"unified/v3/private/position/tpsl/switch-mode":2.5,"unified/v3/private/position/set-risk-limit":2.5,"unified/v3/private/position/trading-stop":2.5,"unified/v3/private/account/upgrade-unified-account":2.5,"unified/v3/private/account/setMarginMode":2.5,"fht/compliance/tax/v3/private/registertime":50,"fht/compliance/tax/v3/private/create":50,"fht/compliance/tax/v3/private/status":50,"fht/compliance/tax/v3/private/url":50,"v5/order/create":2.5,"v5/order/amend":5,"v5/order/cancel":2.5,"v5/order/cancel-all":50,"v5/order/create-batch":5,"v5/order/amend-batch":5,"v5/order/cancel-batch":5,"v5/order/disconnected-cancel-all":5,"v5/position/set-leverage":5,"v5/position/switch-isolated":5,"v5/position/set-tpsl-mode":5,"v5/position/switch-mode":5,"v5/position/set-risk-limit":5,"v5/position/trading-stop":5,"v5/position/set-auto-add-margin":5,"v5/position/add-margin":5,"v5/position/move-positions":5,"v5/position/confirm-pending-mmr":5,"v5/account/upgrade-to-uta":5,"v5/account/quick-repayment":5,"v5/account/set-margin-mode":5,"v5/account/set-hedging-mode":5,"v5/account/mmp-modify":5,"v5/account/mmp-reset":5,"v5/asset/exchange/quote-apply":1,"v5/asset/exchange/convert-execute":1,"v5/asset/transfer/inter-transfer":50,"v5/asset/transfer/save-transfer-sub-member":150,"v5/asset/transfer/universal-transfer":10,"v5/asset/deposit/deposit-to-account":5,"v5/asset/withdraw/create":50,"v5/asset/withdraw/cancel":50,"v5/user/create-sub-member":10,"v5/user/create-sub-api":10,"v5/user/frozen-sub-member":10,"v5/user/update-api":10,"v5/user/update-sub-api":10,"v5/user/delete-api":10,"v5/user/delete-sub-api":10,"v5/spot-lever-token/purchase":2.5,"v5/spot-lever-token/redeem":2.5,"v5/spot-margin-trade/switch-mode":5,"v5/spot-margin-trade/set-leverage":5,"v5/spot-cross-margin-trade/loan":2.5,"v5/spot-cross-margin-trade/repay":2.5,"v5/spot-cross-margin-trade/switch":2.5,"v5/crypto-loan/borrow":5,"v5/crypto-loan/repay":5,"v5/crypto-loan/adjust-ltv":5,"v5/ins-loan/association-uid":5,"v5/lending/purchase":5,"v5/lending/redeem":5,"v5/lending/redeem-cancel":5,"v5/account/set-collateral-switch":5,"v5/account/set-collateral-switch-batch":5,"v5/account/demo-apply-money":5,"v5/broker/award/info":5,"v5/broker/award/distribute-award":5,"v5/broker/award/distribution-record":5}}},httpExceptions:{403:a.RateLimitExceeded},exceptions:{exact:{"-10009":a.BadRequest,"-1004":a.BadRequest,"-1021":a.BadRequest,"-1103":a.BadRequest,"-1140":a.InvalidOrder,"-1197":a.InvalidOrder,"-2013":a.InvalidOrder,"-2015":a.AuthenticationError,"-6017":a.BadRequest,"-6025":a.BadRequest,"-6029":a.BadRequest,5004:a.ExchangeError,7001:a.BadRequest,10001:a.BadRequest,10002:a.InvalidNonce,10003:a.AuthenticationError,10004:a.AuthenticationError,10005:a.PermissionDenied,10006:a.RateLimitExceeded,10007:a.AuthenticationError,10008:a.AccountSuspended,10009:a.AuthenticationError,10010:a.PermissionDenied,10014:a.BadRequest,10016:a.ExchangeError,10017:a.BadRequest,10018:a.RateLimitExceeded,10020:a.PermissionDenied,10024:a.PermissionDenied,10027:a.PermissionDenied,10028:a.PermissionDenied,10029:a.PermissionDenied,12137:a.InvalidOrder,12201:a.BadRequest,12141:a.BadRequest,100028:a.PermissionDenied,110001:a.OrderNotFound,110003:a.InvalidOrder,110004:a.InsufficientFunds,110005:a.InvalidOrder,110006:a.InsufficientFunds,110007:a.InsufficientFunds,110008:a.InvalidOrder,110009:a.InvalidOrder,110010:a.InvalidOrder,110011:a.InvalidOrder,110012:a.InsufficientFunds,110013:a.BadRequest,110014:a.InsufficientFunds,110015:a.BadRequest,110016:a.InvalidOrder,110017:a.InvalidOrder,110018:a.BadRequest,110019:a.InvalidOrder,110020:a.InvalidOrder,110021:a.InvalidOrder,110022:a.InvalidOrder,110023:a.InvalidOrder,110024:a.BadRequest,110025:a.NoChange,110026:a.MarginModeAlreadySet,110027:a.NoChange,110028:a.BadRequest,110029:a.BadRequest,110030:a.InvalidOrder,110031:a.InvalidOrder,110032:a.InvalidOrder,110033:a.InvalidOrder,110034:a.InvalidOrder,110035:a.InvalidOrder,110036:a.InvalidOrder,110037:a.InvalidOrder,110038:a.InvalidOrder,110039:a.InvalidOrder,110040:a.InvalidOrder,110041:a.InvalidOrder,110042:a.InvalidOrder,110043:a.BadRequest,110044:a.InsufficientFunds,110045:a.InsufficientFunds,110046:a.BadRequest,110047:a.BadRequest,110048:a.BadRequest,110049:a.BadRequest,110050:a.BadRequest,110051:a.InsufficientFunds,110052:a.InsufficientFunds,110053:a.InsufficientFunds,110054:a.InvalidOrder,110055:a.InvalidOrder,110056:a.InvalidOrder,110057:a.InvalidOrder,110058:a.InvalidOrder,110059:a.InvalidOrder,110060:a.BadRequest,110061:a.BadRequest,110062:a.BadRequest,110063:a.ExchangeError,110064:a.InvalidOrder,110065:a.PermissionDenied,110066:a.ExchangeError,110067:a.PermissionDenied,110068:a.PermissionDenied,110069:a.PermissionDenied,110070:a.InvalidOrder,110071:a.ExchangeError,110072:a.InvalidOrder,110073:a.ExchangeError,110092:a.InvalidOrder,110093:a.InvalidOrder,110094:a.InvalidOrder,130006:a.InvalidOrder,130021:a.InsufficientFunds,130074:a.InvalidOrder,131001:a.InsufficientFunds,131084:a.ExchangeError,131200:a.ExchangeError,131201:a.ExchangeError,131202:a.BadRequest,131203:a.BadRequest,131204:a.BadRequest,131205:a.BadRequest,131206:a.ExchangeError,131207:a.BadRequest,131208:a.ExchangeError,131209:a.BadRequest,131210:a.BadRequest,131211:a.BadRequest,131212:a.InsufficientFunds,131213:a.BadRequest,131214:a.BadRequest,131215:a.BadRequest,131216:a.ExchangeError,131217:a.ExchangeError,131231:a.NotSupported,131232:a.NotSupported,131002:a.BadRequest,131003:a.ExchangeError,131004:a.AuthenticationError,131085:a.InsufficientFunds,131086:a.BadRequest,131088:a.BadRequest,131089:a.BadRequest,131090:a.ExchangeError,131091:a.ExchangeError,131092:a.ExchangeError,131093:a.ExchangeError,131094:a.BadRequest,131095:a.BadRequest,131096:a.BadRequest,131097:a.ExchangeError,131098:a.ExchangeError,131099:a.ExchangeError,140001:a.OrderNotFound,140003:a.InvalidOrder,140004:a.InsufficientFunds,140005:a.InvalidOrder,140006:a.InsufficientFunds,140007:a.InsufficientFunds,140008:a.InvalidOrder,140009:a.InvalidOrder,140010:a.InvalidOrder,140011:a.InvalidOrder,140012:a.InsufficientFunds,140013:a.BadRequest,140014:a.InsufficientFunds,140015:a.InvalidOrder,140016:a.InvalidOrder,140017:a.InvalidOrder,140018:a.BadRequest,140019:a.InvalidOrder,140020:a.InvalidOrder,140021:a.InvalidOrder,140022:a.InvalidOrder,140023:a.InvalidOrder,140024:a.BadRequest,140025:a.BadRequest,140026:a.BadRequest,140027:a.BadRequest,140028:a.InvalidOrder,140029:a.BadRequest,140030:a.InvalidOrder,140031:a.BadRequest,140032:a.InvalidOrder,140033:a.InvalidOrder,140034:a.InvalidOrder,140035:a.InvalidOrder,140036:a.BadRequest,140037:a.InvalidOrder,140038:a.BadRequest,140039:a.BadRequest,140040:a.InvalidOrder,140041:a.InvalidOrder,140042:a.InvalidOrder,140043:a.BadRequest,140044:a.InsufficientFunds,140045:a.InsufficientFunds,140046:a.BadRequest,140047:a.BadRequest,140048:a.BadRequest,140049:a.BadRequest,140050:a.InvalidOrder,140051:a.InsufficientFunds,140052:a.InsufficientFunds,140053:a.InsufficientFunds,140054:a.InvalidOrder,140055:a.InvalidOrder,140056:a.InvalidOrder,140057:a.InvalidOrder,140058:a.InvalidOrder,140059:a.InvalidOrder,140060:a.BadRequest,140061:a.BadRequest,140062:a.BadRequest,140063:a.ExchangeError,140064:a.InvalidOrder,140065:a.PermissionDenied,140066:a.ExchangeError,140067:a.PermissionDenied,140068:a.PermissionDenied,140069:a.PermissionDenied,140070:a.InvalidOrder,170001:a.ExchangeError,170005:a.InvalidOrder,170007:a.RequestTimeout,170010:a.InvalidOrder,170011:a.InvalidOrder,170019:a.InvalidOrder,170031:a.ExchangeError,170032:a.ExchangeError,170033:a.InsufficientFunds,170034:a.InsufficientFunds,170035:a.BadRequest,170036:a.BadRequest,170037:a.BadRequest,170105:a.BadRequest,170115:a.InvalidOrder,170116:a.InvalidOrder,170117:a.InvalidOrder,170121:a.InvalidOrder,170124:a.InvalidOrder,170130:a.BadRequest,170131:a.InsufficientFunds,170132:a.InvalidOrder,170133:a.InvalidOrder,170134:a.InvalidOrder,170135:a.InvalidOrder,170136:a.InvalidOrder,170137:a.InvalidOrder,170139:a.InvalidOrder,170140:a.InvalidOrder,170141:a.InvalidOrder,170142:a.InvalidOrder,170143:a.InvalidOrder,170144:a.InvalidOrder,170145:a.InvalidOrder,170146:a.InvalidOrder,170147:a.InvalidOrder,170148:a.InvalidOrder,170149:a.ExchangeError,170150:a.ExchangeError,170151:a.InvalidOrder,170157:a.InvalidOrder,170159:a.InvalidOrder,170190:a.InvalidOrder,170191:a.InvalidOrder,170192:a.InvalidOrder,170193:a.InvalidOrder,170194:a.InvalidOrder,170195:a.InvalidOrder,170196:a.InvalidOrder,170197:a.InvalidOrder,170198:a.InvalidOrder,170199:a.InvalidOrder,170200:a.InvalidOrder,170201:a.PermissionDenied,170202:a.InvalidOrder,170203:a.InvalidOrder,170204:a.InvalidOrder,170206:a.InvalidOrder,170210:a.InvalidOrder,170213:a.OrderNotFound,170217:a.InvalidOrder,170218:a.InvalidOrder,170221:a.BadRequest,170222:a.RateLimitExceeded,170223:a.InsufficientFunds,170224:a.PermissionDenied,170226:a.InsufficientFunds,170227:a.ExchangeError,170228:a.InvalidOrder,170229:a.InvalidOrder,170234:a.ExchangeError,170241:a.ManualInteractionNeeded,175e3:a.InvalidOrder,175001:a.InvalidOrder,175002:a.InvalidOrder,175003:a.InsufficientFunds,175004:a.InvalidOrder,175005:a.InvalidOrder,175006:a.InsufficientFunds,175007:a.InvalidOrder,175008:a.InvalidOrder,175009:a.InvalidOrder,175010:a.PermissionDenied,175012:a.InvalidOrder,175013:a.InvalidOrder,175014:a.InvalidOrder,175015:a.InvalidOrder,175016:a.InvalidOrder,175017:a.InvalidOrder,175027:a.ExchangeError,176002:a.BadRequest,176004:a.BadRequest,176003:a.BadRequest,176006:a.BadRequest,176005:a.BadRequest,176008:a.BadRequest,176007:a.BadRequest,176010:a.BadRequest,176009:a.BadRequest,176012:a.BadRequest,176011:a.BadRequest,176014:a.BadRequest,176013:a.BadRequest,176015:a.InsufficientFunds,176016:a.BadRequest,176017:a.BadRequest,176018:a.BadRequest,176019:a.BadRequest,176020:a.BadRequest,176021:a.BadRequest,176022:a.BadRequest,176023:a.BadRequest,176024:a.BadRequest,176025:a.BadRequest,176026:a.BadRequest,176027:a.BadRequest,176028:a.BadRequest,176029:a.BadRequest,176030:a.BadRequest,176031:a.BadRequest,176034:a.BadRequest,176035:a.PermissionDenied,176036:a.PermissionDenied,176037:a.PermissionDenied,176038:a.BadRequest,176039:a.BadRequest,176040:a.BadRequest,181e3:a.BadRequest,181001:a.BadRequest,181002:a.InvalidOrder,181003:a.InvalidOrder,181004:a.InvalidOrder,182e3:a.InvalidOrder,181017:a.BadRequest,20001:a.OrderNotFound,20003:a.InvalidOrder,20004:a.InvalidOrder,20005:a.InvalidOrder,20006:a.InvalidOrder,20007:a.InvalidOrder,20008:a.InvalidOrder,20009:a.InvalidOrder,20010:a.InvalidOrder,20011:a.InvalidOrder,20012:a.InvalidOrder,20013:a.InvalidOrder,20014:a.InvalidOrder,20015:a.InvalidOrder,20016:a.InvalidOrder,20017:a.InvalidOrder,20018:a.InvalidOrder,20019:a.InvalidOrder,20020:a.InvalidOrder,20021:a.InvalidOrder,20022:a.BadRequest,20023:a.BadRequest,20031:a.BadRequest,20070:a.BadRequest,20071:a.BadRequest,20084:a.BadRequest,30001:a.BadRequest,30003:a.InvalidOrder,30004:a.InvalidOrder,30005:a.InvalidOrder,30007:a.InvalidOrder,30008:a.InvalidOrder,30009:a.ExchangeError,30010:a.InsufficientFunds,30011:a.PermissionDenied,30012:a.PermissionDenied,30013:a.PermissionDenied,30014:a.InvalidOrder,30015:a.InvalidOrder,30016:a.ExchangeError,30017:a.InvalidOrder,30018:a.InvalidOrder,30019:a.InvalidOrder,30020:a.InvalidOrder,30021:a.InvalidOrder,30022:a.InvalidOrder,30023:a.InvalidOrder,30024:a.InvalidOrder,30025:a.InvalidOrder,30026:a.InvalidOrder,30027:a.InvalidOrder,30028:a.InvalidOrder,30029:a.InvalidOrder,30030:a.InvalidOrder,30031:a.InsufficientFunds,30032:a.InvalidOrder,30033:a.RateLimitExceeded,30034:a.OrderNotFound,30035:a.RateLimitExceeded,30036:a.ExchangeError,30037:a.InvalidOrder,30041:a.ExchangeError,30042:a.InsufficientFunds,30043:a.InvalidOrder,30044:a.InvalidOrder,30045:a.InvalidOrder,30049:a.InsufficientFunds,30050:a.ExchangeError,30051:a.ExchangeError,30052:a.ExchangeError,30054:a.ExchangeError,30057:a.ExchangeError,30063:a.ExchangeError,30067:a.InsufficientFunds,30068:a.ExchangeError,30074:a.InvalidOrder,30075:a.InvalidOrder,30078:a.ExchangeError,33004:a.AuthenticationError,34026:a.ExchangeError,34036:a.BadRequest,35015:a.BadRequest,340099:a.ExchangeError,3400045:a.ExchangeError,3100116:a.BadRequest,3100198:a.BadRequest,3200300:a.InsufficientFunds},broad:{"Not supported symbols":a.BadSymbol,"Request timeout":a.RequestTimeout,"unknown orderInfo":a.OrderNotFound,"invalid api_key":a.AuthenticationError,oc_diff:a.InsufficientFunds,new_oc:a.InsufficientFunds,"openapi sign params error!":a.AuthenticationError}},precisionMode:s.kb,options:{usePrivateInstrumentsInfo:!1,enableDemoTrading:!1,fetchMarkets:["spot","linear","inverse","option"],createOrder:{method:"privatePostV5OrderCreate"},enableUnifiedMargin:void 0,enableUnifiedAccount:void 0,unifiedMarginStatus:void 0,createMarketBuyOrderRequiresPrice:!1,createUnifiedMarginAccount:!1,defaultType:"swap",defaultSubType:"linear",defaultSettle:"USDT",code:"BTC",recvWindow:5e3,timeDifference:0,adjustForTimeDifference:!1,loadAllOptions:!1,loadExpiredOptions:!1,brokerId:"CCXT",accountsByType:{spot:"SPOT",margin:"SPOT",future:"CONTRACT",swap:"CONTRACT",option:"OPTION",investment:"INVESTMENT",unified:"UNIFIED",funding:"FUND",fund:"FUND",contract:"CONTRACT"},accountsById:{SPOT:"spot",MARGIN:"spot",CONTRACT:"contract",OPTION:"option",INVESTMENT:"investment",UNIFIED:"unified",FUND:"fund"},networks:{ERC20:"ETH",TRC20:"TRX",BEP20:"BSC",SOL:"SOL",ACA:"ACA",ADA:"ADA",ALGO:"ALGO",APT:"APTOS",AR:"AR",ARBONE:"ARBI",AVAXC:"CAVAX",AVAXX:"XAVAX",ATOM:"ATOM",BCH:"BCH",BEP2:"BNB",CHZ:"CHZ",DCR:"DCR",DGB:"DGB",DOGE:"DOGE",DOT:"DOT",EGLD:"EGLD",EOS:"EOS",ETC:"ETC",ETHF:"ETHF",ETHW:"ETHW",FIL:"FIL",STEP:"FITFI",FLOW:"FLOW",FTM:"FTM",GLMR:"GLMR",HBAR:"HBAR",HNT:"HNT",ICP:"ICP",ICX:"ICX",KDA:"KDA",KLAY:"KLAY",KMA:"KMA",KSM:"KSM",LTC:"LTC",MATIC:"MATIC",MINA:"MINA",MOVR:"MOVR",NEAR:"NEAR",NEM:"NEM",OASYS:"OAS",OASIS:"ROSE",OMNI:"OMNI",ONE:"ONE",OPTIMISM:"OP",POKT:"POKT",QTUM:"QTUM",RVN:"RVN",SC:"SC",SCRT:"SCRT",STX:"STX",THETA:"THETA",TON:"TON",WAVES:"WAVES",WAX:"WAXP",XDC:"XDC",XEC:"XEC",XLM:"XLM",XRP:"XRP",XTZ:"XTZ",XYM:"XYM",ZEN:"ZEN",ZIL:"ZIL",ZKSYNC:"ZKSYNC"},networksById:{ETH:"ERC20",TRX:"TRC20",BSC:"BEP20",OMNI:"OMNI",SPL:"SOL"},defaultNetwork:"ERC20",defaultNetworks:{USDT:"TRC20"},intervals:{"5m":"5min","15m":"15min","30m":"30min","1h":"1h","4h":"4h","1d":"1d"}},features:{default:{sandbox:!0,createOrder:{marginMode:!1,triggerPrice:!0,triggerPriceType:{last:!0,mark:!0,index:!0},triggerDirection:!0,stopLossPrice:!0,takeProfitPrice:!0,attachedStopLossTakeProfit:{triggerPriceType:{last:!0,mark:!0,index:!0},price:!0},timeInForce:{IOC:!0,FOK:!0,PO:!0,GTD:!1},hedged:!0,selfTradePrevention:!0,trailing:!0,iceberg:!1,leverage:!1,marketBuyRequiresPrice:!1,marketBuyByCost:!0},createOrders:{max:10},fetchMyTrades:{marginMode:!1,limit:100,daysBack:730,untilDays:7},fetchOrder:{marginMode:!1,trigger:!0,trailing:!1},fetchOpenOrders:{marginMode:!1,limit:50,trigger:!0,trailing:!1},fetchOrders:void 0,fetchClosedOrders:{marginMode:!1,limit:50,daysBack:730,daysBackCanceled:1,untilDays:7,trigger:!0,trailing:!1},fetchOHLCV:{limit:1e3}},spot:{extends:"default",createOrder:{triggerPriceType:void 0,triggerDirection:!1,attachedStopLossTakeProfit:{triggerPriceType:void 0,price:!0},marketBuyRequiresPrice:!0}},swap:{linear:{extends:"default"},inverse:{extends:"default"}},future:{linear:{extends:"default"},inverse:{extends:"default"}}},fees:{trading:{feeSide:"get",tierBased:!0,percentage:!0,taker:75e-5,maker:1e-4},funding:{tierBased:!1,percentage:!1,withdraw:{},deposit:{}}}})}enableDemoTrading(e){if(this.isSandboxModeEnabled)throw new a.NotSupported(this.id+" demo trading does not support in sandbox environment");if(e)this.urls.apiBackupDemoTrading=this.urls.api,this.urls.api=this.urls.demotrading;else if("apiBackupDemoTrading"in this.urls){this.urls.api=this.urls.apiBackupDemoTrading;let e=this.omit(this.urls,"apiBackupDemoTrading");this.urls=e}this.options.enableDemoTrading=e}nonce(){return this.milliseconds()-this.options.timeDifference}addPaginationCursorToResult(e){let t=this.safeDict(e,"result",{}),i=this.safeListN(t,["list","rows","data","dataList"],[]),r=this.safeString2(t,"nextPageCursor","cursor"),s=i.length;if(void 0!==r&&s>0){let e=i[0];e.nextPageCursor=r,i[0]=e}return i}async isUnifiedEnabled(e={}){let t=this.safeBool(this.options,"enableUnifiedMargin"),i=this.safeBool(this.options,"enableUnifiedAccount");if(void 0===t||void 0===i){if(this.options.enableDemoTrading)return this.options.enableUnifiedMargin=!1,this.options.enableUnifiedAccount=!0,this.options.unifiedMarginStatus=3,[this.options.enableUnifiedMargin,this.options.enableUnifiedAccount];let t=[this.privateGetV5UserQueryApi(e),this.privateGetV5AccountInfo(e)],i=await Promise.all(t),r=i[0],s=i[1],a=this.safeDict(r,"result",{}),n=this.safeDict(s,"result",{});this.options.enableUnifiedMargin=1===this.safeInteger(a,"unified"),this.options.enableUnifiedAccount=1===this.safeInteger(a,"uta"),this.options.unifiedMarginStatus=this.safeInteger(n,"unifiedMarginStatus",3)}return[this.options.enableUnifiedMargin,this.options.enableUnifiedAccount]}async upgradeUnifiedTradeAccount(e={}){return await this.privatePostV5AccountUpgradeToUta(e)}createExpiredOptionMarket(e){let t,i,r,s;let a="USDC",n=e.split("-"),o=e.split("/");e.indexOf("/")>-1?(t=this.safeString(o,0),i=this.safeString(n,1)):(t=this.safeString(n,0),i=this.convertMarketIdExpireDate(this.safeString(n,1)));let d=this.safeString(n,2),h=this.safeString(n,3),l=this.convertExpireDate(i),c=this.parse8601(l);return"BTC"===t?(r=this.parseNumber("0.01"),s=this.parseNumber("5")):"ETH"===t?(r=this.parseNumber("0.1"),s=this.parseNumber("0.1")):"SOL"===t&&(r=this.parseNumber("1"),s=this.parseNumber("0.01")),{id:t+"-"+this.convertExpireDateToMarketIdDate(i)+"-"+d+"-"+h,symbol:t+"/USD:"+a+"-"+i+"-"+d+"-"+h,base:t,quote:"USD",settle:a,baseId:t,quoteId:"USD",settleId:a,active:!1,type:"option",linear:void 0,inverse:void 0,spot:!1,swap:!1,future:!1,option:!0,margin:!1,contract:!0,contractSize:this.parseNumber("1"),expiry:c,expiryDatetime:l,optionType:"C"===h?"call":"put",strike:this.parseNumber(d),precision:{amount:r,price:s},limits:{amount:{min:void 0,max:void 0},price:{min:void 0,max:void 0},cost:{min:void 0,max:void 0}},info:void 0}}safeMarket(e,t,i,r){return void 0!==e&&(e.indexOf("-C")>-1||e.indexOf("-P")>-1)&&!(e in this.markets_by_id)?this.createExpiredOptionMarket(e):super.safeMarket(e,t,i,r)}getBybitType(e,t,i={}){let r,s;return[r,i]=this.handleMarketTypeAndParams(e,t,i),([s,i]=this.handleSubTypeAndParams(e,t,i),"option"===r||"spot"===r)?[r,i]:[s,i]}getAmount(e,t){let i=void 0===this.market(e).precision.amount,r=this.numberToString(t);return i||"0"===r?r:this.amountToPrecision(e,t)}getPrice(e,t){return void 0!==this.market(e).precision.price?this.priceToPrecision(e,t):t}getCost(e,t){return void 0!==this.market(e).precision.price?this.costToPrecision(e,t):t}async fetchTime(e={}){let t=await this.publicGetV5MarketTime(e);return this.safeInteger(t,"time")}async fetchCurrencies(e={}){if(!this.checkRequiredCredentials(!1)||this.options.enableDemoTrading)return;let t=await this.privateGetV5AssetCoinQueryInfo(e),i=this.safeDict(t,"result",{}),r=this.safeList(i,"rows",[]),s={};for(let e=0;e<r.length;e++){let t,i,a,o;let d=r[e],h=this.safeString(d,"coin"),l=this.safeCurrencyCode(h),c=this.safeString(d,"name"),u=this.safeList(d,"chains",[]),f={},p=!1,v=!1;for(let e=0;e<u.length;e++){let r=u[e],s=this.safeString(r,"chain"),d=this.networkIdToCode(s),h=this.parseNumber(this.parsePrecision(this.safeString(r,"minAccuracy")));t=void 0===t?h:Math.min(t,h);let l=1===this.safeInteger(r,"chainDeposit");p=l||p;let c=1===this.safeInteger(r,"chainWithdraw");v=c||v;let m=this.safeString(r,"withdrawFee");void 0!==m&&(i=void 0===i?m:n.Y.stringMin(m,i));let g=this.safeString(r,"withdrawMin");void 0!==g&&(a=void 0===a?g:n.Y.stringMin(g,a));let y=this.safeString(r,"depositMin");void 0!==y&&(o=void 0===o?y:n.Y.stringMin(y,o)),f[d]={info:r,id:s,network:d,active:l&&c,deposit:l,withdraw:c,fee:this.parseNumber(m),precision:h,limits:{withdraw:{min:this.parseNumber(g),max:void 0},deposit:{min:this.parseNumber(y),max:void 0}}}}s[l]={info:d,code:l,id:h,name:c,active:p&&v,deposit:p,withdraw:v,fee:this.parseNumber(i),precision:t,limits:{amount:{min:void 0,max:void 0},withdraw:{min:this.parseNumber(a),max:void 0},deposit:{min:this.parseNumber(o),max:void 0}},networks:f}}return s}async fetchMarkets(e={}){this.options.adjustForTimeDifference&&await this.loadTimeDifference();let t=[],i=this.safeList(this.options,"fetchMarkets",["spot","linear","inverse"]);for(let r=0;r<i.length;r++){let s=i[r];if("spot"===s)t.push(this.fetchSpotMarkets(e));else if("linear"===s)t.push(this.fetchFutureMarkets({category:"linear"}));else if("inverse"===s)t.push(this.fetchFutureMarkets({category:"inverse"}));else if("option"===s)t.push(this.fetchOptionMarkets({baseCoin:"BTC"})),t.push(this.fetchOptionMarkets({baseCoin:"ETH"})),t.push(this.fetchOptionMarkets({baseCoin:"SOL"}));else throw new a.ExchangeError(this.id+' fetchMarkets() this.options fetchMarkets "'+s+'" is not a supported market type')}let r=await Promise.all(t),s=this.safeList(r,0,[]),n=this.safeList(r,1,[]),o=this.safeList(r,2,[]),d=this.safeList(r,3,[]),h=this.safeList(r,4,[]),l=this.safeList(r,5,[]),c=this.arrayConcat(n,o),u=this.arrayConcat(d,h);u=this.arrayConcat(u,l);let f=this.arrayConcat(c,u);return this.arrayConcat(s,f)}async fetchSpotMarkets(e){let t;let i={category:"spot"};t=this.safeBool(this.options,"usePrivateInstrumentsInfo",!1)?await this.privateGetV5MarketInstrumentsInfo(this.extend(i,e)):await this.publicGetV5MarketInstrumentsInfo(this.extend(i,e));let r=this.safeDict(t,"result",{}),s=this.safeList(r,"list",[]),a=[],n=this.parseNumber("0.001"),o=this.parseNumber("0.001");for(let e=0;e<s.length;e++){let t=s[e],i=this.safeString(t,"symbol"),r=this.safeString(t,"baseCoin"),d=this.safeString(t,"quoteCoin"),h=this.safeCurrencyCode(r),l=this.safeCurrencyCode(d),c=h+"/"+l,u="Trading"===this.safeString(t,"status"),f=this.safeDict(t,"lotSizeFilter"),p=this.safeDict(t,"priceFilter"),v=this.safeNumber(f,"quotePrecision"),m="none"!==this.safeString(t,"marginTrading","none");a.push(this.safeMarketStructure({id:i,symbol:c,base:h,quote:l,settle:void 0,baseId:r,quoteId:d,settleId:void 0,type:"spot",spot:!0,margin:m,swap:!1,future:!1,option:!1,active:u,contract:!1,linear:void 0,inverse:void 0,taker:n,maker:o,contractSize:void 0,expiry:void 0,expiryDatetime:void 0,strike:void 0,optionType:void 0,precision:{amount:this.safeNumber(f,"basePrecision"),price:this.safeNumber(p,"tickSize",v)},limits:{leverage:{min:this.parseNumber("1"),max:void 0},amount:{min:this.safeNumber(f,"minOrderQty"),max:this.safeNumber(f,"maxOrderQty")},price:{min:void 0,max:void 0},cost:{min:this.safeNumber(f,"minOrderAmt"),max:this.safeNumber(f,"maxOrderAmt")}},created:void 0,info:t}))}return a}async fetchFutureMarkets(e){let t;(e=this.extend(e)).limit=1e3;let i=[],r=this.safeBool(this.options,"usePrivateInstrumentsInfo",!1);if(r)t=await this.privateGetV5MarketInstrumentsInfo(e);else{let r=[this.publicGetV5MarketInstrumentsInfo(e),this.publicGetV5MarketInstrumentsInfo(this.extend(e,{status:"PreLaunch"}))],s=await Promise.all(r);t=this.safeDict(s,0,{}),i=this.safeDict(s,1,{})}let s=this.safeDict(t,"result",{}),a=this.safeList(s,"list",[]),n=this.safeString(s,"nextPageCursor");if(void 0!==n)for(;void 0!==n;){let t;e.cursor=n,t=r?await this.privateGetV5MarketInstrumentsInfo(e):await this.publicGetV5MarketInstrumentsInfo(e);let i=this.safeDict(t,"result",{}),s=this.safeList(i,"list",[]);if(0===s.length)break;a=this.arrayConcat(s,a),n=this.safeString(i,"nextPageCursor")}let o=this.safeDict(i,"result",{}),d=this.safeList(o,"list",[]);a=this.arrayConcat(a,d);let h=[],l=this.safeString(s,"category");for(let e=0;e<a.length;e++){let t,i,r;let s=a[e];void 0===l&&(l=this.safeString(s,"category"));let n="linear"===l,o="inverse"===l,d=this.safeString(s,"contractType"),c="InverseFutures"===d,u="LinearFutures"===d,f="LinearPerpetual"===d,p="InversePerpetual"===d,v=this.safeString(s,"symbol"),m=this.safeString(s,"baseCoin"),g=this.safeString(s,"quoteCoin"),y=n?g:m,b=this.safeString(s,"settleCoin",y),O=this.safeCurrencyCode(m),w=this.safeCurrencyCode(g);t=f&&"USD"===b?"USDC":this.safeCurrencyCode(b);let I=O+"/"+w,S=this.safeDict(s,"lotSizeFilter",{}),k=this.safeDict(s,"priceFilter",{}),T=this.safeDict(s,"leverageFilter",{}),P=this.safeString(s,"status"),C=f||p,M=c||u;C?i="swap":M&&(i="future"),C||void 0===(r=this.omitZero(this.safeString(s,"deliveryTime")))||(r=parseInt(r));let x=this.iso8601(r);I=I+":"+t,void 0!==r&&(I=I+"-"+this.yymmdd(r));let R=o?this.safeNumber2(S,"minTradingQty","minOrderQty"):this.parseNumber("1");h.push(this.safeMarketStructure({id:v,symbol:I,base:O,quote:w,settle:t,baseId:m,quoteId:g,settleId:b,type:i,spot:!1,margin:void 0,swap:C,future:M,option:!1,active:"Trading"===P,contract:!0,linear:n,inverse:o,taker:this.safeNumber(s,"takerFee",this.parseNumber("0.0006")),maker:this.safeNumber(s,"makerFee",this.parseNumber("0.0001")),contractSize:R,expiry:r,expiryDatetime:x,strike:void 0,optionType:void 0,precision:{amount:this.safeNumber(S,"qtyStep"),price:this.safeNumber(k,"tickSize")},limits:{leverage:{min:this.safeNumber(T,"minLeverage"),max:this.safeNumber(T,"maxLeverage")},amount:{min:this.safeNumber2(S,"minTradingQty","minOrderQty"),max:this.safeNumber2(S,"maxTradingQty","maxOrderQty")},price:{min:this.safeNumber(k,"minPrice"),max:this.safeNumber(k,"maxPrice")},cost:{min:void 0,max:void 0}},created:this.safeInteger(s,"launchTime"),info:s}))}return h}async fetchOptionMarkets(e){let t;let i={category:"option"},r=this.safeBool(this.options,"usePrivateInstrumentsInfo",!1);t=r?await this.privateGetV5MarketInstrumentsInfo(this.extend(i,e)):await this.publicGetV5MarketInstrumentsInfo(this.extend(i,e));let s=this.safeDict(t,"result",{}),a=this.safeList(s,"list",[]);if(this.options.loadAllOptions){i.limit=1e3;let t=this.safeString(s,"nextPageCursor");if(void 0!==t)for(;void 0!==t;){let s;i.cursor=t,s=r?await this.privateGetV5MarketInstrumentsInfo(this.extend(i,e)):await this.publicGetV5MarketInstrumentsInfo(this.extend(i,e));let n=this.safeDict(s,"result",{}),o=this.safeList(n,"list",[]);if(0===o.length)break;a=this.arrayConcat(o,a),t=this.safeString(n,"nextPageCursor")}}let n=[];for(let e=0;e<a.length;e++){let t=a[e],i=this.safeString(t,"symbol"),r=this.safeString(t,"baseCoin"),s=this.safeString(t,"quoteCoin"),o=this.safeString(t,"settleCoin"),d=this.safeCurrencyCode(r),h=this.safeCurrencyCode(s),l=this.safeCurrencyCode(o),c=this.safeDict(t,"lotSizeFilter",{}),u=this.safeDict(t,"priceFilter",{}),f=this.safeString(t,"status"),p=this.safeInteger(t,"deliveryTime"),v=i.split("-"),m=this.safeString(v,2),g=this.safeString(v,3),y="Trading"===f;(y||this.options.loadAllOptions||this.options.loadExpiredOptions)&&n.push(this.safeMarketStructure({id:i,symbol:d+"/"+h+":"+l+"-"+this.yymmdd(p)+"-"+m+"-"+g,base:d,quote:h,settle:l,baseId:r,quoteId:s,settleId:o,type:"option",subType:"linear",spot:!1,margin:!1,swap:!1,future:!1,option:!0,active:y,contract:!0,linear:!0,inverse:!1,taker:this.safeNumber(t,"takerFee",this.parseNumber("0.0006")),maker:this.safeNumber(t,"makerFee",this.parseNumber("0.0001")),contractSize:this.parseNumber("1"),expiry:p,expiryDatetime:this.iso8601(p),strike:this.parseNumber(m),optionType:this.safeStringLower(t,"optionsType"),precision:{amount:this.safeNumber(c,"qtyStep"),price:this.safeNumber(u,"tickSize")},limits:{leverage:{min:void 0,max:void 0},amount:{min:this.safeNumber(c,"minOrderQty"),max:this.safeNumber(c,"maxOrderQty")},price:{min:this.safeNumber(u,"minPrice"),max:this.safeNumber(u,"maxPrice")},cost:{min:void 0,max:void 0}},created:this.safeInteger(t,"launchTime"),info:t}))}return n}parseTicker(e,t){let i=void 0===this.safeString(e,"openInterestValue"),r=this.safeInteger(e,"time"),s=this.safeString(e,"symbol"),a=i?"spot":"contract";t=this.safeMarket(s,t,void 0,a);let o=this.safeSymbol(s,t,void 0,a),d=this.safeString(e,"lastPrice"),h=this.safeString(e,"prevPrice24h"),l=this.safeString(e,"price24hPcnt");l=n.Y.stringMul(l,"100");let c=this.safeString(e,"turnover24h"),u=this.safeString(e,"volume24h"),f=this.safeString(e,"bid1Price"),p=this.safeString(e,"ask1Price"),v=this.safeString(e,"highPrice24h"),m=this.safeString(e,"lowPrice24h");return this.safeTicker({symbol:o,timestamp:r,datetime:this.iso8601(r),high:v,low:m,bid:f,bidVolume:this.safeString2(e,"bidSize","bid1Size"),ask:p,askVolume:this.safeString2(e,"askSize","ask1Size"),vwap:void 0,open:h,close:d,last:d,previousClose:void 0,change:void 0,percentage:l,average:void 0,baseVolume:u,quoteVolume:c,markPrice:this.safeString(e,"markPrice"),indexPrice:this.safeString(e,"indexPrice"),info:e},t)}async fetchTicker(e,t={}){if(void 0===e)throw new a.ArgumentsRequired(this.id+" fetchTicker() requires a symbol argument");await this.loadMarkets();let i=this.market(e),r={symbol:i.id};i.spot?r.category="spot":i.option?r.category="option":i.linear?r.category="linear":i.inverse&&(r.category="inverse");let s=await this.publicGetV5MarketTickers(this.extend(r,t)),n=this.safeDict(s,"result",{}),o=this.safeList(n,"list",[]),d=this.safeDict(o,0);return this.parseTicker(d,i)}async fetchTickers(e,t={}){let i,r,s,n;if(await this.loadMarkets(),void 0!==e){let s;r=[];let n=this.handleMarketTypeAndParams("fetchTickers",void 0,t)[0];for(let t=0;t<e.length;t++){let o=e[t];if(i=-1===o.indexOf("/")?this.safeMarket(o,void 0,void 0,n):this.market(o),void 0===s)s=i.type;else if(i.type!==s)throw new a.BadRequest(this.id+" fetchTickers can only accept a list of symbols of the same type");r.push(i.symbol)}}let o={};[s,t]=this.handleMarketTypeAndParams("fetchTickers",i,t);let d=this.safeString(t,"subType");[n,t]=this.handleSubTypeAndParams("fetchTickers",i,t,"linear"),"spot"===s&&void 0===d?o.category="spot":"option"===s?(o.category="option",o.baseCoin=this.safeString(t,"baseCoin","BTC")):("swap"===s||"future"===s||void 0!==n)&&(o.category=n);let h=await this.publicGetV5MarketTickers(this.extend(o,t)),l=this.safeDict(h,"result",{}),c=this.safeList(l,"list",[]);return this.parseTickers(c,r)}parseOHLCV(e,t){let i=t.inverse?6:5;return[this.safeInteger(e,0),this.safeNumber(e,1),this.safeNumber(e,2),this.safeNumber(e,3),this.safeNumber(e,4),this.safeNumber(e,i)]}async fetchOHLCV(e,t="1m",i,r,s={}){let n;if(void 0===e)throw new a.ArgumentsRequired(this.id+" fetchOHLCV() requires a symbol argument");await this.loadMarkets();let o=!1;if([o,s]=this.handleOptionAndParams(s,"fetchOHLCV","paginate"),o)return await this.fetchPaginatedCallDeterministic("fetchOHLCV",e,i,r,t,s,1e3);let d=this.market(e),h={symbol:d.id};if(void 0===r&&(r=200),void 0!==i&&(h.start=i),void 0!==r&&(h.limit=r),[h,s]=this.handleUntilOption("end",h,s),h.interval=this.safeString(this.timeframes,t,t),d.spot)h.category="spot",n=await this.publicGetV5MarketKline(this.extend(h,s));else{let e=this.safeString(s,"price");if(s=this.omit(s,"price"),d.linear)h.category="linear";else if(d.inverse)h.category="inverse";else throw new a.NotSupported(this.id+" fetchOHLCV() is not supported for option markets");n="mark"===e?await this.publicGetV5MarketMarkPriceKline(this.extend(h,s)):"index"===e?await this.publicGetV5MarketIndexPriceKline(this.extend(h,s)):"premiumIndex"===e?await this.publicGetV5MarketPremiumIndexPriceKline(this.extend(h,s)):await this.publicGetV5MarketKline(this.extend(h,s))}let l=this.safeDict(n,"result",{}),c=this.safeList(l,"list",[]);return this.parseOHLCVs(c,d,t,i,r)}parseFundingRate(e,t){let i;let r=this.safeInteger(e,"timestamp");e=this.omit(e,"timestamp");let s=this.safeString(e,"symbol"),a=this.safeSymbol(s,t,void 0,"swap"),n=this.safeNumber(e,"fundingRate"),o=this.safeInteger(e,"nextFundingTime"),d=this.safeNumber(e,"markPrice"),h=this.safeNumber(e,"indexPrice"),l=this.safeDict(this.safeMarket(s,t,void 0,"swap"),"info"),c=this.safeInteger(l,"fundingInterval");return void 0!==c&&(i=this.parseToInt(c/60).toString()+"h"),{info:e,symbol:a,markPrice:d,indexPrice:h,interestRate:void 0,estimatedSettlePrice:void 0,timestamp:r,datetime:this.iso8601(r),fundingRate:n,fundingTimestamp:o,fundingDatetime:this.iso8601(o),nextFundingRate:void 0,nextFundingTimestamp:void 0,nextFundingDatetime:void 0,previousFundingRate:void 0,previousFundingTimestamp:void 0,previousFundingDatetime:void 0,interval:i}}async fetchFundingRates(e,t={}){let i,r;await this.loadMarkets();let s={};if(void 0!==e&&(e=this.marketSymbols(e),i=this.market(e[0]),1===e.length&&(s.symbol=i.id)),[r,t]=this.handleMarketTypeAndParams("fetchFundingRates",i,t),"swap"!==r)throw new a.NotSupported(this.id+" fetchFundingRates() does not support "+r+" markets");{let e;[e,t]=this.handleSubTypeAndParams("fetchFundingRates",i,t,"linear"),s.category=e}let n=await this.publicGetV5MarketTickers(this.extend(s,t)),o=this.safeDict(n,"result",{}),d=this.safeList(o,"list",[]),h=this.safeInteger(n,"time");for(let e=0;e<d.length;e++)d[e].timestamp=h;return this.parseFundingRates(d,e)}async fetchFundingRateHistory(e,t,i,r={}){let s;if(void 0===e)throw new a.ArgumentsRequired(this.id+" fetchFundingRateHistory() requires a symbol argument");await this.loadMarkets();let n=!1;if([n,r]=this.handleOptionAndParams(r,"fetchFundingRateHistory","paginate"),n)return await this.fetchPaginatedCallDeterministic("fetchFundingRateHistory",e,t,i,"8h",r,200);void 0===i&&(i=200);let o={limit:i},d=this.market(e);if(e=d.symbol,o.symbol=d.id,[s,r]=this.getBybitType("fetchFundingRateHistory",d,r),"spot"===s||"option"===s)throw new a.NotSupported(this.id+" fetchFundingRateHistory() only support linear and inverse market");o.category=s,void 0!==t&&(o.startTime=t);let h=this.safeInteger(r,"until"),l=this.safeInteger(r,"endTime",h);r=this.omit(r,["endTime","until"]),void 0!==l?o.endTime=l:void 0!==t&&(o.endTime=t+288e5*i);let c=await this.publicGetV5MarketFundingHistory(this.extend(o,r)),u=[],f=this.safeDict(c,"result"),p=this.safeList(f,"list");for(let e=0;e<p.length;e++){let t=p[e],i=this.safeInteger(t,"fundingRateTimestamp");u.push({info:t,symbol:this.safeSymbol(this.safeString(t,"symbol"),void 0,void 0,"swap"),fundingRate:this.safeNumber(t,"fundingRate"),timestamp:i,datetime:this.iso8601(i)})}let v=this.sortBy(u,"timestamp");return this.filterBySymbolSinceLimit(v,e,t,i)}parseTrade(e,t){let i,r;let s=this.safeStringN(e,["execId","id","tradeId"]),a=this.safeString(e,"symbol"),o="createType"in e?"contract":"spot";void 0!==t&&(o=t.type);let d=this.safeString(e,"category");void 0!==d&&"spot"===d&&(o="spot");let h=(t=this.safeMarket(a,t,void 0,o)).symbol,l=this.safeStringN(e,["execQty","orderQty","size"]),c=this.safeStringN(e,["execPrice","orderPrice","price"]),u=this.safeString(e,"execValue"),f=this.safeIntegerN(e,["time","execTime","tradeTime"]),p=this.safeStringLower(e,"side");if(void 0===p){let t=this.safeInteger(e,"isBuyer");void 0!==t&&(p=t?"buy":"sell")}let v=this.safeBool(e,"isMaker");if(void 0!==v)i=v?"maker":"taker";else{let t=this.safeString(e,"lastLiquidityInd");"UNKNOWN"===t&&(t=void 0),void 0!==t&&(i="TAKER"===t||"MAKER"===t?t.toLowerCase():"AddedLiquidity"===t?"maker":"taker")}let m=this.safeStringLower(e,"orderType");"unknown"===m&&(m=void 0);let g=this.safeString(e,"execFee");if(void 0!==g){let i;let s=this.safeString(e,"feeRate");i=t.spot?n.Y.stringGt(g,"0")?"buy"===p?t.base:t.quote:"buy"===p?t.quote:t.base:t.inverse?t.base:t.settle,r={cost:g,currency:i,rate:s}}return this.safeTrade({id:s,info:e,timestamp:f,datetime:this.iso8601(f),symbol:h,order:this.safeString(e,"orderId"),type:m,side:p,takerOrMaker:i,price:c,amount:l,cost:u,fee:r},t)}async fetchTrades(e,t,i,r={}){let s;if(void 0===e)throw new a.ArgumentsRequired(this.id+" fetchTrades() requires a symbol argument");await this.loadMarkets();let n=this.market(e),o={symbol:n.id};void 0!==i&&(o.limit=i),[s,r]=this.getBybitType("fetchTrades",n,r),o.category=s;let d=await this.publicGetV5MarketRecentTrade(this.extend(o,r)),h=this.safeDict(d,"result",{}),l=this.safeList(h,"list",[]);return this.parseTrades(l,n,t,i)}async fetchOrderBook(e,t,i={}){if(void 0===e)throw new a.ArgumentsRequired(this.id+" fetchOrderBook() requires a symbol argument");await this.loadMarkets();let r=this.market(e),s={symbol:r.id},n=25;r.spot?(n=50,s.category="spot"):r.option?s.category="option":r.linear?s.category="linear":r.inverse&&(s.category="inverse"),s.limit=void 0!==t?t:n;let o=await this.publicGetV5MarketOrderbook(this.extend(s,i)),d=this.safeDict(o,"result",{}),h=this.safeInteger(d,"ts");return this.parseOrderBook(d,e,h,"b","a")}parseBalance(e){let t=this.safeInteger(e,"time"),i={info:e,timestamp:t,datetime:this.iso8601(t)},r=this.safeDict(e,"result",{}),s=this.safeListN(r,["loanAccountList","list","balance"]);if(void 0===s){let e=this.account();e.free=this.safeString(r,"availableBalance"),e.total=this.safeString(r,"walletBalance"),i.USDC=e}else for(let e=0;e<s.length;e++){let t=s[e],r=this.safeString(t,"accountType");if("UNIFIED"===r||"CONTRACT"===r||"SPOT"===r){let e=this.safeList(t,"coin");for(let t=0;t<e.length;t++){let r=this.account(),s=e[t],a=this.safeString(s,"borrowAmount"),o=this.safeString(s,"accruedInterest");void 0!==a&&void 0!==o&&(r.debt=n.Y.stringAdd(a,o)),r.total=this.safeString(s,"walletBalance");let d=this.safeString2(s,"availableToWithdraw","free");if(void 0!==d)r.free=d;else{let e=this.safeString(s,"locked","0"),t=this.safeString(s,"totalPositionIM","0"),i=this.safeString(s,"totalOrderIM","0"),a=n.Y.stringAdd(e,t);a=n.Y.stringAdd(a,i),r.used=a}let h=this.safeString(s,"coin");i[this.safeCurrencyCode(h)]=r}}else{let e=this.account(),r=this.safeString(t,"loan"),s=this.safeString(t,"interest");void 0!==r&&void 0!==s&&(e.debt=n.Y.stringAdd(r,s)),e.total=this.safeString2(t,"total","walletBalance"),e.free=this.safeStringN(t,["free","availableBalanceWithoutConvert","availableBalance","transferBalance"]),e.used=this.safeString(t,"locked");let a=this.safeStringN(t,["tokenId","coin","currencyCoin"]);i[this.safeCurrencyCode(a)]=e}}return this.safeBalance(i)}async fetchBalance(e={}){let t,i,r,s;await this.loadMarkets();let a={},[n,o]=await this.isUnifiedEnabled();[t,e]=this.handleMarketTypeAndParams("fetchBalance",void 0,e),[i,e]=this.handleSubTypeAndParams("fetchBalance",void 0,e),("swap"===t||"future"===t)&&(t=i);let d=void 0!==t?t.toLowerCase():void 0,h="spot"===t,l="linear"===t,c="inverse"===t;n||o?t=5>this.safeInteger(this.options,"unifiedMarginStatus",3)&&c?"contract":"unified":(l||c)&&(t="contract");let u=this.safeDict(this.options,"accountsByType",{}),f=this.safeStringUpper(u,t,t);return[r,e]=this.handleMarginModeAndParams("fetchBalance",e),h&&void 0!==r?s=await this.privateGetV5SpotCrossMarginTradeAccount(this.extend(a,e)):"fund"===d||"funding"===d?(a.accountType="FUND",s=await this.privateGetV5AssetTransferQueryAccountCoinsBalance(this.extend(a,e))):(a.accountType=f,s=await this.privateGetV5AccountWalletBalance(this.extend(a,e))),this.parseBalance(s)}parseOrderStatus(e){return this.safeString({NEW:"open",PARTIALLY_FILLED:"open",FILLED:"closed",CANCELED:"canceled",PENDING_CANCEL:"open",PENDING_NEW:"open",REJECTED:"rejected",PARTIALLY_FILLED_CANCELLED:"closed",Created:"open",New:"open",Rejected:"rejected",PartiallyFilled:"open",PartiallyFilledCanceled:"closed",Filled:"closed",PendingCancel:"open",Cancelled:"canceled",Untriggered:"open",Deactivated:"canceled",Triggered:"open",Active:"open"},e,e)}parseTimeInForce(e){return this.safeString({GoodTillCancel:"GTC",ImmediateOrCancel:"IOC",FillOrKill:"FOK",PostOnly:"PO"},e,e)}parseOrder(e,t){let i,r,s,a;let o=this.safeString(e,"code");if(void 0!==o&&"0"!==o){let t=this.safeString(e,"category");return this.safeOrder({info:e,status:"rejected",id:this.safeString(e,"orderId"),clientOrderId:this.safeString(e,"orderLinkId"),symbol:this.safeSymbol(this.safeString(e,"symbol"),void 0,void 0,"spot"===t?"spot":"contract")})}let d=this.safeString(e,"symbol"),h="tpslMode"in e;i=void 0!==t?t.type:h?"contract":"spot";let l=(t=this.safeMarket(d,t,void 0,i)).symbol,c=this.safeInteger2(e,"createdTime","createdAt"),u=this.safeString(e,"marketUnit","baseCoin"),f=this.safeString(e,"orderId"),p=this.safeStringLower(e,"orderType"),v=this.safeString(e,"price");"baseCoin"===u&&(r=this.safeString(e,"qty")),s=this.safeString(e,"cumExecValue");let m=this.safeString(e,"cumExecQty"),g=this.safeString(e,"leavesQty"),y=this.safeInteger2(e,"updatedTime","updatedAt"),b=this.safeString(e,"orderStatus"),O=this.parseOrderStatus(b),w=this.safeStringLower(e,"side"),I=this.safeString(e,"cumExecFee");if(void 0!==I){let e;e=t.spot?n.Y.stringGt(I,"0")?"buy"===w?t.base:t.quote:"buy"===w?t.quote:t.base:t.inverse?t.base:t.settle,a={cost:this.parseNumber(I),currency:e}}let S=this.safeString(e,"orderLinkId");void 0!==S&&S.length<1&&(S=void 0);let k=this.omitZero(this.safeString(e,"avgPrice")),T=this.safeString(e,"timeInForce"),P=this.parseTimeInForce(T),C=this.omitZero(this.safeString(e,"triggerPrice")),M=this.safeBool(e,"reduceOnly"),x=this.omitZero(this.safeString(e,"takeProfit")),R=this.omitZero(this.safeString(e,"stopLoss")),A="1"===this.safeString(e,"triggerDirection"),B=void 0!==C&&M;return void 0===R&&B&&(A&&"buy"===w&&(R=C),A||"sell"!==w||(R=C)),void 0===x&&B&&(A&&"sell"===w&&(x=C),A||"buy"!==w||(x=C)),this.safeOrder({info:e,id:f,clientOrderId:S,timestamp:c,datetime:this.iso8601(c),lastTradeTimestamp:y,lastUpdateTimestamp:y,symbol:l,type:p,timeInForce:P,postOnly:void 0,reduceOnly:this.safeBool(e,"reduceOnly"),side:w,price:v,triggerPrice:C,takeProfitPrice:x,stopLossPrice:R,amount:r,cost:s,average:k,filled:m,remaining:g,status:O,fee:a,trades:void 0},t)}async createMarketBuyOrderWithCost(e,t,i={}){if(await this.loadMarkets(),!this.market(e).spot)throw new a.NotSupported(this.id+" createMarketBuyOrderWithCost() supports spot orders only");return await this.createOrder(e,"market","buy",t,1,i)}async createMarketSellOrderWithCost(e,t,i={}){if(await this.loadMarkets(),!(await this.isUnifiedEnabled())[1])throw new a.NotSupported(this.id+" createMarketSellOrderWithCost() supports UTA accounts only");if(!this.market(e).spot)throw new a.NotSupported(this.id+" createMarketSellOrderWithCost() supports spot orders only");return await this.createOrder(e,"market","sell",t,1,i)}async createOrder(e,t,i,r,s,a={}){let n;await this.loadMarkets();let o=this.market(e),d=(await this.isUnifiedEnabled())[1],h=this.safeString2(a,"trailingAmount","trailingStop"),l=this.createOrderRequest(e,t,i,r,s,a,d),c=this.safeDict(this.options,"createOrder",{}),u=this.safeString(c,"method","privatePostV5OrderCreate");n=void 0!==h||"privatePostV5PositionTradingStop"===u?await this.privatePostV5PositionTradingStop(l):await this.privatePostV5OrderCreate(l);let f=this.safeDict(n,"result",{});return this.parseOrder(f,o)}createOrderRequest(e,t,i,r,s,o={},d=!0){let h;let l=this.market(e);e=l.symbol;let c=t.toLowerCase();if(void 0===s&&"limit"===c)throw new a.ArgumentsRequired(this.id+" createOrder requires a price argument for limit orders");[h,o]=this.handleOptionAndParams(o,"createOrder","method","privatePostV5OrderCreate");let u={symbol:l.id},f=this.safeBool(o,"hedged",!1),p=this.safeBool(o,"reduceOnly"),v=this.safeValue2(o,"triggerPrice","stopPrice"),m=this.safeValue(o,"stopLossPrice"),g=this.safeValue(o,"takeProfitPrice"),y=this.safeValue(o,"stopLoss"),b=this.safeValue(o,"takeProfit"),O=this.safeString2(o,"trailingTriggerPrice","activePrice",this.numberToString(s)),w=this.safeString2(o,"trailingAmount","trailingStop"),I=void 0!==w,S=void 0!==v,k=void 0!==m,T=void 0!==g,P=void 0!==y,C=void 0!==b,M="market"===c,x="limit"===c,R="buy"===i,A="privatePostV5PositionTradingStop"===h,B=this.getAmount(e,r),N=void 0!==s?this.getPrice(e,this.numberToString(s)):void 0;if(I||A){if(P||C||S||l.spot)throw new a.InvalidOrder(this.id+" the API endpoint used only supports contract trailingAmount, stopLossPrice and takeProfitPrice orders");(k||T)&&(k?(u.stopLoss=this.getPrice(e,m),x&&(u.tpslMode="Partial",u.slOrderType="Limit",u.slLimitPrice=N,u.slSize=B)):T&&(u.takeProfit=this.getPrice(e,g),x&&(u.tpslMode="Partial",u.tpOrderType="Limit",u.tpLimitPrice=N,u.tpSize=B)))}else{let e;u.side=this.capitalize(i),u.orderType=this.capitalize(c);let t=this.safeStringLower(o,"timeInForce");[e,o]=this.handlePostOnly(M,"postonly"===t,o),e?u.timeInForce="PostOnly":"gtc"===t?u.timeInForce="GTC":"fok"===t?u.timeInForce="FOK":"ioc"===t&&(u.timeInForce="IOC"),l.spot&&(void 0!==v?u.orderFilter="StopOrder":(void 0!==m||void 0!==g||P||C)&&(u.orderFilter="tpslOrder"));let r=this.safeString(o,"clientOrderId");void 0!==r?u.orderLinkId=r:l.option&&(u.orderLinkId=this.uuid16()),x&&(u.price=N)}l.spot?u.category="spot":l.linear?u.category="linear":l.inverse?u.category="inverse":l.option&&(u.category="option");let L=this.safeString(o,"cost");o=this.omit(o,"cost");let q="market"===c&&"buy"===i&&(void 0!==s||void 0!==L);if(l.spot&&"market"===t&&d&&!q){if(void 0!==L||void 0!==s){let t;u.marketUnit="quoteCoin",t=void 0!==L?L:n.Y.stringMul(B,N),u.qty=this.getCost(e,t)}else u.marketUnit="baseCoin",u.qty=B}else if(l.spot&&"market"===t&&"buy"===i){let t=!0;if([t,o]=this.handleOptionAndParams(o,"createOrder","createMarketBuyOrderRequiresPrice"),t){if(void 0===s&&void 0===L)throw new a.InvalidOrder(this.id+" createOrder() requires the price argument for market buy orders to calculate the total cost to spend (amount * price), alternatively set the createMarketBuyOrderRequiresPrice option or param to false and pass the cost to spend in the amount argument");{let t=n.Y.stringMul(B,N);u.qty=this.getCost(e,void 0!==L?L:t)}}else void 0!==L?u.qty=this.getCost(e,this.numberToString(L)):void 0!==s?u.qty=this.getCost(e,n.Y.stringMul(B,N)):u.qty=this.getCost(e,this.numberToString(r))}else I||A||(u.qty=B);if(I)void 0!==O&&(u.activePrice=this.getPrice(e,O)),u.trailingStop=w;else if(S&&!A){let t=this.safeString(o,"triggerDirection");if(o=this.omit(o,["triggerPrice","stopPrice","triggerDirection"]),l.spot){if(void 0!==t)throw new a.NotSupported(this.id+" createOrder() : trigger order does not support triggerDirection for spot markets yet")}else{if(void 0===t)throw new a.ArgumentsRequired(this.id+' stop/trigger orders require a triggerDirection parameter, either "above" or "below" to determine the direction of the trigger.');u.triggerDirection="above"===t||"1"===t?1:2}u.triggerPrice=this.getPrice(e,v)}else(k||T)&&!A&&(R?u.triggerDirection=k?1:2:u.triggerDirection=k?2:1,v=k?m:g,u.triggerPrice=this.getPrice(e,v),u.reduceOnly=!0);if((P||C)&&!A){if(P){let t=this.safeValue2(y,"triggerPrice","stopPrice",y);u.stopLoss=this.getPrice(e,t);let i=this.safeValue(y,"price");void 0!==i&&(u.tpslMode="Partial",u.slOrderType="Limit",u.slLimitPrice=this.getPrice(e,i))}if(C){let t=this.safeValue2(b,"triggerPrice","stopPrice",b);u.takeProfit=this.getPrice(e,t);let i=this.safeValue(b,"price");void 0!==i&&(u.tpslMode="Partial",u.tpOrderType="Limit",u.tpLimitPrice=this.getPrice(e,i))}}return!l.spot&&f&&(p&&(o=this.omit(o,"reduceOnly"),i="buy"===i?"sell":"buy"),u.positionIdx="buy"===i?1:2),o=this.omit(o,["stopPrice","timeInForce","stopLossPrice","takeProfitPrice","postOnly","clientOrderId","triggerPrice","stopLoss","takeProfit","trailingAmount","trailingTriggerPrice","hedged"]),this.extend(u,o)}async createOrders(e,t={}){let i;await this.loadMarkets();let r=(await this.isUnifiedEnabled())[1],s=[],n=[];for(let t=0;t<e.length;t++){let i=e[t],a=this.safeString(i,"symbol");n.push(a);let o=this.safeString(i,"type"),d=this.safeString(i,"side"),h=this.safeValue(i,"amount"),l=this.safeValue(i,"price"),c=this.safeDict(i,"params",{}),u=this.createOrderRequest(a,o,d,h,l,c,r);s.push(u)}let o=this.marketSymbols(n,void 0,!1,!0,!0),d=this.market(o[0]);if([i,t]=this.getBybitType("createOrders",d,t),"inverse"===i)throw new a.NotSupported(this.id+" createOrders does not allow inverse orders");let h=await this.privatePostV5OrderCreateBatch(this.extend({category:i,request:s},t)),l=this.safeDict(h,"result",{}),c=this.safeList(l,"list",[]),u=this.safeDict(h,"retExtInfo",{}),f=this.safeList(u,"list",[]);for(let e=0;e<f.length;e++){let t=f[e];0!==this.safeInteger(t,"code")&&(c[e]=this.extend(c[e],t))}return this.parseOrders(c)}editOrderRequest(e,t,i,r,s,a,n={}){let o=this.market(t),d={symbol:o.id,orderId:e};o.spot?d.category="spot":o.linear?d.category="linear":o.inverse?d.category="inverse":o.option&&(d.category="option"),void 0!==s&&(d.qty=this.getAmount(t,s)),void 0!==a&&(d.price=this.getPrice(t,this.numberToString(a)));let h=this.safeString2(n,"triggerPrice","stopPrice"),l=this.safeString(n,"stopLossPrice"),c=this.safeString(n,"takeProfitPrice"),u=this.safeValue(n,"stopLoss"),f=this.safeValue(n,"takeProfit"),p=void 0!==l,v=void 0!==u,m=void 0!==f;if((p||void 0!==c)&&(h=p?l:c),void 0!==h){let e="0"===h?h:this.getPrice(t,h);d.triggerPrice=e;let i=this.safeString(n,"triggerBy","LastPrice");d.triggerBy=i}if(v||m){if(v){let e=this.safeString2(u,"triggerPrice","stopPrice",u),i="0"===e?e:this.getPrice(t,e);d.stopLoss=i;let r=this.safeString(n,"slTriggerBy","LastPrice");d.slTriggerBy=r}if(m){let e=this.safeString2(f,"triggerPrice","stopPrice",f),i="0"===e?e:this.getPrice(t,e);d.takeProfit=i;let r=this.safeString(n,"tpTriggerBy","LastPrice");d.tpTriggerBy=r}}let g=this.safeString(n,"clientOrderId");return void 0!==g&&(d.orderLinkId=g),n=this.omit(n,["stopPrice","stopLossPrice","takeProfitPrice","triggerPrice","clientOrderId","stopLoss","takeProfit"]),d}async editOrder(e,t,i,r,s,n,o={}){if(await this.loadMarkets(),void 0===t)throw new a.ArgumentsRequired(this.id+" editOrder() requires a symbol argument");let d=this.editOrderRequest(e,t,i,r,s,n,o),h=await this.privatePostV5OrderAmend(this.extend(d,o)),l=this.safeDict(h,"result",{});return this.safeOrder({info:h,id:this.safeString(l,"orderId")})}cancelOrderRequest(e,t,i={}){let r=this.market(t),s={symbol:r.id};if(r.spot){let e=this.safeBool2(i,"stop","trigger",!1);i=this.omit(i,["stop","trigger"]),s.orderFilter=e?"StopOrder":"Order"}return void 0!==e&&(s.orderId=e),r.spot?s.category="spot":r.linear?s.category="linear":r.inverse?s.category="inverse":r.option&&(s.category="option"),this.extend(s,i)}async cancelOrder(e,t,i={}){if(void 0===t)throw new a.ArgumentsRequired(this.id+" cancelOrder() requires a symbol argument");await this.loadMarkets();let r=this.market(t),s=this.cancelOrderRequest(e,t,i),n=await this.privatePostV5OrderCancel(s),o=this.safeDict(n,"result",{});return this.parseOrder(o,r)}async cancelOrders(e,t,i={}){let r;if(void 0===t)throw new a.ArgumentsRequired(this.id+" cancelOrders() requires a symbol argument");await this.loadMarkets();let s=this.market(t);if(!(await this.isUnifiedEnabled())[1])throw new a.NotSupported(this.id+" cancelOrders() supports UTA accounts only");if([r,i]=this.getBybitType("cancelOrders",s,i),"inverse"===r)throw new a.NotSupported(this.id+" cancelOrders does not allow inverse orders");let n=[],o=this.safeList2(i,"clientOrderIds","clientOids",[]);i=this.omit(i,["clientOrderIds","clientOids"]);for(let e=0;e<o.length;e++)n.push({symbol:s.id,orderLinkId:this.safeString(o,e)});for(let t=0;t<e.length;t++)n.push({symbol:s.id,orderId:this.safeString(e,t)});let d=await this.privatePostV5OrderCancelBatch(this.extend({category:r,request:n},i)),h=this.safeDict(d,"result",{}),l=this.safeList(h,"list",[]);return this.parseOrders(l,s)}async cancelAllOrdersAfter(e,t={}){let i;await this.loadMarkets();let r={timeWindow:this.parseToInt(e/1e3)};[i,t]=this.handleMarketTypeAndParams("cancelAllOrdersAfter",void 0,t,"swap");let s=this.safeString({spot:"SPOT",swap:"DERIVATIVES",option:"OPTIONS"},i,i);return r.product=s,await this.privatePostV5OrderDisconnectedCancelAll(this.extend(r,t))}async cancelOrdersForSymbols(e,t={}){let i;if(await this.loadMarkets(),!(await this.isUnifiedEnabled())[1])throw new a.NotSupported(this.id+" cancelOrdersForSymbols() supports UTA accounts only");let r=[];for(let s=0;s<e.length;s++){let n;let o=e[s],d=this.safeString(o,"symbol"),h=this.market(d);if([n,t]=this.getBybitType("cancelOrders",h,t),"inverse"===n)throw new a.NotSupported(this.id+" cancelOrdersForSymbols does not allow inverse orders");if(void 0!==i&&i!==n)throw new a.ExchangeError(this.id+" cancelOrdersForSymbols requires all orders to be of the same category (linear, spot or option))");i=n;let l=this.safeString(o,"id"),c=this.safeString(o,"clientOrderId"),u="orderId";void 0!==c&&(u="orderLinkId");let f={symbol:h.id};f[u]="orderId"===u?l:c,r.push(f)}let s={category:i,request:r},n=await this.privatePostV5OrderCancelBatch(this.extend(s,t)),o=this.safeDict(n,"result",{}),d=this.safeList(o,"list",[]);return this.parseOrders(d,void 0)}async cancelAllOrders(e,t={}){let i,r;await this.loadMarkets();let[s,n]=await this.isUnifiedEnabled(),o={};if(void 0!==e&&(i=this.market(e),o.symbol=i.id),[r,t]=this.getBybitType("cancelAllOrders",i,t),o.category=r,"option"===r&&!(s||n))throw new a.NotSupported(this.id+" cancelAllOrders() Normal Account not support "+r+" market");if("linear"===r||"inverse"===r){let i=this.safeString(t,"baseCoin");if(void 0===e&&void 0===i){let e=this.safeString(this.options,"defaultSettle","USDT");o.settleCoin=this.safeString(t,"settleCoin",e)}}let d=this.safeBool2(t,"stop","trigger",!1);t=this.omit(t,["stop","trigger"]),d&&(o.orderFilter="StopOrder");let h=await this.privatePostV5OrderCancelAll(this.extend(o,t)),l=this.safeDict(h,"result",{}),c=this.safeList(l,"list");return Array.isArray(c)?this.parseOrders(c,i):h}async fetchOrderClassic(e,t,i={}){if(void 0===t)throw new a.ArgumentsRequired(this.id+" fetchOrder() requires a symbol argument");if(await this.loadMarkets(),this.market(t).spot)throw new a.NotSupported(this.id+" fetchOrder() is not supported for spot markets");let r=await this.fetchOrders(t,void 0,void 0,this.extend({orderId:e},i)),s=r.length;if(0===s){let t=this.safeBoolN(i,["trigger","stop"],!1);throw new a.OrderNotFound("Order "+e.toString()+" was not found."+(t?"":' If you are trying to fetch SL/TP conditional order, you might try setting params["trigger"] = true'))}if(s>1)throw new a.InvalidOrder(this.id+" returned more than one order");return this.safeValue(r,0)}async fetchOrder(e,t,i={}){let r,s;await this.loadMarkets();let[n,o]=await this.isUnifiedEnabled();if(!(n||o))return await this.fetchOrderClassic(e,t,i);let d=!1;if([d,i]=this.handleOptionAndParams(i,"fetchOrder","acknowledged"),!d)throw new a.ArgumentsRequired(this.id+' fetchOrder() can only access an order if it is in last 500 orders (of any status) for your account. Set params["acknowledged"] = true to hide this warning. Alternatively, we suggest to use fetchOpenOrder or fetchClosedOrder');let h=this.market(t);[r,i]=this.getBybitType("fetchOrder",h,i);let l={symbol:h.id,orderId:e,category:r};[s,i]=this.handleParamBool2(i,"trigger","stop",!1),s&&(l.orderFilter="StopOrder");let c=await this.privateGetV5OrderRealtime(this.extend(l,i)),u=this.safeDict(c,"result",{}),f=this.safeList(u,"list",[]);if(0===f.length)throw new a.OrderNotFound("Order "+e.toString()+" was not found."+(s?"":' If you are trying to fetch SL/TP conditional order, you might try setting params["trigger"] = true'));let p=this.safeDict(f,0,{});return this.parseOrder(p,h)}async fetchOrders(e,t,i,r={}){let s=await this.isUnifiedEnabled();if(this.safeBool(s,1))throw new a.NotSupported(this.id+" fetchOrders() is not supported after the 5/02 update for UTA accounts, please use fetchOpenOrders, fetchClosedOrders or fetchCanceledOrders");return await this.fetchOrdersClassic(e,t,i,r)}async fetchOrdersClassic(e,t,i,r={}){let s,n;await this.loadMarkets();let o=!1;if([o,r]=this.handleOptionAndParams(r,"fetchOrders","paginate"),o)return await this.fetchPaginatedCallCursor("fetchOrders",e,t,i,r,"nextPageCursor","cursor",void 0,50);let d={};if(void 0!==e&&(s=this.market(e),d.symbol=s.id),[n,r]=this.getBybitType("fetchOrders",s,r),"spot"===n)throw new a.NotSupported(this.id+" fetchOrders() is not supported for spot markets");d.category=n;let h=this.safeBoolN(r,["trigger","stop"],!1);r=this.omit(r,["trigger","stop"]),h&&(d.orderFilter="StopOrder"),void 0!==i&&(d.limit=i),void 0!==t&&(d.startTime=t);let l=this.safeInteger(r,"until"),c=this.safeInteger(r,"endTime",l);r=this.omit(r,["endTime","until"]),void 0!==c&&(d.endTime=c);let u=await this.privateGetV5OrderHistory(this.extend(d,r)),f=this.addPaginationCursorToResult(u);return this.parseOrders(f,s,t,i)}async fetchClosedOrder(e,t,i={}){await this.loadMarkets();let r=await this.fetchClosedOrders(t,void 0,void 0,this.extend({orderId:e},i)),s=r.length;if(0===s){let t=this.safeBoolN(i,["trigger","stop"],!1);throw new a.OrderNotFound("Order "+e.toString()+" was not found."+(t?"":' If you are trying to fetch SL/TP conditional order, you might try setting params["trigger"] = true'))}if(s>1)throw new a.InvalidOrder(this.id+" returned more than one order");return this.safeValue(r,0)}async fetchOpenOrder(e,t,i={}){await this.loadMarkets();let r=await this.fetchOpenOrders(t,void 0,void 0,this.extend({orderId:e},i)),s=r.length;if(0===s){let t=this.safeBoolN(i,["trigger","stop"],!1);throw new a.OrderNotFound("Order "+e.toString()+" was not found."+(t?"":' If you are trying to fetch SL/TP conditional order, you might try setting params["trigger"] = true'))}if(s>1)throw new a.InvalidOrder(this.id+" returned more than one order");return this.safeValue(r,0)}async fetchCanceledAndClosedOrders(e,t,i,r={}){let s,a;await this.loadMarkets();let n=!1;if([n,r]=this.handleOptionAndParams(r,"fetchCanceledAndClosedOrders","paginate"),n)return await this.fetchPaginatedCallCursor("fetchCanceledAndClosedOrders",e,t,i,r,"nextPageCursor","cursor",void 0,50);let o={};void 0!==e&&(s=this.market(e),o.symbol=s.id),[a,r]=this.getBybitType("fetchCanceledAndClosedOrders",s,r),o.category=a;let d=this.safeBoolN(r,["trigger","stop"],!1);r=this.omit(r,["trigger","stop"]),d&&(o.orderFilter="StopOrder"),void 0!==i&&(o.limit=i),void 0!==t&&(o.startTime=t);let h=this.safeInteger(r,"until"),l=this.safeInteger(r,"endTime",h);r=this.omit(r,["endTime","until"]),void 0!==l&&(o.endTime=l);let c=await this.privateGetV5OrderHistory(this.extend(o,r)),u=this.addPaginationCursorToResult(c);return this.parseOrders(u,s,t,i)}async fetchClosedOrders(e,t,i,r={}){return await this.loadMarkets(),await this.fetchCanceledAndClosedOrders(e,t,i,this.extend({orderStatus:"Filled"},r))}async fetchCanceledOrders(e,t,i,r={}){return await this.loadMarkets(),await this.fetchCanceledAndClosedOrders(e,t,i,this.extend({orderStatus:"Cancelled"},r))}async fetchOpenOrders(e,t,i,r={}){let s,a;await this.loadMarkets();let n=!1;if([n,r]=this.handleOptionAndParams(r,"fetchOpenOrders","paginate"),n)return await this.fetchPaginatedCallCursor("fetchOpenOrders",e,t,i,r,"nextPageCursor","cursor",void 0,50);let o={};if(void 0!==e&&(s=this.market(e),o.symbol=s.id),[a,r]=this.getBybitType("fetchOpenOrders",s,r),"linear"===a||"inverse"===a){let t=this.safeString(r,"baseCoin");if(void 0===e&&void 0===t){let e=this.safeString(this.options,"defaultSettle","USDT"),t=this.safeString(r,"settleCoin",e);o.settleCoin=t}}o.category=a;let d=this.safeBool2(r,"stop","trigger",!1);r=this.omit(r,["stop","trigger"]),d&&(o.orderFilter="StopOrder"),void 0!==i&&(o.limit=i);let h=await this.privateGetV5OrderRealtime(this.extend(o,r)),l=this.addPaginationCursorToResult(h);return this.parseOrders(l,s,t,i)}async fetchOrderTrades(e,t,i,r,s={}){let a={},n=this.safeString2(s,"clientOrderId","orderLinkId");return void 0!==n?a.orderLinkId=n:a.orderId=e,s=this.omit(s,["clientOrderId","orderLinkId"]),await this.fetchMyTrades(t,i,r,this.extend(a,s))}async fetchMyTrades(e,t,i,r={}){let s,a;await this.loadMarkets();let n=!1;if([n,r]=this.handleOptionAndParams(r,"fetchMyTrades","paginate"),n)return await this.fetchPaginatedCallCursor("fetchMyTrades",e,t,i,r,"nextPageCursor","cursor",void 0,100);let o={execType:"Trade"};void 0!==e&&(s=this.market(e),o.symbol=s.id),[a,r]=this.getBybitType("fetchMyTrades",s,r),o.category=a,void 0!==i&&(o.limit=i),void 0!==t&&(o.startTime=t),[o,r]=this.handleUntilOption("endTime",o,r);let d=await this.privateGetV5ExecutionList(this.extend(o,r)),h=this.addPaginationCursorToResult(d);return this.parseTrades(h,s,t,i)}parseDepositAddress(e,t){let i=this.safeString(e,"addressDeposit"),r=this.safeString(e,"tagDeposit"),s=this.safeString(t,"code");return this.checkAddress(i),{info:e,currency:s,network:this.networkIdToCode(this.safeString(e,"chain"),s),address:i,tag:r}}async fetchDepositAddressesByNetwork(e,t={}){let i;await this.loadMarkets();let r=this.currency(e),s={coin:r.id};[i,t]=this.handleNetworkCodeAndParams(t),void 0!==i&&(s.chainType=this.networkCodeToId(i,e));let a=await this.privateGetV5AssetDepositQueryAddress(this.extend(s,t)),n=this.safeDict(a,"result",{}),o=this.safeList(n,"chains",[]),d=this.safeString(n,"coin");r=this.currency(d);let h=this.parseDepositAddresses(o,[r.code],!1,{currency:r.code});return this.indexBy(h,"network")}async fetchDepositAddress(e,t={}){await this.loadMarkets();let i=this.currency(e),[r,s]=this.handleNetworkCodeAndParams(t),a=await this.fetchDepositAddressesByNetwork(e,s),n=this.selectNetworkCodeFromUnifiedNetworks(i.code,r,a);return a[n]}async fetchDeposits(e,t,i,r={}){let s;await this.loadMarkets();let a=!1;if([a,r]=this.handleOptionAndParams(r,"fetchDeposits","paginate"),a)return await this.fetchPaginatedCallCursor("fetchDeposits",e,t,i,r,"nextPageCursor","cursor",void 0,50);let n={};void 0!==e&&(s=this.currency(e),n.coin=s.id),void 0!==t&&(n.startTime=t),void 0!==i&&(n.limit=i),[n,r]=this.handleUntilOption("endTime",n,r);let o=await this.privateGetV5AssetDepositQueryRecord(this.extend(n,r)),d=this.addPaginationCursorToResult(o);return this.parseTransactions(d,s,t,i)}async fetchWithdrawals(e,t,i,r={}){let s;await this.loadMarkets();let a=!1;if([a,r]=this.handleOptionAndParams(r,"fetchWithdrawals","paginate"),a)return await this.fetchPaginatedCallCursor("fetchWithdrawals",e,t,i,r,"nextPageCursor","cursor",void 0,50);let n={};void 0!==e&&(s=this.currency(e),n.coin=s.id),void 0!==t&&(n.startTime=t),void 0!==i&&(n.limit=i),[n,r]=this.handleUntilOption("endTime",n,r);let o=await this.privateGetV5AssetWithdrawQueryRecord(this.extend(n,r)),d=this.addPaginationCursorToResult(o);return this.parseTransactions(d,s,t,i)}parseTransactionStatus(e){return this.safeString({0:"unknown",1:"pending",2:"processing",3:"ok",4:"fail",SecurityCheck:"pending",Pending:"pending",success:"ok",CancelByUser:"canceled",Reject:"rejected",Fail:"failed",BlockchainConfirmed:"ok"},e,e)}parseTransaction(e,t){let i;let r=this.safeString(e,"coin"),s=this.safeCurrencyCode(r,t),a=this.safeInteger2(e,"createTime","successAt"),n=this.safeInteger(e,"updateTime"),o=this.parseTransactionStatus(this.safeString(e,"status")),d=this.safeNumber2(e,"depositFee","withdrawFee"),h="depositFee"in e?"deposit":"withdrawal";void 0!==d&&(i={cost:d,currency:s});let l=this.safeString(e,"toAddress");return{info:e,id:this.safeString2(e,"id","withdrawId"),txid:this.safeString(e,"txID"),timestamp:a,datetime:this.iso8601(a),network:this.networkIdToCode(this.safeString(e,"chain")),address:void 0,addressTo:l,addressFrom:void 0,tag:this.safeString(e,"tag"),tagTo:void 0,tagFrom:void 0,type:h,amount:this.safeNumber(e,"amount"),currency:s,status:o,updated:n,fee:i,internal:void 0,comment:void 0}}async fetchLedger(e,t,i,r={}){let s,a,n;await this.loadMarkets();let o=!1;if([o,r]=this.handleOptionAndParams(r,"fetchLedger","paginate"),o)return await this.fetchPaginatedCallCursor("fetchLedger",e,t,i,r,"nextPageCursor","cursor",void 0,50);let d={},h=await this.isUnifiedEnabled(),l="coin";h[1]?(l="currency",void 0!==t&&(d.startTime=t)):void 0!==t&&(d.start_date=this.yyyymmdd(t)),void 0!==e&&(s=this.currency(e),d[l]=s.id),void 0!==i&&(d.limit=i),[a,r]=this.handleSubTypeAndParams("fetchLedger",void 0,r),n=h[1]?"inverse"===a?await this.privateGetV5AccountContractTransactionLog(this.extend(d,r)):await this.privateGetV5AccountTransactionLog(this.extend(d,r)):await this.privateGetV5AccountContractTransactionLog(this.extend(d,r));let c=this.addPaginationCursorToResult(n);return this.parseLedger(c,s,t,i)}parseLedgerEntry(e,t){let i,r,s;let a=this.safeString2(e,"coin","currency"),o=this.safeCurrencyCode(a,t);t=this.safeCurrency(a,t);let d=this.safeString2(e,"amount","change"),h=this.safeString2(e,"wallet_balance","cashBalance"),l=n.Y.stringLt(d,"0")?"out":"in";if(void 0!==h&&void 0!==d){let e="out"===l?d:n.Y.stringNeg(d);i=this.parseToNumeric(n.Y.stringAdd(h,e)),r=this.parseToNumeric(h),s=this.parseToNumeric(n.Y.stringAbs(d))}let c=this.parse8601(this.safeString(e,"exec_time"));return void 0===c&&(c=this.safeInteger(e,"transactionTime")),this.safeLedgerEntry({info:e,id:this.safeString(e,"id"),direction:l,account:this.safeString(e,"wallet_id"),referenceId:this.safeString(e,"tx_id"),referenceAccount:void 0,type:this.parseLedgerEntryType(this.safeString(e,"type")),currency:o,amount:s,timestamp:c,datetime:this.iso8601(c),before:i,after:r,status:"ok",fee:{currency:o,cost:this.safeNumber(e,"fee")}},t)}parseLedgerEntryType(e){return this.safeString({Deposit:"transaction",Withdraw:"transaction",RealisedPNL:"trade",Commission:"fee",Refund:"cashback",Prize:"prize",ExchangeOrderWithdraw:"transaction",ExchangeOrderDeposit:"transaction",TRANSFER_IN:"transaction",TRANSFER_OUT:"transaction",TRADE:"trade",SETTLEMENT:"trade",DELIVERY:"trade",LIQUIDATION:"trade",BONUS:"Prize",FEE_REFUND:"cashback",INTEREST:"transaction",CURRENCY_BUY:"trade",CURRENCY_SELL:"trade"},e,e)}async withdraw(e,t,i,r,s={}){let a;[r,s]=this.handleWithdrawTagAndParams(r,s),[a,s]=this.handleOptionAndParams(s,"withdraw","accountType","SPOT"),await this.loadMarkets(),this.checkAddress(i);let n=this.currency(e),o={coin:n.id,amount:this.numberToString(t),address:i,timestamp:this.milliseconds(),accountType:a};void 0!==r&&(o.tag=r);let[d,h]=this.handleNetworkCodeAndParams(s),l=this.networkCodeToId(d);void 0!==l&&(o.chain=l.toUpperCase());let c=await this.privatePostV5AssetWithdrawCreate(this.extend(o,h)),u=this.safeDict(c,"result",{});return this.parseTransaction(u,n)}async fetchPosition(e,t={}){let i,r;if(void 0===e)throw new a.ArgumentsRequired(this.id+" fetchPosition() requires a symbol argument");await this.loadMarkets();let s=this.market(e),n={symbol:s.id};[r,t]=this.getBybitType("fetchPosition",s,t),n.category=r,i=await this.privateGetV5PositionList(this.extend(n,t));let o=this.safeDict(i,"result",{}),d=this.safeList2(o,"list","dataList",[]),h=this.safeInteger(i,"time"),l=this.safeDict(d,0,{}),c=this.parsePosition(l,s);return c.timestamp=h,c.datetime=this.iso8601(h),c}async fetchPositions(e,t={}){let i,r,s;if(await this.loadMarkets(),void 0!==e&&Array.isArray(e)){let t=e.length;if(t>1)throw new a.ArgumentsRequired(this.id+" fetchPositions() does not accept an array with more than one symbol");1===t&&(i=e[0]),e=this.marketSymbols(e)}else void 0!==e&&(i=e,e=[this.symbol(i)]);let n={};if(void 0!==i&&(i=(r=this.market(i)).symbol,n.symbol=r.id),[s,t]=this.getBybitType("fetchPositions",r,t),"linear"===s||"inverse"===s){let e=this.safeString(t,"baseCoin");if("linear"===s){if(void 0===i&&void 0===e){let e=this.safeString(this.options,"defaultSettle","USDT"),i=this.safeString(t,"settleCoin",e);n.settleCoin=i}}else void 0===i&&void 0===e&&(n.category="inverse")}t=this.omit(t,["type"]),n.category=s;let o=await this.privateGetV5PositionList(this.extend(n,t)),d=this.addPaginationCursorToResult(o),h=[];for(let e=0;e<d.length;e++){let t=d[e];"data"in t&&"is_valid"in t&&(t=this.safeDict(t,"data")),h.push(this.parsePosition(t))}return this.filterByArrayPositions(h,"symbol",e,!1)}parsePosition(e,t){let i;let r=void 0!==this.safeString(e,"closedSize"),s=this.safeString(e,"symbol");t=this.safeMarket(s,t,void 0,"contract");let a=n.Y.stringAbs(this.safeString2(e,"size","qty")),o=this.safeString(e,"side");void 0!==o&&(o="Buy"===o?r?"short":"long":"Sell"===o?r?"long":"short":void 0);let d=this.safeString2(e,"positionValue","cumExitValue"),h=this.omitZero(this.safeString(e,"unrealisedPnl")),l=this.safeStringN(e,["positionIM","cumEntryValue"]),c=this.safeString(e,"positionMM"),u=this.safeIntegerN(e,["createdTime","createdAt"]),f=this.parse8601(this.safeString(e,"updated_at"));void 0===f&&(f=this.safeIntegerN(e,["updatedTime","updatedAt","updatedTime"]));let p=this.safeInteger(e,"tradeMode",0);(!this.options.enableUnifiedAccount||this.options.enableUnifiedAccount&&t.inverse)&&!r&&(i=1===p?"isolated":"cross");let v=this.safeString(e,"positionBalance"),m=this.omitZero(this.safeStringN(e,["entryPrice","avgPrice","avgEntryPrice"])),g=this.omitZero(this.safeString(e,"liqPrice")),y=this.safeString(e,"leverage");if(void 0!==g){if("USDC"===t.settle){let e=n.Y.stringAbs(n.Y.stringSub(m,g));v=n.Y.stringAdd(n.Y.stringAdd(n.Y.stringMul(e,a),c),h)}else{let i=this.safeString(e,"bustPrice");if(t.linear){let e=n.Y.stringAbs(n.Y.stringSub(g,i));c=n.Y.stringMul(e,a),void 0!==m&&(l=n.Y.stringDiv(n.Y.stringMul(a,m),y))}else{let e=n.Y.stringAbs(n.Y.stringSub(i,g)),t=n.Y.stringMul(i,g);c=n.Y.stringDiv(n.Y.stringMul(a,e),t),void 0!==m&&(l=n.Y.stringDiv(a,n.Y.stringMul(m,y)))}}}let b=n.Y.stringDiv(c,d),O=n.Y.stringDiv(c,v,4),w=this.safeString(e,"positionIdx");return this.safePosition({info:e,id:void 0,symbol:t.symbol,timestamp:u,datetime:this.iso8601(u),lastUpdateTimestamp:f,initialMargin:this.parseNumber(l),initialMarginPercentage:this.parseNumber(n.Y.stringDiv(l,d)),maintenanceMargin:this.parseNumber(c),maintenanceMarginPercentage:this.parseNumber(b),entryPrice:this.parseNumber(m),notional:this.parseNumber(d),leverage:this.parseNumber(y),unrealizedPnl:this.parseNumber(h),realizedPnl:this.safeNumber(e,"closedPnl"),contracts:this.parseNumber(a),contractSize:this.safeNumber(t,"contractSize"),marginRatio:this.parseNumber(O),liquidationPrice:this.parseNumber(g),markPrice:this.safeNumber(e,"markPrice"),lastPrice:this.safeNumber(e,"avgExitPrice"),collateral:this.parseNumber(v),marginMode:i,side:o,percentage:void 0,stopLossPrice:this.safeNumber2(e,"stop_loss","stopLoss"),takeProfitPrice:this.safeNumber2(e,"take_profit","takeProfit"),hedged:void 0!==w&&"0"!==w})}async fetchLeverage(e,t={}){await this.loadMarkets();let i=this.market(e),r=await this.fetchPosition(e,t);return this.parseLeverage(r,i)}parseLeverage(e,t){let i=this.safeString(e,"symbol"),r=this.safeInteger(e,"leverage");return{info:e,symbol:this.safeSymbol(i,t),marginMode:this.safeStringLower(e,"marginMode"),longLeverage:r,shortLeverage:r}}async setMarginMode(e,t,i={}){let r,s;await this.loadMarkets();let[n,o]=await this.isUnifiedEnabled();if(n||o){if("isolated"===e)e="ISOLATED_MARGIN";else if("cross"===e)e="REGULAR_MARGIN";else if("portfolio"===e)e="PORTFOLIO_MARGIN";else throw new a.NotSupported(this.id+" setMarginMode() marginMode must be either [isolated, cross, portfolio]");let t={setMarginMode:e};s=await this.privatePostV5AccountSetMarginMode(this.extend(t,i))}else{if(void 0===t)throw new a.ArgumentsRequired(this.id+" setMarginMode() requires a symbol parameter for non unified account");if("USDC"===(r=this.market(t)).settle){if("cross"===e)e="REGULAR_MARGIN";else if("portfolio"===e)e="PORTFOLIO_MARGIN";else throw new a.NotSupported(this.id+" setMarginMode() for usdc market marginMode must be either [cross, portfolio]");let t={setMarginMode:e};s=await this.privatePostV5AccountSetMarginMode(this.extend(t,i))}else{let t,n,o,d;if([t,i]=this.getBybitType("setPositionMode",r,i),"cross"===e)n=0;else if("isolated"===e)n=1;else throw new a.NotSupported(this.id+" setMarginMode() with symbol marginMode must be either [isolated, cross]");let h=this.safeString(i,"leverage");if(void 0===h){if(o=this.safeString2(i,"sell_leverage","sellLeverage"),d=this.safeString2(i,"buy_leverage","buyLeverage"),void 0===o&&void 0===d)throw new a.ArgumentsRequired(this.id+" setMarginMode() requires a leverage parameter or sell_leverage and buy_leverage parameters");void 0===d&&(d=o),void 0===o&&(o=d),i=this.omit(i,["buy_leverage","sell_leverage","sellLeverage","buyLeverage"])}else o=h,d=h,i=this.omit(i,"leverage");let l={category:t,symbol:r.id,tradeMode:n,buyLeverage:d,sellLeverage:o};s=await this.privatePostV5PositionSwitchIsolated(this.extend(l,i))}}return s}async setLeverage(e,t,i={}){if(void 0===t)throw new a.ArgumentsRequired(this.id+" setLeverage() requires a symbol argument");await this.loadMarkets();let r=this.market(t),s=this.numberToString(e),n={symbol:r.id,buyLeverage:s,sellLeverage:s};if(n.buyLeverage=s,n.sellLeverage=s,r.linear)n.category="linear";else if(r.inverse)n.category="inverse";else throw new a.NotSupported(this.id+" setLeverage() only support linear and inverse market");return await this.privatePostV5PositionSetLeverage(this.extend(n,i))}async setPositionMode(e,t,i={}){let r;await this.loadMarkets(),void 0!==t&&(r=this.market(t));let s={mode:e?3:0};if(void 0===t?s.coin="USDT":s.symbol=r.id,void 0!==t)s.category=r.linear?"linear":"inverse";else{let e;[e,i]=this.getBybitType("setPositionMode",r,i),s.category=e}return i=this.omit(i,"type"),await this.privatePostV5PositionSwitchMode(this.extend(s,i))}async fetchDerivativesOpenInterestHistory(e,t="1h",i,r,s={}){await this.loadMarkets();let n=this.market(e),o=n.linear?"linear":"inverse",d=this.safeString(s,"category",o),h=this.safeDict(this.options,"intervals"),l=this.safeString(h,t);if(void 0===l)throw new a.BadRequest(this.id+" fetchOpenInterestHistory() cannot use the "+t+" timeframe");let c={symbol:n.id,intervalTime:l,category:d};void 0!==i&&(c.startTime=i);let u=this.safeInteger(s,"until");s=this.omit(s,["until"]),void 0!==u&&(c.endTime=u),void 0!==r&&(c.limit=r);let f=await this.publicGetV5MarketOpenInterest(this.extend(c,s)),p=this.safeDict(f,"result",{}),v=this.addPaginationCursorToResult(f),m=this.safeString(p,"symbol");return n=this.safeMarket(m,n,void 0,"contract"),this.parseOpenInterestsHistory(v,n,i,r)}async fetchOpenInterest(e,t={}){await this.loadMarkets();let i=this.market(e);if(!i.contract)throw new a.BadRequest(this.id+" fetchOpenInterest() supports contract markets only");let r=this.safeString(t,"interval","1h"),s=this.safeDict(this.options,"intervals"),n=this.safeString(s,r);if(void 0===n)throw new a.BadRequest(this.id+" fetchOpenInterest() cannot use the "+r+" timeframe");let o=i.linear?"linear":"inverse",d=this.safeString(t,"category",o),h={symbol:i.id,intervalTime:n,category:d},l=await this.publicGetV5MarketOpenInterest(this.extend(h,t)),c=this.safeDict(l,"result",{}),u=this.safeString(c,"symbol");i=this.safeMarket(u,i,void 0,"contract");let f=this.addPaginationCursorToResult(l);return this.parseOpenInterest(f[0],i)}async fetchOpenInterestHistory(e,t="1h",i,r,s={}){if("1m"===t)throw new a.BadRequest(this.id+"fetchOpenInterestHistory cannot use the 1m timeframe");if(await this.loadMarkets(),this.safeBool(s,"paginate"))return(s=this.omit(s,"paginate")).timeframe=t,await this.fetchPaginatedCallCursor("fetchOpenInterestHistory",e,i,r,s,"nextPageCursor","cursor",void 0,200);let n=this.market(e);if(n.spot||n.option)throw new a.BadRequest(this.id+" fetchOpenInterestHistory() symbol does not support market "+e);let o={symbol:n.id};return void 0!==r&&(o.limit=r),await this.fetchDerivativesOpenInterestHistory(e,t,i,r,s)}parseOpenInterest(e,t){let i=this.safeInteger(e,"timestamp"),r=this.safeNumber2(e,"open_interest","openInterest");return this.safeOpenInterest({symbol:t.symbol,openInterestAmount:void 0,openInterestValue:r,timestamp:i,datetime:this.iso8601(i),info:e},t)}async fetchCrossBorrowRate(e,t={}){await this.loadMarkets();let i=this.currency(e),r={coin:i.id},s=await this.privateGetV5SpotCrossMarginTradeLoanInfo(this.extend(r,t)),a=this.safeInteger(s,"time"),n=this.safeDict(s,"result",{});return n.timestamp=a,this.parseBorrowRate(n,i)}parseBorrowRate(e,t){let i=this.safeInteger(e,"timestamp"),r=this.safeString2(e,"coin","currency"),s=this.safeNumber(e,"hourlyBorrowRate"),a=void 0!==s?36e5:864e5;return{currency:this.safeCurrencyCode(r,t),rate:this.safeNumber(e,"interestRate",s),period:a,timestamp:i,datetime:this.iso8601(i),info:e}}async fetchBorrowInterest(e,t,i,r,s={}){await this.loadMarkets();let a=await this.privateGetV5SpotCrossMarginTradeAccount(this.extend({},s)),n=this.safeDict(a,"result",{}),o=this.safeList(n,"loanAccountList",[]),d=this.parseBorrowInterests(o,void 0);return this.filterByCurrencySinceLimit(d,e,i,r)}async fetchBorrowRateHistory(e,t,i,r={}){await this.loadMarkets();let s={currency:this.currency(e).id};void 0===t&&(t=this.milliseconds()-2592e6),s.startTime=t;let a=this.safeInteger2(r,"until","endTime");r=this.omit(r,["until"]),void 0===a&&(a=t+2592e6),s.endTime=a;let n=await this.privateGetV5SpotMarginTradeInterestRateHistory(this.extend(s,r)),o=this.safeDict(n,"result"),d=this.safeList(o,"list",[]);return this.parseBorrowRateHistory(d,e,t,i)}parseBorrowInterest(e,t){return{info:e,symbol:void 0,currency:this.safeCurrencyCode(this.safeString(e,"tokenId")),interest:this.safeNumber(e,"interest"),interestRate:void 0,amountBorrowed:this.safeNumber(e,"loan"),marginMode:"cross",timestamp:void 0,datetime:void 0}}async transfer(e,t,i,r,s={}){await this.loadMarkets();let a=this.safeString(s,"transferId",this.uuid()),n=this.safeDict(this.options,"accountsByType",{}),o=this.safeString(n,i,i),d=this.safeString(n,r,r),h=this.currency(e),l=this.currencyToPrecision(e,t),c={transferId:a,fromAccountType:o,toAccountType:d,coin:h.id,amount:l},u=await this.privatePostV5AssetTransferInterTransfer(this.extend(c,s)),f=this.safeInteger(u,"time"),p=this.safeDict(u,"result",{}),v=this.safeStringN(u,["retCode","retMsg"]),m=this.parseTransferStatus(v);return this.extend(this.parseTransfer(p,h),{timestamp:f,datetime:this.iso8601(f),amount:this.parseNumber(l),fromAccount:i,toAccount:r,status:m})}async fetchTransfers(e,t,i,r={}){let s;await this.loadMarkets();let a=!1;if([a,r]=this.handleOptionAndParams(r,"fetchTransfers","paginate"),a)return await this.fetchPaginatedCallCursor("fetchTransfers",e,t,i,r,"nextPageCursor","cursor",void 0,50);let n={};void 0!==e&&(s=this.safeCurrency(e),n.coin=s.id),void 0!==t&&(n.startTime=t),void 0!==i&&(n.limit=i),[n,r]=this.handleUntilOption("endTime",n,r);let o=await this.privateGetV5AssetTransferQueryInterTransferList(this.extend(n,r)),d=this.addPaginationCursorToResult(o);return this.parseTransfers(d,s,t,i)}async borrowCrossMargin(e,t,i={}){await this.loadMarkets();let r=this.currency(e),s={coin:r.id,qty:this.currencyToPrecision(e,t)},a=await this.privatePostV5SpotCrossMarginTradeLoan(this.extend(s,i)),n=this.safeDict(a,"result",{}),o=this.parseMarginLoan(n,r);return this.extend(o,{symbol:void 0,amount:t})}async repayCrossMargin(e,t,i={}){await this.loadMarkets();let r=this.currency(e),s={coin:r.id,qty:this.numberToString(t)},a=await this.privatePostV5SpotCrossMarginTradeRepay(this.extend(s,i)),n=this.safeDict(a,"result",{}),o=this.parseMarginLoan(n,r);return this.extend(o,{symbol:void 0,amount:t})}parseMarginLoan(e,t){return{id:this.safeString2(e,"transactId","repayId"),currency:this.safeString(t,"code"),amount:void 0,symbol:void 0,timestamp:void 0,datetime:void 0,info:e}}parseTransferStatus(e){return this.safeString({0:"ok",OK:"ok",SUCCESS:"ok"},e,e)}parseTransfer(e,t){let i=this.safeString(e,"coin"),r=this.safeInteger(e,"timestamp"),s=this.safeString(e,"fromAccountType"),a=this.safeString(e,"toAccountType"),n=this.safeDict(this.options,"accountsById",{}),o=this.safeString(n,s,s),d=this.safeString(n,a,a);return{info:e,id:this.safeString(e,"transferId"),timestamp:r,datetime:this.iso8601(r),currency:this.safeCurrencyCode(i,t),amount:this.safeNumber(e,"amount"),fromAccount:o,toAccount:d,status:this.parseTransferStatus(this.safeString(e,"status"))}}async fetchDerivativesMarketLeverageTiers(e,t={}){await this.loadMarkets();let i=this.market(e),r={symbol:i.id};i.linear?r.category="linear":i.inverse&&(r.category="inverse");let s=await this.publicGetV5MarketRiskLimit(this.extend(r,t)),a=this.safeDict(s,"result"),n=this.safeList(a,"list");return this.parseMarketLeverageTiers(n,i)}async fetchMarketLeverageTiers(e,t={}){let i;if(await this.loadMarkets(),(i=this.market(e)).spot||i.option)throw new a.BadRequest(this.id+" fetchMarketLeverageTiers() symbol does not support market "+e);return i.id,await this.fetchDerivativesMarketLeverageTiers(e,t)}parseTradingFee(e,t){let i=this.safeString(e,"symbol"),r=void 0!==t?t.type:"contract";return{info:e,symbol:this.safeSymbol(i,t,void 0,r),maker:this.safeNumber(e,"makerFeeRate"),taker:this.safeNumber(e,"takerFeeRate"),percentage:void 0,tierBased:void 0}}async fetchTradingFee(e,t={}){let i;await this.loadMarkets();let r=this.market(e),s={symbol:r.id};i=r.linear?"linear":r.inverse?"inverse":r.spot?"spot":"option",s.category=i;let a=await this.privateGetV5AccountFeeRate(this.extend(s,t)),n=this.safeDict(a,"result",{}),o=this.safeList(n,"list",[]),d=this.safeDict(o,0,{});return this.parseTradingFee(d,r)}async fetchTradingFees(e={}){let t;if(await this.loadMarkets(),[t,e]=this.handleOptionAndParams(e,"fetchTradingFees","type","future"),"spot"===t)throw new a.NotSupported(this.id+" fetchTradingFees() is not supported for spot market");let i=await this.privateGetV5AccountFeeRate(e),r=this.safeDict(i,"result",{});r=this.safeList(r,"list",[]);let s={};for(let e=0;e<r.length;e++){let t=this.parseTradingFee(r[e]);s[t.symbol]=t}return s}parseDepositWithdrawFee(e,t){let i=this.safeList(e,"chains",[]),r=i.length,s={info:e,withdraw:{fee:void 0,percentage:void 0},deposit:{fee:void 0,percentage:void 0},networks:{}};if(0!==r)for(let e=0;e<r;e++){let a=i[e],n=this.safeString(a,"chain"),o=this.safeString(t,"code"),d=this.networkIdToCode(n,o);s.networks[d]={deposit:{fee:void 0,percentage:void 0},withdraw:{fee:this.safeNumber(a,"withdrawFee"),percentage:!1}},1===r&&(s.withdraw.fee=this.safeNumber(a,"withdrawFee"),s.withdraw.percentage=!1)}return s}async fetchDepositWithdrawFees(e,t={}){this.checkRequiredCredentials(),await this.loadMarkets();let i=await this.privateGetV5AssetCoinQueryInfo(t),r=this.safeDict(i,"result",{}),s=this.safeList(r,"rows",[]);return this.parseDepositWithdrawFees(s,e,"coin")}async fetchSettlementHistory(e,t,i,r={}){let s,n;await this.loadMarkets();let o={};if(void 0!==e&&(s=this.market(e),o.symbol=s.id),[n,r]=this.getBybitType("fetchSettlementHistory",s,r),"spot"===n)throw new a.NotSupported(this.id+" fetchSettlementHistory() is not supported for spot market");o.category=n,void 0!==i&&(o.limit=i);let d=await this.publicGetV5MarketDeliveryPrice(this.extend(o,r)),h=this.safeDict(d,"result",{}),l=this.safeList(h,"list",[]),c=this.parseSettlements(l,s),u=this.sortBy(c,"timestamp");return this.filterBySymbolSinceLimit(u,s.symbol,t,i)}async fetchMySettlementHistory(e,t,i,r={}){let s,n;await this.loadMarkets();let o={};if(void 0!==e&&(s=this.market(e),o.symbol=s.id),[n,r]=this.getBybitType("fetchMySettlementHistory",s,r),"spot"===n||"inverse"===n)throw new a.NotSupported(this.id+" fetchMySettlementHistory() is not supported for spot market");o.category="linear",void 0!==i&&(o.limit=i);let d=await this.privateGetV5AssetDeliveryRecord(this.extend(o,r)),h=this.safeDict(d,"result",{}),l=this.safeList(h,"list",[]),c=this.parseSettlements(l,s),u=this.sortBy(c,"timestamp");return this.filterBySymbolSinceLimit(u,s.symbol,t,i)}parseSettlement(e,t){let i=this.safeInteger(e,"deliveryTime"),r=this.safeString(e,"symbol");return{info:e,symbol:this.safeSymbol(r,t),price:this.safeNumber(e,"deliveryPrice"),timestamp:i,datetime:this.iso8601(i)}}parseSettlements(e,t){let i=[];for(let r=0;r<e.length;r++)i.push(this.parseSettlement(e[r],t));return i}async fetchVolatilityHistory(e,t={}){await this.loadMarkets();let i={category:"option",baseCoin:this.currency(e).id},r=await this.publicGetV5MarketHistoricalVolatility(this.extend(i,t)),s=this.safeList(r,"result",[]);return this.parseVolatilityHistory(s)}parseVolatilityHistory(e){let t=[];for(let i=0;i<e.length;i++){let r=e[i],s=this.safeInteger(r,"time");t.push({info:e,timestamp:s,datetime:this.iso8601(s),volatility:this.safeNumber(r,"value")})}return t}async fetchGreeks(e,t={}){await this.loadMarkets();let i=this.market(e),r={symbol:i.id,category:"option"},s=await this.publicGetV5MarketTickers(this.extend(r,t)),a=this.safeInteger(s,"time"),n=this.safeDict(s,"result",{}),o=this.safeList(n,"list",[]),d=this.parseGreeks(o[0],i);return this.extend(d,{timestamp:a,datetime:this.iso8601(a)})}parseGreeks(e,t){let i=this.safeString(e,"symbol");return{symbol:this.safeSymbol(i,t),timestamp:void 0,datetime:void 0,delta:this.safeNumber(e,"delta"),gamma:this.safeNumber(e,"gamma"),theta:this.safeNumber(e,"theta"),vega:this.safeNumber(e,"vega"),rho:void 0,bidSize:this.safeNumber(e,"bid1Size"),askSize:this.safeNumber(e,"ask1Size"),bidImpliedVolatility:this.safeNumber(e,"bid1Iv"),askImpliedVolatility:this.safeNumber(e,"ask1Iv"),markImpliedVolatility:this.safeNumber(e,"markIv"),bidPrice:this.safeNumber(e,"bid1Price"),askPrice:this.safeNumber(e,"ask1Price"),markPrice:this.safeNumber(e,"markPrice"),lastPrice:this.safeNumber(e,"lastPrice"),underlyingPrice:this.safeNumber(e,"underlyingPrice"),info:e}}async fetchMyLiquidations(e,t,i,r={}){let s,a;await this.loadMarkets();let n=!1;if([n,r]=this.handleOptionAndParams(r,"fetchMyLiquidations","paginate"),n)return await this.fetchPaginatedCallCursor("fetchMyLiquidations",e,t,i,r,"nextPageCursor","cursor",void 0,100);let o={execType:"BustTrade"};void 0!==e&&(s=this.market(e),o.symbol=s.id),[a,r]=this.getBybitType("fetchMyLiquidations",s,r),o.category=a,void 0!==i&&(o.limit=i),void 0!==t&&(o.startTime=t),[o,r]=this.handleUntilOption("endTime",o,r);let d=await this.privateGetV5ExecutionList(this.extend(o,r)),h=this.addPaginationCursorToResult(d);return this.parseLiquidations(h,s,t,i)}parseLiquidation(e,t){let i=this.safeString(e,"symbol"),r=this.safeInteger(e,"execTime"),s=this.safeString(e,"execQty"),a=this.safeString(t,"contractSize"),o=this.safeString(e,"execPrice"),d=n.Y.stringMul(s,a),h=n.Y.stringMul(d,o);return this.safeLiquidation({info:e,symbol:this.safeSymbol(i,t,void 0,"contract"),contracts:this.parseNumber(s),contractSize:this.parseNumber(a),price:this.parseNumber(o),baseValue:this.parseNumber(d),quoteValue:this.parseNumber(h),timestamp:r,datetime:this.iso8601(r)})}async getLeverageTiersPaginated(e,t={}){let i,r;await this.loadMarkets(),void 0!==e&&(i=this.market(e));let s=!1;if([s,t]=this.handleOptionAndParams(t,"getLeverageTiersPaginated","paginate"),s)return await this.fetchPaginatedCallCursor("getLeverageTiersPaginated",e,void 0,void 0,t,"nextPageCursor","cursor",void 0,100);[r,t]=this.handleSubTypeAndParams("getLeverageTiersPaginated",i,t,"linear");let a=await this.publicGetV5MarketRiskLimit(this.extend({category:r},t)),n=this.addPaginationCursorToResult(a),o=this.safeDict(n,0),d=n.length-1,h=this.safeDict(n,d),l=this.safeString(o,"nextPageCursor");return h.info={nextPageCursor:l},n[d]=h,n}async fetchLeverageTiers(e,t={}){let i,r;if(await this.loadMarkets(),void 0!==e){if((i=this.market(e[0])).spot)throw new a.NotSupported(this.id+" fetchLeverageTiers() is not supported for spot market");r=i.symbol}let s=await this.getLeverageTiersPaginated(r,this.extend({paginate:!0,paginationCalls:40},t));return e=this.marketSymbols(e),this.parseLeverageTiers(s,e,"symbol")}parseLeverageTiers(e,t,i){let r={},s=this.marketIds(t),a=this.filterByArray(e,i,s,!1),n=this.groupBy(a,i),o=Object.keys(n);for(let e=0;e<o.length;e++){let t=o[e],i=n[t];for(let e=0;e<i.length;e++){let t=this.safeInteger(i[e],"id");i[e].id=t}let s=this.safeMarket(t,void 0,void 0,"contract");r[s.symbol]=this.parseMarketLeverageTiers(this.sortBy(i,"id"),s)}return r}parseMarketLeverageTiers(e,t){let i=[];for(let r=0;r<e.length;r++){let s=e[r],a=this.safeString(e,"symbol");t=this.safeMarket(a);let n=this.parseNumber("0");0!==r&&(n=this.safeNumber(e[r-1],"riskLimitValue")),i.push({tier:this.safeInteger(s,"id"),symbol:this.safeSymbol(a,t),currency:t.settle,minNotional:n,maxNotional:this.safeNumber(s,"riskLimitValue"),maintenanceMarginRate:this.safeNumber(s,"maintenanceMargin"),maxLeverage:this.safeNumber(s,"maxLeverage"),info:s})}return i}async fetchFundingHistory(e,t,i,r={}){let s,a;await this.loadMarkets();let n=!1;if([n,r]=this.handleOptionAndParams(r,"fetchFundingHistory","paginate"),n)return await this.fetchPaginatedCallCursor("fetchFundingHistory",e,t,i,r,"nextPageCursor","cursor",void 0,100);let o={execType:"Funding"};void 0!==e&&(s=this.market(e),o.symbol=s.id),[a,r]=this.getBybitType("fetchFundingHistory",s,r),o.category=a,void 0!==e&&(o.symbol=s.id),void 0!==t&&(o.startTime=t),void 0!==i?o.size=i:o.size=100,[o,r]=this.handleUntilOption("endTime",o,r);let d=await this.privateGetV5ExecutionList(this.extend(o,r)),h=this.addPaginationCursorToResult(d);return this.parseIncomes(h,s,t,i)}parseIncome(e,t){let i=this.safeString(e,"symbol");t=this.safeMarket(i,t,void 0,"contract");let r="USDT";t.inverse&&(r=t.quote);let s=this.safeInteger(e,"execTime");return{info:e,symbol:this.safeSymbol(i,t,"-","swap"),code:r,timestamp:s,datetime:this.iso8601(s),id:this.safeString(e,"execId"),amount:this.safeNumber(e,"execQty"),rate:this.safeNumber(e,"feeRate")}}async fetchOption(e,t={}){await this.loadMarkets();let i=this.market(e),r={category:"option",symbol:i.id},s=await this.publicGetV5MarketTickers(this.extend(r,t)),a=this.safeDict(s,"result",{}),n=this.safeList(a,"list",[]),o=this.safeDict(n,0,{});return this.parseOption(o,void 0,i)}async fetchOptionChain(e,t={}){await this.loadMarkets();let i={category:"option",baseCoin:this.currency(e).id},r=await this.publicGetV5MarketTickers(this.extend(i,t)),s=this.safeDict(r,"result",{}),a=this.safeList(s,"list",[]);return this.parseOptionChain(a,void 0,"symbol")}parseOption(e,t,i){let r=this.safeString(e,"symbol");return{info:e,currency:void 0,symbol:(i=this.safeMarket(r,i)).symbol,timestamp:void 0,datetime:void 0,impliedVolatility:this.safeNumber(e,"markIv"),openInterest:this.safeNumber(e,"openInterest"),bidPrice:this.safeNumber(e,"bid1Price"),askPrice:this.safeNumber(e,"ask1Price"),midPrice:void 0,markPrice:this.safeNumber(e,"markPrice"),lastPrice:this.safeNumber(e,"lastPrice"),underlyingPrice:this.safeNumber(e,"underlyingPrice"),change:this.safeNumber(e,"change24h"),percentage:void 0,baseVolume:this.safeNumber(e,"totalVolume"),quoteVolume:void 0}}async fetchPositionsHistory(e,t,i,r={}){let s,a;await this.loadMarkets();let n=0;void 0!==e&&(n=e.length)>0&&(s=this.market(e[0]));let o=this.safeInteger(r,"until");[a,r]=this.handleSubTypeAndParams("fetchPositionsHistory",s,r,"linear"),r=this.omit(r,"until");let d={category:a};void 0!==e&&1===n&&(d.symbol=s.id),void 0!==t&&(d.startTime=t),void 0!==i&&(d.limit=i),void 0!==o&&(d.endTime=o);let h=await this.privateGetV5PositionClosedPnl(this.extend(d,r)),l=this.safeDict(h,"result"),c=this.safeList(l,"list"),u=this.parsePositions(c,e,r);return this.filterBySinceLimit(u,t,i)}async fetchConvertCurrencies(e={}){let t;await this.loadMarkets();let[i,r]=await this.isUnifiedEnabled();[t,e]=this.handleOptionAndParams(e,"fetchConvertCurrencies","accountType",i||r?"eb_convert_uta":"eb_convert_spot");let s=await this.privateGetV5AssetExchangeQueryCoinList(this.extend({accountType:t},e)),a={},n=this.safeDict(s,"result",{}),o=this.safeList(n,"coins",[]);for(let e=0;e<o.length;e++){let t=o[e],i=this.safeString(t,"coin"),r=this.safeBool(t,"disableFrom"),s=this.safeBool(t,"disableTo"),n=r||s,d=this.safeCurrencyCode(i);a[d]={info:t,id:i,code:d,networks:void 0,type:this.safeString(t,"coinType"),name:this.safeString(t,"fullName"),active:!n,deposit:void 0,withdraw:this.safeNumber(t,"balance"),fee:void 0,precision:void 0,limits:{amount:{min:this.safeNumber(t,"singleFromMinLimit"),max:this.safeNumber(t,"singleFromMaxLimit")},withdraw:{min:void 0,max:void 0},deposit:{min:void 0,max:void 0}},created:void 0}}return a}async fetchConvertQuote(e,t,i,r={}){let s;await this.loadMarkets();let[a,n]=await this.isUnifiedEnabled();[s,r]=this.handleOptionAndParams(r,"fetchConvertQuote","accountType",a||n?"eb_convert_uta":"eb_convert_spot");let o={fromCoin:e,toCoin:t,requestAmount:this.numberToString(i),requestCoin:e,accountType:s},d=await this.privatePostV5AssetExchangeQuoteApply(this.extend(o,r)),h=this.safeDict(d,"result",{}),l=this.safeString(h,"fromCoin",e),c=this.currency(l),u=this.safeString(h,"toCoin",t),f=this.currency(u);return this.parseConversion(h,c,f)}async createConvertTrade(e,t,i,r,s={}){await this.loadMarkets();let a=await this.privatePostV5AssetExchangeConvertExecute(this.extend({quoteTxId:e},s)),n=this.safeDict(a,"result",{});return this.parseConversion(n)}async fetchConvertTrade(e,t,i={}){let r,s,a;await this.loadMarkets();let[n,o]=await this.isUnifiedEnabled();[r,i]=this.handleOptionAndParams(i,"fetchConvertQuote","accountType",n||o?"eb_convert_uta":"eb_convert_spot");let d=await this.privateGetV5AssetExchangeConvertResultQuery(this.extend({quoteTxId:e,accountType:r},i)),h=this.safeDict(d,"result",{}),l=this.safeDict(h,"result",{}),c=this.safeString(l,"fromCoin"),u=this.safeString(l,"toCoin");return void 0!==c&&(s=this.currency(c)),void 0!==u&&(a=this.currency(u)),this.parseConversion(l,s,a)}async fetchConvertTradeHistory(e,t,i,r={}){await this.loadMarkets();let s={};void 0!==i&&(s.limit=i);let a=await this.privateGetV5AssetExchangeQueryConvertHistory(this.extend(s,r)),n=this.safeDict(a,"result",{}),o=this.safeList(n,"list",[]);return this.parseConversions(o,e,"fromCoin","toCoin",t,i)}parseConversion(e,t,i){let r=this.safeInteger2(e,"expiredTime","createdAt"),s=this.safeString(e,"fromCoin"),a=this.safeCurrencyCode(s,t),n=this.safeString(e,"toCoin"),o=this.safeCurrencyCode(n,i);return{info:e,timestamp:r,datetime:this.iso8601(r),id:this.safeString2(e,"quoteTxId","exchangeTxId"),fromCurrency:a,fromAmount:this.safeNumber(e,"fromAmount"),toCurrency:o,toAmount:this.safeNumber(e,"toAmount"),price:void 0,fee:void 0}}async fetchLongShortRatioHistory(e,t,i,r,s={}){let n;await this.loadMarkets();let o=this.market(e);if([n,s]=this.getBybitType("fetchLongShortRatioHistory",o,s),"spot"===n||"option"===n)throw new a.NotSupported(this.id+" fetchLongShortRatioHistory() only support linear and inverse markets");void 0===t&&(t="1d");let d={symbol:o.id,period:t,category:n};void 0!==r&&(d.limit=r);let h=await this.publicGetV5MarketAccountRatio(this.extend(d,s)),l=this.safeDict(h,"result",{}),c=this.safeList(l,"list",[]);return this.parseLongShortRatioHistory(c,o)}parseLongShortRatio(e,t){let i=this.safeString(e,"symbol"),r=this.safeIntegerOmitZero(e,"timestamp"),s=this.safeString(e,"buyRatio"),a=this.safeString(e,"sellRatio");return{info:e,symbol:this.safeSymbol(i,t,void 0,"contract"),timestamp:r,datetime:this.iso8601(r),timeframe:void 0,longShortRatio:this.parseToNumeric(n.Y.stringDiv(s,a))}}sign(e,t="public",i="GET",r={},s,a){let n=this.implodeHostname(this.urls.api[t])+"/"+e;if("public"===t)Object.keys(r).length&&(n+="?"+this.rawencode(r));else if("private"===t){this.checkRequiredCredentials();let e=n.indexOf("openapi")>=0,t=n.indexOf("unified/v3")>=0,h=n.indexOf("contract/v3")>=0,l=n.indexOf("v5")>=0,c=this.nonce().toString();if(e){a=Object.keys(r).length?this.json(r):"{}";let e=c+this.apiKey+a,t=this.hmac(this.encode(e),this.encode(this.secret),o.s,"hex");s={"Content-Type":"application/json","X-BAPI-API-KEY":this.apiKey,"X-BAPI-TIMESTAMP":c,"X-BAPI-SIGN":t}}else if(t||h||l){let e,l;s={"Content-Type":"application/json","X-BAPI-API-KEY":this.apiKey,"X-BAPI-TIMESTAMP":c,"X-BAPI-RECV-WINDOW":this.options.recvWindow.toString()},(t||h)&&(s["X-BAPI-SIGN-TYPE"]="2");let u=this.extend({},r),f=this.rawencode(u),p=c.toString()+this.apiKey+this.options.recvWindow.toString();"POST"===i?e=p+(a=this.json(u)):(e=p+f,n+="?"+this.rawencode(u)),l=this.secret.indexOf("PRIVATE KEY")>-1?(0,d.n)(e,this.secret,o.s):this.hmac(this.encode(e),this.encode(this.secret),o.s),s["X-BAPI-SIGN"]=l}else{let e;let t=this.extend(r,{api_key:this.apiKey,recv_window:this.options.recvWindow,timestamp:c}),h=this.keysort(t),l=this.rawencode(h);if(e=this.secret.indexOf("PRIVATE KEY")>-1?(0,d.n)(l,this.secret,o.s):this.hmac(this.encode(l),this.encode(this.secret),o.s),"POST"===i){let i=n.indexOf("spot")>=0,r=this.extend(t,{sign:e});i?(a=this.urlencode(r),s={"Content-Type":"application/x-www-form-urlencoded"}):(a=this.json(r),s={"Content-Type":"application/json"})}else n+="?"+this.rawencode(h)+"&sign="+e}}if("POST"===i){let e=this.safeString(this.options,"brokerId");void 0!==e&&(s.Referer=e)}return{url:n,method:i,body:a,headers:s}}handleErrors(e,t,i,r,s,n,o,d,h){if(!o)return;let l=this.safeString2(o,"ret_code","retCode");if("0"!==l){let e;if("30084"===l)return;throw e="10005"===l&&0>i.indexOf("order")?this.id+' private api uses /user/v3/private/query-api to check if you have a unified account. The API key of user id must own one of permissions: "Account Transfer", "Subaccount Transfer", "Withdrawal" '+n:this.id+" "+n,this.throwBroadlyMatchedException(this.exceptions.broad,n,e),this.throwExactlyMatchedException(this.exceptions.exact,l,e),new a.ExchangeError(e)}}}}}]);