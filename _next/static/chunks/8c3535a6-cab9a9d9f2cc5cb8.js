"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[137],{3749:(e,t,s)=>{s.d(t,{A:()=>d});var i=s(7430),a=s(8119),r=s(6077),o=s(3675),n=s(5432);class d extends i.A{describe(){return this.deepExtend(super.describe(),{id:"ascendex",name:"AscendEX",countries:["SG"],rateLimit:400,certified:!1,pro:!0,has:{CORS:void 0,spot:!0,margin:!0,swap:!0,future:!1,option:!1,addMargin:!0,cancelAllOrders:!0,cancelOrder:!0,createOrder:!0,createOrders:!0,createPostOnlyOrder:!0,createReduceOnlyOrder:!0,createStopLimitOrder:!0,createStopMarketOrder:!0,createStopOrder:!0,fetchAccounts:!0,fetchBalance:!0,fetchClosedOrders:!0,fetchCurrencies:!0,fetchDepositAddress:!0,fetchDepositAddresses:!1,fetchDepositAddressesByNetwork:!1,fetchDeposits:!0,fetchDepositsWithdrawals:!0,fetchDepositWithdrawFee:"emulated",fetchDepositWithdrawFees:!0,fetchFundingHistory:!0,fetchFundingRate:"emulated",fetchFundingRateHistory:!1,fetchFundingRates:!0,fetchIndexOHLCV:!1,fetchLeverage:"emulated",fetchLeverages:!0,fetchLeverageTiers:!0,fetchMarginMode:"emulated",fetchMarginModes:!0,fetchMarketLeverageTiers:"emulated",fetchMarkets:!0,fetchMarkOHLCV:!1,fetchOHLCV:!0,fetchOpenInterest:!1,fetchOpenInterestHistory:!1,fetchOpenOrders:!0,fetchOrder:!0,fetchOrderBook:!0,fetchOrders:!1,fetchPosition:!1,fetchPositionMode:!1,fetchPositions:!0,fetchPositionsRisk:!1,fetchPremiumIndexOHLCV:!1,fetchTicker:!0,fetchTickers:!0,fetchTime:!0,fetchTrades:!0,fetchTradingFee:!1,fetchTradingFees:!0,fetchTransactionFee:!1,fetchTransactionFees:!1,fetchTransactions:"emulated",fetchTransfer:!1,fetchTransfers:!1,fetchWithdrawal:!1,fetchWithdrawals:!0,reduceMargin:!0,sandbox:!0,setLeverage:!0,setMarginMode:!0,setPositionMode:!1,transfer:!0},timeframes:{"1m":"1","5m":"5","15m":"15","30m":"30","1h":"60","2h":"120","4h":"240","6h":"360","12h":"720","1d":"1d","1w":"1w","1M":"1m"},version:"v2",urls:{logo:"https://github.com/user-attachments/assets/55bab6b9-d4ca-42a8-a0e6-fac81ae557f1",api:{rest:"https://ascendex.com"},test:{rest:"https://api-test.ascendex-sandbox.com"},www:"https://ascendex.com",doc:["https://ascendex.github.io/ascendex-pro-api/#ascendex-pro-api-documentation"],fees:"https://ascendex.com/en/feerate/transactionfee-traderate",referral:{url:"https://ascendex.com/en-us/register?inviteCode=EL6BXBQM",discount:.25}},api:{v1:{public:{get:{assets:1,products:1,ticker:1,"barhist/info":1,barhist:1,depth:1,trades:1,"cash/assets":1,"cash/products":1,"margin/assets":1,"margin/products":1,"futures/collateral":1,"futures/contracts":1,"futures/ref-px":1,"futures/market-data":1,"futures/funding-rates":1,"risk-limit-info":1,"exchange-info":1}},private:{get:{info:1,"wallet/transactions":1,"wallet/deposit/address":1,"data/balance/snapshot":1,"data/balance/history":1},accountCategory:{get:{balance:1,"order/open":1,"order/status":1,"order/hist/current":1,risk:1},post:{order:1,"order/batch":1},delete:{order:1,"order/all":1,"order/batch":1}},accountGroup:{get:{"cash/balance":1,"margin/balance":1,"margin/risk":1,"futures/collateral-balance":1,"futures/position":1,"futures/risk":1,"futures/funding-payments":1,"order/hist":1,"spot/fee":1},post:{transfer:1,"futures/transfer/deposit":1,"futures/transfer/withdraw":1}}}},v2:{public:{get:{assets:1,"futures/contract":1,"futures/collateral":1,"futures/pricing-data":1,"futures/ticker":1,"risk-limit-info":1}},private:{data:{get:{"order/hist":1}},get:{"account/info":1},accountGroup:{get:{"order/hist":1,"futures/position":1,"futures/free-margin":1,"futures/order/hist/current":1,"futures/funding-payments":1,"futures/order/open":1,"futures/order/status":1},post:{"futures/isolated-position-margin":1,"futures/margin-type":1,"futures/leverage":1,"futures/transfer/deposit":1,"futures/transfer/withdraw":1,"futures/order":1,"futures/order/batch":1,"futures/order/open":1,"subuser/subuser-transfer":1,"subuser/subuser-transfer-hist":1},delete:{"futures/order":1,"futures/order/batch":1,"futures/order/all":1}}}}},fees:{trading:{feeSide:"get",tierBased:!0,percentage:!0,taker:this.parseNumber("0.002"),maker:this.parseNumber("0.002")}},precisionMode:o.kb,options:{"account-category":"cash","account-group":void 0,fetchClosedOrders:{method:"v2PrivateDataGetOrderHist"},defaultType:"spot",accountsByType:{spot:"cash",swap:"futures",margin:"margin"},transfer:{fillResponseFromRequest:!0},networks:{BSC:"BEP20 (BSC)",ARB:"arbitrum",SOL:"Solana",AVAX:"avalanche C chain",OMNI:"Omni",TRX:"TRC20",TRC20:"TRC20",ERC20:"ERC20",GO20:"GO20",BEP2:"BEP2",BTC:"Bitcoin",BCH:"Bitcoin ABC",LTC:"Litecoin",MATIC:"Matic Network",AKT:"Akash"}},features:{default:{sandbox:!0,createOrder:{marginMode:!0,triggerPrice:!0,triggerPriceType:void 0,triggerDirection:!1,stopLossPrice:!1,takeProfitPrice:!1,attachedStopLossTakeProfit:void 0,timeInForce:{IOC:!0,FOK:!0,PO:!0,GTD:!1},hedged:!1,trailing:!1,leverage:!1,marketBuyRequiresPrice:!1,marketBuyByCost:!1,selfTradePrevention:!1,iceberg:!1},createOrders:{max:10},fetchMyTrades:void 0,fetchOrder:{marginMode:!1,trigger:!1,trailing:!1,marketType:!0},fetchOpenOrders:{marginMode:!1,limit:void 0,trigger:!1,trailing:!1,marketType:!0},fetchOrders:void 0,fetchClosedOrders:void 0,fetchOHLCV:{limit:500}},spot:{extends:"default",fetchClosedOrders:{marginMode:!1,limit:1e3,daysBack:1e5,daysBackCanceled:1,untilDays:1e5,trigger:!1,trailing:!1}},forDerivatives:{extends:"default",createOrder:{attachedStopLossTakeProfit:{triggerPriceType:{last:!0,mark:!1,index:!1},price:!1}},fetchClosedOrders:{marginMode:!1,limit:1e3,daysBack:void 0,daysBackCanceled:void 0,untilDays:void 0,trigger:!1,trailing:!1}},swap:{linear:{extends:"forDerivatives"},inverse:void 0},future:{linear:void 0,inverse:void 0}},exceptions:{exact:{1900:a.BadRequest,2100:a.AuthenticationError,5002:a.BadSymbol,6001:a.BadSymbol,6010:a.InsufficientFunds,60060:a.InvalidOrder,600503:a.InvalidOrder,100001:a.BadRequest,100002:a.BadRequest,100003:a.BadRequest,100004:a.BadRequest,100005:a.BadRequest,100006:a.BadRequest,100007:a.BadRequest,100008:a.BadSymbol,100009:a.AuthenticationError,100010:a.BadRequest,100011:a.BadRequest,100012:a.BadRequest,100013:a.BadRequest,100101:a.ExchangeError,150001:a.BadRequest,200001:a.AuthenticationError,200002:a.ExchangeError,200003:a.ExchangeError,200004:a.ExchangeError,200005:a.ExchangeError,200006:a.ExchangeError,200007:a.ExchangeError,200008:a.ExchangeError,200009:a.ExchangeError,200010:a.AuthenticationError,200011:a.ExchangeError,200012:a.ExchangeError,200013:a.ExchangeError,200014:a.PermissionDenied,200015:a.PermissionDenied,300001:a.InvalidOrder,300002:a.InvalidOrder,300003:a.InvalidOrder,300004:a.InvalidOrder,300005:a.InvalidOrder,300006:a.InvalidOrder,300007:a.InvalidOrder,300008:a.InvalidOrder,300009:a.InvalidOrder,300011:a.InsufficientFunds,300012:a.BadSymbol,300013:a.InvalidOrder,300014:a.InvalidOrder,300020:a.InvalidOrder,300021:a.AccountSuspended,300031:a.InvalidOrder,310001:a.InsufficientFunds,310002:a.InvalidOrder,310003:a.InvalidOrder,310004:a.BadSymbol,310005:a.InvalidOrder,510001:a.ExchangeError,900001:a.ExchangeError},broad:{}},commonCurrencies:{BOND:"BONDED",BTCBEAR:"BEAR",BTCBULL:"BULL",BYN:"BeyondFi",PLN:"Pollen"}})}getAccount(e={}){let t=this.safeValue(e,"account",this.options.account).toLowerCase();return this.capitalize(t)}async fetchCurrencies(e={}){let t=this.v1PublicGetAssets(e),s=this.v1PublicGetMarginAssets(e),i=this.v1PublicGetCashAssets(e),[a,r,o]=await Promise.all([t,s,i]),n=this.safeList(a,"data",[]),d=this.safeList(r,"data",[]),c=this.safeList(o,"data",[]),h=this.indexBy(n,"assetCode"),u=this.indexBy(d,"assetCode"),l=this.indexBy(c,"assetCode"),f=this.deepExtend(h,u,l),m=Object.keys(f),g={};for(let e=0;e<m.length;e++){let t=m[e],s=f[t],i=this.safeCurrencyCode(t),a=this.safeString2(s,"precisionScale","nativeScale"),r=this.parseNumber(this.parsePrecision(a)),o=this.safeNumber2(s,"withdrawFee","withdrawalFee"),n="Normal"===this.safeString2(s,"status","statusCode"),d="borrowAssetCode"in s;g[i]={id:t,code:i,info:s,type:void 0,margin:d,name:this.safeString(s,"assetName"),active:n,deposit:void 0,withdraw:void 0,fee:o,precision:r,limits:{amount:{min:r,max:void 0},withdraw:{min:this.safeNumber(s,"minWithdrawalAmt"),max:void 0}},networks:{}}}return g}async fetchMarkets(e={}){let t=this.v1PublicGetProducts(e),s=this.v1PublicGetCashProducts(e),i=this.v2PublicGetFuturesContract(e),[a,r,o]=await Promise.all([t,s,i]),n=this.safeList(a,"data",[]),d=this.indexBy(n,"symbol"),c=this.safeList(r,"data",[]),h=this.safeList(o,"data",[]),u=this.arrayConcat(c,h),l=this.indexBy(u,"symbol"),f=this.deepExtend(d,l),m=Object.keys(f),g=[];for(let e=0;e<m.length;e++){let t;let s=m[e],i=f[s],a=this.safeString(i,"settlementAsset"),r=this.safeCurrencyCode(a),o=this.safeString(i,"status"),n=this.safeString(i,"domain"),d=!1;("Normal"===o||"InternalTrading"===o)&&"LeveragedETF"!==n&&(d=!0);let c=void 0===r,h=!c,u=!!h||void 0,l=this.safeNumber(i,"minQty"),p=this.safeNumber(i,"maxQty"),v=this.safeNumber(i,"tickSize"),y=this.safeString2(i,"underlying","symbol").split("/"),w=this.safeString(y,0),b=this.safeString(y,1),S=this.safeCurrencyCode(w),k=this.safeCurrencyCode(b),O=S+"/"+k;if(h){let e=this.safeDict(i,"lotSizeFilter");l=this.safeNumber(e,"minQty"),p=this.safeNumber(e,"maxQty");let s=this.safeDict(i,"priceFilter");v=this.safeNumber(s,"minPrice"),t=this.safeNumber(s,"maxPrice"),O=S+"/"+k+":"+r}let P=this.safeNumber(i,"commissionReserveRate"),T=this.safeBool(i,"marginTradable",!1);g.push({id:s,symbol:O,base:S,quote:k,settle:r,baseId:w,quoteId:b,settleId:a,type:h?"swap":"spot",spot:c,margin:c?T:void 0,swap:h,future:!1,option:!1,active:d,contract:h,linear:u,inverse:h?!u:void 0,taker:P,maker:P,contractSize:h?this.parseNumber("1"):void 0,expiry:void 0,expiryDatetime:void 0,strike:void 0,optionType:void 0,precision:{amount:this.safeNumber(i,"lotSize"),price:this.safeNumber(i,"tickSize")},limits:{leverage:{min:void 0,max:void 0},amount:{min:l,max:p},price:{min:v,max:t},cost:{min:this.safeNumber(i,"minNotional"),max:this.safeNumber(i,"maxNotional")}},created:this.safeInteger(i,"tradingStartTime"),info:i})}return g}async fetchTime(e={}){let t={requestTime:this.milliseconds()},s=await this.v1PublicGetExchangeInfo(this.extend(t,e)),i=this.safeDict(s,"data",{});return this.safeInteger(i,"requestReceiveAt")}async fetchAccounts(e={}){let t,s=this.safeString(this.options,"account-group");if(void 0===s){t=await this.v1PrivateGetInfo(e);let i=this.safeDict(t,"data",{});s=this.safeString(i,"accountGroup"),this.options["account-group"]=s}return[{id:s,type:void 0,code:void 0,info:t}]}parseBalance(e){let t={info:e,timestamp:void 0,datetime:void 0},s=this.safeList(e,"data",[]);for(let e=0;e<s.length;e++){let i=s[e],a=this.safeCurrencyCode(this.safeString(i,"asset")),r=this.account();r.free=this.safeString(i,"availableBalance"),r.total=this.safeString(i,"totalBalance"),t[a]=r}return this.safeBalance(t)}parseMarginBalance(e){let t={info:e,timestamp:void 0,datetime:void 0},s=this.safeList(e,"data",[]);for(let e=0;e<s.length;e++){let i=s[e],a=this.safeCurrencyCode(this.safeString(i,"asset")),o=this.account();o.free=this.safeString(i,"availableBalance"),o.total=this.safeString(i,"totalBalance");let n=this.safeString(i,"borrowed"),d=this.safeString(i,"interest");o.debt=r.Y.stringAdd(n,d),t[a]=o}return this.safeBalance(t)}parseSwapBalance(e){let t={info:e,timestamp:void 0,datetime:void 0},s=this.safeDict(e,"data",{}),i=this.safeList(s,"collaterals",[]);for(let e=0;e<i.length;e++){let s=i[e],a=this.safeCurrencyCode(this.safeString(s,"asset")),r=this.account();r.total=this.safeString(s,"balance"),t[a]=r}return this.safeBalance(t)}async fetchBalance(e={}){let t,s,i;await this.loadMarkets(),await this.loadAccounts(),[t,e]=this.handleMarketTypeAndParams("fetchBalance",void 0,e),[s,e]=this.handleMarginModeAndParams("fetchBalance",e),t=this.safeBool(e,"margin",!1)||"cross"===s?"margin":t,e=this.omit(e,"margin");let r=this.safeDict(this.options,"accountsByType",{}),o=this.safeString(r,t,"cash"),n=this.safeDict(this.accounts,0,{}),d={"account-group":this.safeString(n,"id")};if("isolated"===s&&"swap"!==t)throw new a.BadRequest(this.id+" does not supported isolated margin trading");if(("cash"===o||"margin"===o)&&(d["account-category"]=o),"spot"===t||"margin"===t)i=await this.v1PrivateAccountCategoryGetBalance(this.extend(d,e));else if("swap"===t)i=await this.v2PrivateAccountGroupGetFuturesPosition(this.extend(d,e));else throw new a.NotSupported(this.id+" fetchBalance() is not currently supported for "+t+" markets");return"swap"===t?this.parseSwapBalance(i):"margin"===t?this.parseMarginBalance(i):this.parseBalance(i)}async fetchOrderBook(e,t,s={}){await this.loadMarkets();let i={symbol:this.market(e).id},a=await this.v1PublicGetDepth(this.extend(i,s)),r=this.safeDict(a,"data",{}),o=this.safeDict(r,"data",{}),n=this.safeInteger(o,"ts"),d=this.parseOrderBook(o,e,n);return d.nonce=this.safeInteger(o,"seqnum"),d}parseTicker(e,t){let s=this.safeString(e,"symbol"),i=this.safeString(e,"type"),a=this.safeSymbol(s,t,"spot"===i?"/":void 0),r=this.safeString(e,"close"),o=this.safeList(e,"bid",[]),n=this.safeList(e,"ask",[]),d=this.safeString(e,"open");return this.safeTicker({symbol:a,timestamp:void 0,datetime:void 0,high:this.safeString(e,"high"),low:this.safeString(e,"low"),bid:this.safeString(o,0),bidVolume:this.safeString(o,1),ask:this.safeString(n,0),askVolume:this.safeString(n,1),vwap:void 0,open:d,close:r,last:r,previousClose:void 0,change:void 0,percentage:void 0,average:void 0,baseVolume:this.safeString(e,"volume"),quoteVolume:void 0,info:e},t)}async fetchTicker(e,t={}){await this.loadMarkets();let s=this.market(e),i={symbol:s.id},a=await this.v1PublicGetTicker(this.extend(i,t)),r=this.safeDict(a,"data",{});return this.parseTicker(r,s)}async fetchTickers(e,t={}){let s,i,a;await this.loadMarkets();let r={};if(void 0!==e){let t=this.safeString(e,0);s=this.market(t);let i=this.marketIds(e);r.symbol=i.join(",")}[i,t]=this.handleMarketTypeAndParams("fetchTickers",s,t),a="spot"===i?await this.v1PublicGetTicker(this.extend(r,t)):await this.v2PublicGetFuturesTicker(this.extend(r,t));let o=this.safeList(a,"data",[]);return Array.isArray(o)?this.parseTickers(o,e):this.parseTickers([o],e)}parseOHLCV(e,t){let s=this.safeDict(e,"data",{});return[this.safeInteger(s,"ts"),this.safeNumber(s,"o"),this.safeNumber(s,"h"),this.safeNumber(s,"l"),this.safeNumber(s,"c"),this.safeNumber(s,"v")]}async fetchOHLCV(e,t="1m",s,i,a={}){await this.loadMarkets();let r=this.market(e),o={symbol:r.id,interval:this.safeString(this.timeframes,t,t)},n=this.parseTimeframe(t),d=this.safeDict(this.options,"fetchOHLCV",{}),c=this.safeInteger(d,"limit",500),h=this.safeInteger(a,"until");if(void 0!==s){o.from=s,i=void 0===i?c:Math.min(i,c);let e=this.sum(s,i*n*1e3,1);void 0!==h?o.to=Math.min(e,h+1):o.to=e}else void 0!==h?(o.to=h+1,i=void 0===i?c:Math.min(i,c),o.from=h-i*n*1e3):void 0!==i&&(o.n=i);a=this.omit(a,"until");let u=await this.v1PublicGetBarhist(this.extend(o,a)),l=this.safeList(u,"data",[]);return this.parseOHLCVs(l,r,t,s,i)}parseTrade(e,t){let s=this.safeInteger(e,"ts"),i=this.safeString2(e,"price","p"),a=this.safeString(e,"q"),r=this.safeBool(e,"bm",!1);return t=this.safeMarket(void 0,t),this.safeTrade({info:e,timestamp:s,datetime:this.iso8601(s),symbol:t.symbol,id:void 0,order:void 0,type:void 0,takerOrMaker:void 0,side:r?"sell":"buy",price:i,amount:a,cost:void 0,fee:void 0},t)}async fetchTrades(e,t,s,i={}){await this.loadMarkets();let a=this.market(e),r={symbol:a.id};void 0!==s&&(r.n=s);let o=await this.v1PublicGetTrades(this.extend(r,i)),n=this.safeDict(o,"data",{}),d=this.safeList(n,"data",[]);return this.parseTrades(d,a,t,s)}parseOrderStatus(e){return this.safeString({PendingNew:"open",New:"open",PartiallyFilled:"open",Filled:"closed",Canceled:"canceled",Rejected:"rejected"},e,e)}parseOrder(e,t){let s,i,a;let r=this.parseOrderStatus(this.safeString(e,"status")),o=this.safeString(e,"symbol"),n=this.safeSymbol(o,t,"/"),d=this.safeInteger2(e,"timestamp","sendingTime"),c=this.safeInteger(e,"lastExecTime");void 0===d&&(d=c);let h=this.safeString(e,"price"),u=this.safeString(e,"orderQty"),l=this.safeString(e,"avgPx"),f=this.safeStringN(e,["cumFilledQty","cumQty","fillQty"]),m=this.safeString(e,"orderId"),g=this.safeString(e,"id");void 0!==g&&g.length<1&&(g=void 0);let p=this.safeStringLower(e,"orderType"),v=p;void 0!==p&&("stoplimit"===p&&(v="limit"),"stopmarket"===p&&(v="market"));let y=this.safeStringLower(e,"side"),w=this.safeNumber2(e,"cumFee","fee");if(void 0!==w){let t=this.safeString(e,"feeAsset");s={cost:w,currency:this.safeCurrencyCode(t)}}let b=this.omitZero(this.safeString(e,"stopPrice")),S=this.safeString(e,"execInst");return"reduceOnly"===S&&(i=!0),"Post"===S&&(a=!0),this.safeOrder({info:e,id:m,clientOrderId:g,timestamp:d,datetime:this.iso8601(d),lastTradeTimestamp:c,symbol:n,type:v,timeInForce:void 0,postOnly:a,reduceOnly:i,side:y,price:h,triggerPrice:b,amount:u,cost:void 0,average:l,filled:f,remaining:void 0,status:r,fee:s,trades:void 0},t)}async fetchTradingFees(e={}){await this.loadMarkets(),await this.loadAccounts();let t=this.safeDict(this.accounts,0,{}),s=this.safeString(t,"id"),i=await this.v1PrivateAccountGroupGetSpotFee(this.extend({"account-group":s},e)),a=this.safeDict(i,"data",{}),r=this.safeList(a,"fees",[]),o={};for(let e=0;e<r.length;e++){let t=r[e],s=this.safeString(t,"symbol"),i=this.safeSymbol(s,void 0,"/"),a=this.safeDict(t,"fee",{});o[i]={info:t,symbol:i,maker:this.safeNumber(a,"maker"),taker:this.safeNumber(a,"taker"),percentage:void 0,tierBased:void 0}}return o}createOrderRequest(e,t,s,i,a,r={}){let o,n;let d=this.market(e);[o,r]=this.handleMarginModeAndParams("createOrderRequest",r),[n,r]=this.handleMarketTypeAndParams("createOrderRequest",d,r);let c=this.safeDict(this.options,"accountsByType",{}),h=this.safeString(c,n,"cash");void 0!==o&&(h="margin");let u=this.safeDict(this.accounts,0,{}),l=this.safeString(u,"id"),f=this.safeString2(r,"clientOrderId","id"),m={"account-group":l,"account-category":h,symbol:d.id,time:this.milliseconds(),orderQty:this.amountToPrecision(e,i),orderType:t,side:s},g="market"===t||"stop_market"===t,p="limit"===t||"stop_limit"===t,v=this.safeString(r,"timeInForce"),y=this.isPostOnly(g,!1,r),w=this.safeBool(r,"reduceOnly",!1),b=this.safeString2(r,"triggerPrice","stopPrice");return p&&(m.orderPrice=this.priceToPrecision(e,a)),"IOC"===v&&(m.timeInForce="IOC"),"FOK"===v&&(m.timeInForce="FOK"),y&&(m.postOnly=!0),void 0!==b&&(m.stopPrice=this.priceToPrecision(e,b),p?m.orderType="stop_limit":g&&(m.orderType="stop_market")),void 0!==f&&(m.id=f),d.spot?void 0!==h&&(m.category=h):(m["account-category"]=h,w&&(m.execInst="ReduceOnly"),y&&(m.execInst="Post")),r=this.omit(r,["reduceOnly","triggerPrice"]),this.extend(m,r)}async createOrder(e,t,s,i,a,r={}){let o;await this.loadMarkets(),await this.loadAccounts();let n=this.market(e),d=this.createOrderRequest(e,t,s,i,a,r);o=n.swap?await this.v2PrivateAccountGroupPostFuturesOrder(d):await this.v1PrivateAccountCategoryPostOrder(d);let c=this.safeDict(o,"data",{}),h=this.safeDict2(c,"order","info",{});return this.parseOrder(h,n)}async createOrders(e,t={}){let s,i,r;await this.loadMarkets(),await this.loadAccounts();let o=[];for(let t=0;t<e.length;t++){let r=e[t],n=this.safeString(r,"symbol");if(void 0===s)s=n;else if(s!==n)throw new a.BadRequest(this.id+" createOrders() requires all orders to have the same symbol");let d=this.safeString(r,"type"),c=this.safeString(r,"side"),h=this.safeNumber(r,"amount"),u=this.safeNumber(r,"price"),l=this.safeDict(r,"params",{}),f=this.handleMarginModeAndParams("createOrders",l)[0];if(void 0!==f){if(void 0===i)i=f;else if(i!==f)throw new a.BadRequest(this.id+" createOrders() requires all orders to have the same margin mode (isolated or cross)")}let m=this.createOrderRequest(n,d,c,h,u,l);o.push(m)}let n=this.market(s),d=this.safeDict(this.options,"accountsByType",{}),c=this.safeString(d,n.type,"cash");void 0!==i&&(c="margin");let h=this.safeDict(this.accounts,0,{}),u=this.safeString(h,"id"),l={};if(n.swap)throw new a.NotSupported(this.id+" createOrders() is not currently supported for swap markets on ascendex");l["account-group"]=u,l["account-category"]=c,l.orders=o,r=await this.v1PrivateAccountCategoryPostOrderBatch(l);let f=this.safeDict(r,"data",{}),m=this.safeList(f,"info",[]);return this.parseOrders(m,n)}async fetchOrder(e,t,s={}){let i,r;await this.loadMarkets(),await this.loadAccounts(),void 0!==t&&(i=this.market(t));let[o,n]=this.handleMarketTypeAndParams("fetchOrder",i,s),d=this.safeDict(this.options,"accountsByType",{}),c=this.safeString(d,o,"cash"),h=this.safeDict(this.accounts,0,{}),u={"account-group":this.safeString(h,"id"),"account-category":c,orderId:e};if("spot"===o||"margin"===o)r=await this.v1PrivateAccountCategoryGetOrderStatus(this.extend(u,n));else if("swap"===o)u["account-category"]=c,r=await this.v2PrivateAccountGroupGetFuturesOrderStatus(this.extend(u,n));else throw new a.NotSupported(this.id+" fetchOrder() is not currently supported for "+o+" markets");let l=this.safeDict(r,"data",{});return this.parseOrder(l,i)}async fetchOpenOrders(e,t,s,i={}){let r,o;await this.loadMarkets(),await this.loadAccounts(),void 0!==e&&(e=(r=this.market(e)).symbol);let n=this.safeDict(this.accounts,0,{}),d=this.safeString(n,"id"),[c,h]=this.handleMarketTypeAndParams("fetchOpenOrders",r,i),u=this.safeDict(this.options,"accountsByType",{}),l=this.safeString(u,c,"cash"),f={"account-group":d,"account-category":l};if("spot"===c||"margin"===c)o=await this.v1PrivateAccountCategoryGetOrderOpen(this.extend(f,h));else if("swap"===c)f["account-category"]=l,o=await this.v2PrivateAccountGroupGetFuturesOrderOpen(this.extend(f,h));else throw new a.NotSupported(this.id+" fetchOpenOrders() is not currently supported for "+c+" markets");let m=this.safeList(o,"data",[]);if("futures"===l)return this.parseOrders(m,r,t,s);let g=[];for(let e=0;e<m.length;e++){let t=this.parseOrder(m[e],r);g.push(t)}return this.filterBySymbolSinceLimit(g,e,t,s)}async fetchClosedOrders(e,t,s,i={}){let r,o;await this.loadMarkets(),await this.loadAccounts();let n=this.safeDict(this.accounts,0,{}),d=this.safeString(n,"id"),c={};void 0!==e&&(r=this.market(e),c.symbol=r.id);let[h,u]=this.handleMarketTypeAndParams("fetchClosedOrders",r,i),l=this.safeDict(this.options,"fetchClosedOrders",{}),f=this.safeString(l,"method","v2PrivateDataGetOrderHist"),m=this.getSupportedMapping(h,{spot:f,margin:f,swap:"v2PrivateAccountGroupGetFuturesOrderHistCurrent"});void 0!==t&&(c.startTime=t);let g=this.safeString(i,"until");void 0!==g&&(c.endTime=g);let p=this.safeDict(this.options,"accountsByType",{}),v=this.safeString(p,h,"cash");if("v1PrivateAccountCategoryGetOrderHistCurrent"===m)c["account-group"]=d,c["account-category"]=v,void 0!==s&&(c.limit=s),o=await this.v1PrivateAccountCategoryGetOrderHistCurrent(this.extend(c,u));else if("v2PrivateDataGetOrderHist"===m)c.account=v,void 0!==s&&(c.limit=s),o=await this.v2PrivateDataGetOrderHist(this.extend(c,u));else if("v2PrivateAccountGroupGetFuturesOrderHistCurrent"===m)c["account-group"]=d,c["account-category"]=v,void 0!==s&&(c.pageSize=s),o=await this.v2PrivateAccountGroupGetFuturesOrderHistCurrent(this.extend(c,u));else throw new a.NotSupported(this.id+" fetchClosedOrders() is not currently supported for "+h+" markets");let y=this.safeList(o,"data",[]);return Array.isArray(y)||(y=this.safeList(y,"data",[])),this.parseOrders(y,r,t,s)}async cancelOrder(e,t,s={}){let i;if(void 0===t)throw new a.ArgumentsRequired(this.id+" cancelOrder() requires a symbol argument");await this.loadMarkets(),await this.loadAccounts();let r=this.market(t),[o,n]=this.handleMarketTypeAndParams("cancelOrder",r,s),d=this.safeDict(this.options,"accountsByType",{}),c=this.safeString(d,o,"cash"),h=this.safeDict(this.accounts,0,{}),u={"account-group":this.safeString(h,"id"),"account-category":c,symbol:r.id,time:this.milliseconds(),id:"foobar"},l=this.safeString2(s,"clientOrderId","id");if(void 0===l?u.orderId=e:(u.id=l,s=this.omit(s,["clientOrderId","id"])),"spot"===o||"margin"===o)i=await this.v1PrivateAccountCategoryDeleteOrder(this.extend(u,n));else if("swap"===o)u["account-category"]=c,i=await this.v2PrivateAccountGroupDeleteFuturesOrder(this.extend(u,n));else throw new a.NotSupported(this.id+" cancelOrder() is not currently supported for "+o+" markets");let f=this.safeDict(i,"data",{}),m=this.safeDict2(f,"order","info",{});return this.parseOrder(m,r)}async cancelAllOrders(e,t={}){let s,i;await this.loadMarkets(),await this.loadAccounts(),void 0!==e&&(s=this.market(e));let[r,o]=this.handleMarketTypeAndParams("cancelAllOrders",s,t),n=this.safeDict(this.options,"accountsByType",{}),d=this.safeString(n,r,"cash"),c=this.safeDict(this.accounts,0,{}),h={"account-group":this.safeString(c,"id"),"account-category":d,time:this.milliseconds()};if(void 0!==e&&(h.symbol=s.id),"spot"===r||"margin"===r)i=await this.v1PrivateAccountCategoryDeleteOrderAll(this.extend(h,o));else if("swap"===r)h["account-category"]=d,i=await this.v2PrivateAccountGroupDeleteFuturesOrderAll(this.extend(h,o));else throw new a.NotSupported(this.id+" cancelAllOrders() is not currently supported for "+r+" markets");return this.safeOrder({info:i})}parseDepositAddress(e,t){let s=this.safeString(e,"address"),i=this.safeString(e,"tagId"),a=this.safeString(e,i);this.checkAddress(s);let r=void 0===t?void 0:t.code,o=this.safeString(e,"blockchain"),n=this.networkIdToCode(o,r);return{info:e,currency:r,network:n,address:s,tag:a}}async fetchDepositAddress(e,t={}){let s;await this.loadMarkets();let i=this.currency(e),r=this.safeString2(t,"network","chainName"),o=this.networkCodeToId(r);t=this.omit(t,["chainName"]);let n={asset:i.id,blockchain:o},d=await this.v1PrivateGetWalletDepositAddress(this.extend(n,t)),c=this.safeDict(d,"data",{}),h=this.safeList(c,"address",[]);if(h.length>1){let e=this.indexBy(h,"chainName");if(void 0===o){let t=Object.keys(e).join(", ");throw new a.ArgumentsRequired(this.id+" fetchDepositAddress() returned more than one address, a chainName parameter is required, one of "+t)}s=this.safeDict(e,o,{})}else s=this.safeDict(h,0,{});let u=this.parseDepositAddress(s,i);return this.extend(u,{info:d})}async fetchDeposits(e,t,s,i={}){return await this.fetchTransactions(e,t,s,this.extend({txType:"deposit"},i))}async fetchWithdrawals(e,t,s,i={}){return await this.fetchTransactions(e,t,s,this.extend({txType:"withdrawal"},i))}async fetchDepositsWithdrawals(e,t,s,i={}){let a;await this.loadMarkets();let r={};void 0!==e&&(a=this.currency(e),r.asset=a.id),void 0!==t&&(r.startTs=t),void 0!==s&&(r.pageSize=s);let o=await this.v1PrivateGetWalletTransactions(this.extend(r,i)),n=this.safeDict(o,"data",{}),d=this.safeList(n,"data",[]);return this.parseTransactions(d,a,t,s)}parseTransactionStatus(e){return this.safeString({reviewing:"pending",pending:"pending",confirmed:"ok",rejected:"rejected"},e,e)}parseTransaction(e,t){let s=this.safeDict(e,"destAddress",{}),i=this.safeString(s,"address"),a=this.safeString(s,"destTag"),o=this.safeInteger(e,"time"),n=this.safeString(e,"asset"),d=this.safeString(e,"amount"),c=this.safeString(e,"commission");d=r.Y.stringSub(d,c);let h=this.safeCurrencyCode(n,t);return{info:e,id:this.safeString(e,"requestId"),txid:this.safeString(e,"networkTransactionId"),type:this.safeString(e,"transactionType"),currency:h,network:void 0,amount:this.parseNumber(d),status:this.parseTransactionStatus(this.safeString(e,"status")),timestamp:o,datetime:this.iso8601(o),address:i,addressFrom:void 0,addressTo:i,tag:a,tagFrom:void 0,tagTo:a,updated:void 0,comment:void 0,fee:{currency:h,cost:this.parseNumber(c),rate:void 0},internal:!1}}async fetchPositions(e,t={}){await this.loadMarkets(),await this.loadAccounts();let s=this.safeDict(this.accounts,0,{}),i=this.safeString(s,"id"),a=await this.v2PrivateAccountGroupGetFuturesPosition(this.extend({"account-group":i},t)),r=this.safeDict(a,"data",{}),o=this.safeList(r,"contracts",[]),n=[];for(let e=0;e<o.length;e++)n.push(this.parsePosition(o[e]));return e=this.marketSymbols(e),this.filterByArrayPositions(n,"symbol",e,!1)}parsePosition(e,t){let s;let i=this.safeString(e,"symbol");t=this.safeMarket(i,t);let a=this.safeString(e,"buyOpenOrderNotional");r.Y.stringEq(a,"0")&&(a=this.safeString(e,"sellOpenOrderNotional"));let o="crossed"===this.safeString(e,"marginType")?"cross":"isolated";return"isolated"===o&&(s=this.safeString(e,"isolatedMargin")),this.safePosition({info:e,id:void 0,symbol:t.symbol,notional:this.parseNumber(a),marginMode:o,liquidationPrice:void 0,entryPrice:this.safeNumber(e,"avgOpenPrice"),unrealizedPnl:this.safeNumber(e,"unrealizedPnl"),percentage:void 0,contracts:this.safeNumber(e,"position"),contractSize:this.safeNumber(t,"contractSize"),markPrice:this.safeNumber(e,"markPrice"),lastPrice:void 0,side:this.safeStringLower(e,"side"),hedged:void 0,timestamp:void 0,datetime:void 0,lastUpdateTimestamp:void 0,maintenanceMargin:void 0,maintenanceMarginPercentage:void 0,collateral:s,initialMargin:void 0,initialMarginPercentage:void 0,leverage:this.safeInteger(e,"leverage"),marginRatio:void 0,stopLossPrice:this.safeNumber(e,"stopLossPrice"),takeProfitPrice:this.safeNumber(e,"takeProfitPrice")})}parseFundingRate(e,t){let s=this.safeString(e,"symbol"),i=this.safeSymbol(s,t),a=this.safeInteger(e,"time"),r=this.safeNumber(e,"fundingRate"),o=this.safeInteger(e,"nextFundingTime");return{info:e,symbol:i,markPrice:this.safeNumber(e,"markPrice"),indexPrice:this.safeNumber(e,"indexPrice"),interestRate:this.parseNumber("0"),estimatedSettlePrice:void 0,timestamp:a,datetime:this.iso8601(a),previousFundingRate:void 0,nextFundingRate:void 0,previousFundingTimestamp:void 0,nextFundingTimestamp:void 0,previousFundingDatetime:void 0,nextFundingDatetime:void 0,fundingRate:r,fundingTimestamp:o,fundingDatetime:this.iso8601(o),interval:void 0}}async fetchFundingRates(e,t={}){await this.loadMarkets(),e=this.marketSymbols(e);let s=await this.v2PublicGetFuturesPricingData(t),i=this.safeDict(s,"data",{}),a=this.safeList(i,"contracts",[]);return this.parseFundingRates(a,e)}async modifyMarginHelper(e,t,s,i={}){await this.loadMarkets(),await this.loadAccounts();let a=this.market(e),o=this.safeDict(this.accounts,0,{}),n=this.safeString(o,"id");t=this.amountToPrecision(e,t);let d={"account-group":n,symbol:a.id,amount:t},c=await this.v2PrivateAccountGroupPostFuturesIsolatedPositionMargin(this.extend(d,i));return"reduce"===s&&(t=r.Y.stringAbs(t)),this.extend(this.parseMarginModification(c,a),{amount:this.parseNumber(t),type:s})}parseMarginModification(e,t){let s=this.safeString(e,"code");return{info:e,symbol:t.symbol,type:void 0,marginMode:"isolated",amount:void 0,total:void 0,code:t.quote,status:"0"===s?"ok":"failed",timestamp:void 0,datetime:void 0}}async reduceMargin(e,t,s={}){return await this.modifyMarginHelper(e,-t,"reduce",s)}async addMargin(e,t,s={}){return await this.modifyMarginHelper(e,t,"add",s)}async setLeverage(e,t,s={}){if(void 0===t)throw new a.ArgumentsRequired(this.id+" setLeverage() requires a symbol argument");if(e<1||e>100)throw new a.BadRequest(this.id+" leverage should be between 1 and 100");await this.loadMarkets(),await this.loadAccounts();let i=this.market(t);if(!i.swap)throw new a.BadSymbol(this.id+" setLeverage() supports swap contracts only");let r=this.safeDict(this.accounts,0,{}),o={"account-group":this.safeString(r,"id"),symbol:i.id,leverage:e};return await this.v2PrivateAccountGroupPostFuturesLeverage(this.extend(o,s))}async setMarginMode(e,t,s={}){if(void 0===t)throw new a.ArgumentsRequired(this.id+" setMarginMode() requires a symbol argument");if("cross"===(e=e.toLowerCase())&&(e="crossed"),"isolated"!==e&&"crossed"!==e)throw new a.BadRequest(this.id+" setMarginMode() marginMode argument should be isolated or cross");await this.loadMarkets(),await this.loadAccounts();let i=this.market(t),r=this.safeDict(this.accounts,0,{}),o={"account-group":this.safeString(r,"id"),symbol:i.id,marginType:e};if(!i.swap)throw new a.BadSymbol(this.id+" setMarginMode() supports swap contracts only");return await this.v2PrivateAccountGroupPostFuturesMarginType(this.extend(o,s))}async fetchLeverageTiers(e,t={}){await this.loadMarkets();let s=await this.v2PublicGetFuturesContract(t),i=this.safeList(s,"data",[]);return e=this.marketSymbols(e),this.parseLeverageTiers(i,e,"symbol")}parseMarketLeverageTiers(e,t){let s=this.safeList(e,"marginRequirements",[]),i=this.safeString(e,"symbol");t=this.safeMarket(i,t);let a=[];for(let e=0;e<s.length;e++){let o=s[e],n=this.safeString(o,"initialMarginRate");a.push({tier:this.sum(e,1),symbol:this.safeSymbol(i,t,void 0,"contract"),currency:t.quote,minNotional:this.safeNumber(o,"positionNotionalLowerBound"),maxNotional:this.safeNumber(o,"positionNotionalUpperBound"),maintenanceMarginRate:this.safeNumber(o,"maintenanceMarginRate"),maxLeverage:this.parseNumber(r.Y.stringDiv("1",n)),info:o})}return a}parseDepositWithdrawFee(e,t){let s=this.safeList(e,"blockChain",[]),i=s.length,a={info:e,withdraw:{fee:void 0,percentage:void 0},deposit:{fee:void 0,percentage:void 0},networks:{}};for(let e=0;e<i;e++){let r=s[e],o=this.safeString(r,"chainName"),n=this.safeString(t,"code"),d=this.networkIdToCode(o,n);a.networks[d]={deposit:{fee:void 0,percentage:void 0},withdraw:{fee:this.safeNumber(r,"withdrawFee"),percentage:!1}},1===i&&(a.withdraw.fee=this.safeNumber(r,"withdrawFee"),a.withdraw.percentage=!1)}return a}async fetchDepositWithdrawFees(e,t={}){await this.loadMarkets();let s=await this.v2PublicGetAssets(t),i=this.safeList(s,"data");return this.parseDepositWithdrawFees(i,e,"assetCode")}async transfer(e,t,s,i,r={}){await this.loadMarkets(),await this.loadAccounts();let o=this.safeDict(this.accounts,0,{}),n=this.safeString(o,"id"),d=this.currency(e),c=this.safeDict(this.options,"accountsByType",{}),h=this.safeString(c,s,s),u=this.safeString(c,i,i);if("cash"!==h&&"cash"!==u)throw new a.ExchangeError(this.id+" transfer() only supports direct balance transfer between spot and swap, spot and margin");let l={"account-group":n,amount:this.currencyToPrecision(e,t),asset:d.id,fromAccount:h,toAccount:u},f=await this.v1PrivateAccountGroupPostTransfer(this.extend(l,r)),m=this.safeDict(this.options,"transfer",{}),g=this.safeBool(m,"fillResponseFromRequest",!0),p=this.parseTransfer(f,d);return g&&(p.fromAccount=s,p.toAccount=i,p.amount=t,p.currency=e),p}parseTransfer(e,t){let s=this.safeString(e,"code");return{info:e,id:void 0,timestamp:void 0,datetime:void 0,currency:this.safeCurrencyCode(void 0,t),amount:void 0,fromAccount:void 0,toAccount:void 0,status:this.parseTransferStatus(s)}}parseTransferStatus(e){return"0"===e?"ok":"failed"}async fetchFundingHistory(e,t,s,i={}){let a;await this.loadMarkets(),await this.loadAccounts();let r=!1;if([r,i]=this.handleOptionAndParams(i,"fetchFundingHistory","paginate"),r)return await this.fetchPaginatedCallIncremental("fetchFundingHistory",e,t,s,i,"page",25);let o=this.safeDict(this.accounts,0,{}),n={"account-group":this.safeString(o,"id")};void 0!==e&&(a=this.market(e),n.symbol=a.id),void 0!==s&&(n.pageSize=s);let d=await this.v2PrivateAccountGroupGetFuturesFundingPayments(this.extend(n,i)),c=this.safeDict(d,"data",{}),h=this.safeList(c,"data",[]);return this.parseIncomes(h,a,t,s)}parseIncome(e,t){let s=this.safeString(e,"symbol"),i=this.safeInteger(e,"timestamp");return{info:e,symbol:this.safeSymbol(s,t,"-","swap"),code:"USDT",timestamp:i,datetime:this.iso8601(i),id:void 0,amount:this.safeNumber(e,"paymentInUSDT")}}async fetchMarginModes(e,t={}){await this.loadMarkets(),await this.loadAccounts();let s=this.safeDict(this.accounts,0,{}),i=this.safeString(s,"id"),a=await this.v2PrivateAccountGroupGetFuturesPosition(this.extend({"account-group":i},t)),r=this.safeDict(a,"data",{}),o=this.safeList(r,"contracts",[]);return this.parseMarginModes(o,e,"symbol")}parseMarginMode(e,t){let s=this.safeString(e,"symbol"),i=this.safeString(e,"marginType");return{info:e,symbol:this.safeSymbol(s,t),marginMode:"crossed"===i?"cross":"isolated"}}async fetchLeverages(e,t={}){await this.loadMarkets(),await this.loadAccounts();let s=this.safeDict(this.accounts,0,{}),i=this.safeString(s,"id"),a=await this.v2PrivateAccountGroupGetFuturesPosition(this.extend({"account-group":i},t)),r=this.safeDict(a,"data",{}),o=this.safeList(r,"contracts",[]);return this.parseLeverages(o,e,"symbol")}parseLeverage(e,t){let s=this.safeString(e,"symbol"),i=this.safeInteger(e,"leverage"),a=this.safeString(e,"marginType");return{info:e,symbol:this.safeSymbol(s,t),marginMode:"crossed"===a?"cross":"isolated",longLeverage:i,shortLeverage:i}}sign(e,t="public",s="GET",i={},a,r){let o=t[0],d=t[1],c=this.safeString(t,2),h="",u="accountCategory"===c;(u||"accountGroup"===c)&&(h+=this.implodeParams("/{account-group}",i),i=this.omit(i,"account-group"));let l=this.implodeParams(e,i);if(h+="/api/pro/","v2"===o?l="data"===c?"data/"+o+"/"+l:o+"/"+l:h+=o+"/",u&&(h+=this.implodeParams("{account-category}/",i)),i=this.omit(i,"account-category"),h+=l,("v1"===o&&"cash/balance"===l||"margin/balance"===l)&&(l="balance"),"v1"===o&&"spot/fee"===l&&(l="fee"),l.indexOf("subuser")>=0&&(l=l.split("/")[2]),i=this.omit(i,this.extractParams(e)),"public"===d)Object.keys(i).length&&(h+="?"+this.urlencode(i));else{this.checkRequiredCredentials();let e=this.milliseconds().toString(),t=e+"+"+l,o=this.hmac(this.encode(t),this.encode(this.secret),n.s,"base64");a={"x-auth-key":this.apiKey,"x-auth-timestamp":e,"x-auth-signature":o},"GET"===s?Object.keys(i).length&&(h+="?"+this.urlencode(i)):(a["Content-Type"]="application/json",r=this.json(i))}return{url:h=this.urls.api.rest+h,method:s,body:r,headers:a}}handleErrors(e,t,s,i,r,o,n,d,c){if(void 0===n)return;let h=this.safeString(n,"code"),u=this.safeString(n,"message");if(void 0!==h&&"0"!==h||void 0!==u){let e=this.id+" "+o;throw this.throwExactlyMatchedException(this.exceptions.exact,h,e),this.throwExactlyMatchedException(this.exceptions.exact,u,e),this.throwBroadlyMatchedException(this.exceptions.broad,u,e),new a.ExchangeError(e)}}}}}]);