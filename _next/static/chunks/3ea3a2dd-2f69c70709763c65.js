"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[798],{9825:(e,t,i)=>{i.d(t,{A:()=>d});var s=i(5352),r=i(8119),a=i(6077),o=i(3675),n=i(5432);class d extends s.A{describe(){return this.deepExtend(super.describe(),{id:"hashkey",name:"HashKey Global",countries:["BM"],rateLimit:100,version:"v1",certified:!0,pro:!0,has:{CORS:void 0,spot:!0,margin:!1,swap:!1,future:!1,option:!1,addMargin:!1,cancelAllOrders:!0,cancelAllOrdersAfter:!1,cancelOrder:!0,cancelOrders:!0,cancelWithdraw:!1,closePosition:!1,createConvertTrade:!1,createDepositAddress:!1,createMarketBuyOrderWithCost:!0,createMarketOrder:!0,createMarketOrderWithCost:!1,createMarketSellOrderWithCost:!1,createOrder:!0,createOrderWithTakeProfitAndStopLoss:!1,createReduceOnlyOrder:!0,createStopLimitOrder:!0,createStopLossOrder:!1,createStopMarketOrder:!0,createStopOrder:!0,createTakeProfitOrder:!1,createTrailingAmountOrder:!1,createTrailingPercentOrder:!1,createTriggerOrder:!0,fetchAccounts:!0,fetchBalance:!0,fetchCanceledAndClosedOrders:!0,fetchCanceledOrders:!0,fetchClosedOrder:!0,fetchClosedOrders:!1,fetchConvertCurrencies:!1,fetchConvertQuote:!1,fetchConvertTrade:!1,fetchConvertTradeHistory:!1,fetchCurrencies:!0,fetchDepositAddress:!0,fetchDepositAddresses:!1,fetchDepositAddressesByNetwork:!1,fetchDeposits:!0,fetchDepositsWithdrawals:!1,fetchFundingHistory:!1,fetchFundingRate:!0,fetchFundingRateHistory:!0,fetchFundingRates:!0,fetchIndexOHLCV:!1,fetchLedger:!0,fetchLeverage:!0,fetchLeverageTiers:!0,fetchMarginAdjustmentHistory:!1,fetchMarginMode:!1,fetchMarketLeverageTiers:"emulated",fetchMarkets:!0,fetchMarkOHLCV:!1,fetchMyTrades:!0,fetchOHLCV:!0,fetchOpenInterestHistory:!1,fetchOpenOrder:!1,fetchOpenOrders:!0,fetchOrder:!0,fetchOrderBook:!0,fetchOrders:!1,fetchOrderTrades:!1,fetchPosition:!1,fetchPositionHistory:!1,fetchPositionMode:!1,fetchPositions:!0,fetchPositionsForSymbol:!0,fetchPositionsHistory:!1,fetchPremiumIndexOHLCV:!1,fetchStatus:!0,fetchTicker:!0,fetchTickers:!0,fetchTime:!0,fetchTrades:!0,fetchTradingFee:!0,fetchTradingFees:!0,fetchTransactions:!1,fetchTransfers:!1,fetchWithdrawals:!0,reduceMargin:!1,sandbox:!1,setLeverage:!0,setMargin:!1,setPositionMode:!1,transfer:!0,withdraw:!0},timeframes:{"1m":"1m","3m":"3m","5m":"5m","15m":"15m","30m":"30m","1h":"1h","2h":"2h","4h":"4h","6h":"6h","8h":"8h","12h":"12h","1d":"1d","1w":"1w","1M":"1M"},urls:{logo:"https://github.com/user-attachments/assets/6dd6127b-cc19-4a13-9b29-a98d81f80e98",api:{public:"https://api-glb.hashkey.com",private:"https://api-glb.hashkey.com"},test:{public:"https://api-glb.sim.hashkeydev.com",private:"https://api-glb.sim.hashkeydev.com"},www:"https://global.hashkey.com/",doc:"https://hashkeyglobal-apidoc.readme.io/",fees:"https://support.global.hashkey.com/hc/en-us/articles/13199900083612-HashKey-Global-Fee-Structure",referral:"https://global.hashkey.com/en-US/register/invite?invite_code=82FQUN"},api:{public:{get:{"api/v1/exchangeInfo":5,"quote/v1/depth":1,"quote/v1/trades":1,"quote/v1/klines":1,"quote/v1/ticker/24hr":1,"quote/v1/ticker/price":1,"quote/v1/ticker/bookTicker":1,"quote/v1/depth/merged":1,"quote/v1/markPrice":1,"quote/v1/index":1,"api/v1/futures/fundingRate":1,"api/v1/futures/historyFundingRate":1,"api/v1/ping":1,"api/v1/time":1}},private:{get:{"api/v1/spot/order":1,"api/v1/spot/openOrders":1,"api/v1/spot/tradeOrders":5,"api/v1/futures/leverage":1,"api/v1/futures/order":1,"api/v1/futures/openOrders":1,"api/v1/futures/userTrades":1,"api/v1/futures/positions":1,"api/v1/futures/historyOrders":1,"api/v1/futures/balance":1,"api/v1/futures/liquidationAssignStatus":1,"api/v1/futures/riskLimit":1,"api/v1/futures/commissionRate":1,"api/v1/futures/getBestOrder":1,"api/v1/account/vipInfo":1,"api/v1/account":1,"api/v1/account/trades":5,"api/v1/account/type":5,"api/v1/account/checkApiKey":1,"api/v1/account/balanceFlow":5,"api/v1/spot/subAccount/openOrders":1,"api/v1/spot/subAccount/tradeOrders":1,"api/v1/subAccount/trades":1,"api/v1/futures/subAccount/openOrders":1,"api/v1/futures/subAccount/historyOrders":1,"api/v1/futures/subAccount/userTrades":1,"api/v1/account/deposit/address":1,"api/v1/account/depositOrders":1,"api/v1/account/withdrawOrders":1},post:{"api/v1/userDataStream":1,"api/v1/spot/orderTest":1,"api/v1/spot/order":1,"api/v1.1/spot/order":1,"api/v1/spot/batchOrders":5,"api/v1/futures/leverage":1,"api/v1/futures/order":1,"api/v1/futures/position/trading-stop":3,"api/v1/futures/batchOrders":5,"api/v1/account/assetTransfer":1,"api/v1/account/authAddress":1,"api/v1/account/withdraw":1},put:{"api/v1/userDataStream":1},delete:{"api/v1/spot/order":1,"api/v1/spot/openOrders":5,"api/v1/spot/cancelOrderByIds":5,"api/v1/futures/order":1,"api/v1/futures/batchOrders":1,"api/v1/futures/cancelOrderByIds":1,"api/v1/userDataStream":1}}},fees:{trading:{spot:{tierBased:!0,percentage:!0,feeSide:"get",maker:this.parseNumber("0.0012"),taker:this.parseNumber("0.0012"),tiers:{maker:[[this.parseNumber("0"),this.parseNumber("0.0012")],[this.parseNumber("1000000"),this.parseNumber("0.00080")],[this.parseNumber("5000000"),this.parseNumber("0.00070")],[this.parseNumber("10000000"),this.parseNumber("0.00060")],[this.parseNumber("50000000"),this.parseNumber("0.00040")],[this.parseNumber("200000000"),this.parseNumber("0.00030")],[this.parseNumber("400000000"),this.parseNumber("0.00010")],[this.parseNumber("800000000"),this.parseNumber("0.00")]],taker:[[this.parseNumber("0"),this.parseNumber("0.0012")],[this.parseNumber("1000000"),this.parseNumber("0.00090")],[this.parseNumber("5000000"),this.parseNumber("0.00085")],[this.parseNumber("10000000"),this.parseNumber("0.00075")],[this.parseNumber("50000000"),this.parseNumber("0.00065")],[this.parseNumber("200000000"),this.parseNumber("0.00045")],[this.parseNumber("400000000"),this.parseNumber("0.00040")],[this.parseNumber("800000000"),this.parseNumber("0.00035")]]}},swap:{tierBased:!0,percentage:!0,feeSide:"get",maker:this.parseNumber("0.00025"),taker:this.parseNumber("0.00060"),tiers:{maker:[[this.parseNumber("0"),this.parseNumber("0.00025")],[this.parseNumber("1000000"),this.parseNumber("0.00016")],[this.parseNumber("5000000"),this.parseNumber("0.00014")],[this.parseNumber("10000000"),this.parseNumber("0.00012")],[this.parseNumber("50000000"),this.parseNumber("0.000080")],[this.parseNumber("200000000"),this.parseNumber("0.000060")],[this.parseNumber("400000000"),this.parseNumber("0.000020")],[this.parseNumber("800000000"),this.parseNumber("0.00")]],taker:[[this.parseNumber("0"),this.parseNumber("0.00060")],[this.parseNumber("1000000"),this.parseNumber("0.00050")],[this.parseNumber("5000000"),this.parseNumber("0.00045")],[this.parseNumber("10000000"),this.parseNumber("0.00040")],[this.parseNumber("50000000"),this.parseNumber("0.00035")],[this.parseNumber("200000000"),this.parseNumber("0.00030")],[this.parseNumber("400000000"),this.parseNumber("0.00025")],[this.parseNumber("800000000"),this.parseNumber("0.00020")]]}}}},options:{broker:"10000700011",recvWindow:void 0,sandboxMode:!1,networks:{BTC:"BTC",ERC20:"ETH",AVAX:"AvalancheC",SOL:"Solana",MATIC:"Polygon",ATOM:"Cosmos",DOT:"Polkadot",LTC:"LTC",OPTIMISM:"Optimism",ARB:"Arbitrum",DOGE:"Dogecoin",TRC20:"Tron",ZKSYNC:"zkSync",TON:"TON",KLAYTN:"Klaytn",MERLINCHAIN:"Merlin Chain"},networksById:{BTC:"BTC",Bitcoin:"BTC",ETH:"ERC20",ERC20:"ERC20",AvalancheC:"AVAX","AVAX C-Chain":"AVAX",Solana:"SOL",Cosmos:"ATOM",Arbitrum:"ARB",Polygon:"MATIC",Optimism:"OPTIMISM",Polkadot:"DOT",LTC:"LTC",Litecoin:"LTC",Dogecoin:"DOGE","Merlin Chain":"MERLINCHAIN",zkSync:"ZKSYNC",TRC20:"TRC20",Tron:"TRC20",TON:"TON","BSC(BEP20)":"BSC",Klaytn:"KLAYTN"},defaultNetwork:"ERC20"},features:{default:{sandbox:!0,createOrder:{marginMode:!1,triggerPrice:!1,triggerPriceType:void 0,triggerDirection:!1,stopLossPrice:!1,takeProfitPrice:!1,attachedStopLossTakeProfit:void 0,timeInForce:{IOC:!0,FOK:!0,PO:!0,GTD:!1},hedged:!1,trailing:!1,leverage:!1,marketBuyByCost:!0,marketBuyRequiresPrice:!0,selfTradePrevention:!0,iceberg:!1},createOrders:{max:20},fetchMyTrades:{marginMode:!1,limit:1e3,daysBack:30,untilDays:30},fetchOrder:{marginMode:!1,trigger:!1,trailing:!1},fetchOpenOrders:{marginMode:!1,limit:1e3,trigger:!1,trailing:!1},fetchOrders:void 0,fetchClosedOrders:void 0,fetchOHLCV:{limit:1e3}},spot:{extends:"default"},forDerivatives:{extends:"default",createOrder:{triggerPrice:!0,selfTradePrevention:!0},fetchOpenOrders:{trigger:!0,limit:500}},swap:{linear:{extends:"forDerivatives"},inverse:void 0},future:{linear:void 0,inverse:void 0}},commonCurrencies:{},exceptions:{exact:{"0001":r.BadRequest,"0002":r.AuthenticationError,"0003":r.RateLimitExceeded,"0102":r.AuthenticationError,"0103":r.AuthenticationError,"0104":r.PermissionDenied,"0201":r.ExchangeError,"0202":r.PermissionDenied,"0206":r.BadRequest,"0207":r.BadRequest,"0209":r.BadRequest,"0210":r.BadRequest,"0211":r.OrderNotFound,"0401":r.InsufficientFunds,"0402":r.BadRequest,"-1000":r.ExchangeError,"-1001":r.ExchangeError,"-100010":r.BadSymbol,"-100012":r.BadSymbol,"-1002":r.AuthenticationError,"-1004":r.BadRequest,"-1005":r.PermissionDenied,"-1006":r.ExchangeError,"-1007":r.RequestTimeout,"-1014":r.InvalidOrder,"-1015":r.InvalidOrder,"-1020":r.OperationRejected,"-1021":r.InvalidNonce,"-1024":r.BadRequest,"-1101":r.ExchangeNotAvailable,"-1115":r.InvalidOrder,"-1117":r.InvalidOrder,"-1123":r.InvalidOrder,"-1124":r.InvalidOrder,"-1126":r.InvalidOrder,"-1129":r.BadRequest,"-1130":r.BadRequest,"-1132":r.BadRequest,"-1133":r.BadRequest,"-1135":r.BadRequest,"-1136":r.BadRequest,"-1138":r.InvalidOrder,"-1137":r.InvalidOrder,"-1139":r.OrderImmediatelyFillable,"-1140":r.InvalidOrder,"-1141":r.DuplicateOrderId,"-1142":r.OrderNotFillable,"-1143":r.OrderNotFound,"-1144":r.OperationRejected,"-1145":r.NotSupported,"-1146":r.RequestTimeout,"-1147":r.RequestTimeout,"-1148":r.InvalidOrder,"-1149":r.OperationRejected,"-1150":r.OperationFailed,"-1151":r.OperationRejected,"-1152":r.AccountNotEnabled,"-1153":r.InvalidOrder,"-1154":r.InvalidOrder,"-1155":r.OperationRejected,"-1156":r.OperationFailed,"-1157":r.OperationFailed,"-1158":r.OperationFailed,"-1159":r.AccountNotEnabled,"-1160":r.AccountNotEnabled,"-1161":r.OperationFailed,"-1162":r.ContractUnavailable,"-1163":r.InvalidAddress,"-1164":r.OperationFailed,"-1165":r.ArgumentsRequired,"-1166":r.OperationRejected,"-1167":r.BadRequest,"-1168":r.BadRequest,"-1169":r.PermissionDenied,"-1170":r.PermissionDenied,"-1171":r.PermissionDenied,"-1172":r.BadRequest,"-1173":r.BadRequest,"-1174":r.PermissionDenied,"-1175":r.BadRequest,"-1176":r.BadRequest,"-1177":r.InvalidOrder,"-1178":r.AccountNotEnabled,"-1179":r.AccountSuspended,"-1181":r.ExchangeError,"-1193":r.OperationRejected,"-1194":r.OperationRejected,"-1195":r.BadRequest,"-1196":r.BadRequest,"-1200":r.BadRequest,"-1201":r.BadRequest,"-1202":r.BadRequest,"-1203":r.BadRequest,"-1204":r.BadRequest,"-1205":r.AccountNotEnabled,"-1206":r.BadRequest,"-1207":r.BadRequest,"-1208":r.BadRequest,"-1209":r.BadRequest,"-2001":r.ExchangeNotAvailable,"-2002":r.OperationFailed,"-2003":r.OperationFailed,"-2004":r.OperationFailed,"-2005":r.RequestTimeout,"-2010":r.OperationRejected,"-2011":r.OperationRejected,"-2016":r.OperationRejected,"-2017":r.OperationRejected,"-2018":r.OperationRejected,"-2019":r.PermissionDenied,"-2020":r.PermissionDenied,"-2021":r.PermissionDenied,"-2022":r.OperationRejected,"-2023":r.AuthenticationError,"-2024":r.AccountNotEnabled,"-2025":r.AccountNotEnabled,"-2026":r.BadRequest,"-2027":r.OperationRejected,"-2028":r.OperationRejected,"-2029":r.OperationRejected,"-2030":r.InsufficientFunds,"-2031":r.NotSupported,"-2032":r.OperationRejected,"-2033":r.OperationFailed,"-2034":r.InsufficientFunds,"-2035":r.OperationRejected,"-2036":r.NotSupported,"-2037":r.ExchangeError,"-2038":r.InsufficientFunds,"-2039":r.NotSupported,"-2040":r.ExchangeNotAvailable,"-2041":r.BadRequest,"-2042":r.OperationRejected,"-2043":r.OperationRejected,"-2044":r.BadRequest,"-2045":r.BadRequest,"-2046":r.BadRequest,"-2048":r.BadRequest,"-2049":r.BadRequest,"-2050":r.BadRequest,"-2051":r.OperationRejected,"-2052":r.OperationRejected,"-2053":r.OperationRejected,"-2054":r.BadRequest,"-2055":r.BadRequest,"-2056":r.BadRequest,"-2057":r.BadRequest,"-3117":r.PermissionDenied,"-3143":r.PermissionDenied,"-3144":r.PermissionDenied,"-3145":r.DDoSProtection,"-4001":r.BadRequest,"-4002":r.BadRequest,"-4003":r.InsufficientFunds,"-4004":r.BadRequest,"-4005":r.BadRequest,"-4006":r.AccountNotEnabled,"-4007":r.NotSupported,"-4008":r.AccountNotEnabled,"-4009":r.PermissionDenied,"-4010":r.PermissionDenied,"-4011":r.ExchangeError,"-4012":r.ExchangeError,"-4013":r.OperationFailed},broad:{}},precisionMode:o.kb})}async fetchTime(e={}){let t=await this.publicGetApiV1Time(e);return this.safeInteger(t,"serverTime")}async fetchStatus(e={}){return{status:"ok",updated:void 0,eta:void 0,url:void 0,info:await this.publicGetApiV1Ping(e)}}async fetchMarkets(e={}){let t=await this.publicGetApiV1ExchangeInfo(this.extend({},e)),i=this.safeList(t,"symbols",[]),s=this.safeList(t,"contracts",[]),r=this.arrayConcat(i,s);return this.isEmpty(r)&&(r=[t]),this.parseMarkets(r)}parseMarket(e){let t,i,s,r;let o=this.safeString(e,"symbol"),n=this.safeString(e,"quoteAsset"),d=this.safeCurrencyCode(n),h=this.safeString(e,"marginToken"),c=this.safeCurrencyCode(h),p=this.safeString(e,"baseAsset"),u="spot",l=!0,m=!1,f="",g=o.split("-");"PERPETUAL"===this.safeString(g,1)&&(u="swap",l=!1,m=!0,p=this.safeString(e,"underlying"),f+=":"+h);let v=this.safeCurrencyCode(p),y=v+"/"+d+f,O=this.safeString(e,"status"),b=this.safeBool(e,"inverse");void 0!==b&&(b?(t=!1,i="inverse"):(t=!0,i="linear"));let w=this.safeList(e,"filters",[]),S=this.indexBy(w,"filterType"),T=this.safeDict(S,"PRICE_FILTER",{}),k=this.safeDict(S,"LOT_SIZE",{}),A=this.safeDict(S,"MIN_NOTIONAL",{}),N=this.omitZero(this.safeString(A,"min_notional")),P=this.safeString(e,"contractMultiplier"),R=this.safeString(k,"stepSize"),I=this.safeString(k,"minQty"),M=this.safeString(k,"maxQty");if(m){R=a.Y.stringDiv(R,P),I=a.Y.stringDiv(I,P),M=a.Y.stringDiv(M,P);let t=this.safeList(e,"riskLimits");if(void 0!==t){let e=this.safeDict(t,0),i=t.length,o=this.safeDict(t,i-1),n=this.safeString(e,"initialMargin"),d=this.safeString(o,"initialMargin");a.Y.stringGt(n,d)&&([n,d]=[d,n]),s=this.parseToInt(a.Y.stringDiv("1",d)),r=this.parseToInt(a.Y.stringDiv("1",n))}}let C=this.safeDict(this.fees,"trading"),B=l?this.safeDict(C,"spot"):this.safeDict(C,"swap");return this.safeMarketStructure({id:o,symbol:y,base:v,quote:d,baseId:p,quoteId:n,active:"TRADING"===O,type:u,subType:i,spot:l,margin:this.safeBool(e,"allowMargin"),swap:m,future:!1,option:!1,contract:m,settle:c,settleId:h,contractSize:this.parseNumber(P),linear:t,inverse:b,taker:this.safeNumber(B,"taker"),maker:this.safeNumber(B,"maker"),percentage:this.safeBool(B,"percentage"),tierBased:this.safeBool(B,"tierBased"),feeSide:this.safeString(B,"feeSide"),expiry:void 0,expiryDatetime:void 0,strike:void 0,optionType:void 0,precision:{amount:this.parseNumber(R),price:this.safeNumber(T,"tickSize")},limits:{amount:{min:this.parseNumber(I),max:this.parseNumber(M)},price:{min:this.safeNumber(T,"minPrice"),max:this.safeNumber(T,"maxPrice")},leverage:{min:s,max:r},cost:{min:this.parseNumber(N),max:void 0}},created:void 0,info:e})}async fetchCurrencies(e={}){let t=await this.publicGetApiV1ExchangeInfo(e),i=this.safeList(t,"coins"),s={};for(let e=0;e<i.length;e++){let t=i[e],r=this.safeString(t,"coinId"),a=this.safeCurrencyCode(r),o=this.safeBool(t,"allowWithdraw"),n=this.safeBool(t,"allowDeposit"),d=this.safeList(t,"chainTypes"),h=this.safeDict(this.options,"networksById"),c={};for(let e=0;e<d.length;e++){let t=d[e],i=this.safeString(t,"chainType"),s=this.safeString(h,i,i),r=this.omitZero(this.safeString(t,"maxWithdrawQuantity")),a=this.safeBool(t,"allowDeposit"),o=this.safeBool(t,"allowWithdraw");c[s]={id:i,network:s,limits:{withdraw:{min:this.safeNumber(t,"minWithdrawQuantity"),max:this.parseNumber(r)},deposit:{min:this.safeNumber(t,"minDepositQuantity"),max:void 0}},active:a&&o,deposit:a,withdraw:o,fee:this.safeNumber(t,"withdrawFee"),precision:void 0,info:t}}s[a]={id:r,code:a,precision:void 0,type:this.parseCurrencyType(this.safeString(t,"tokenType")),name:this.safeString(t,"coinFullName"),active:o&&n,deposit:n,withdraw:o,fee:void 0,limits:{deposit:{min:void 0,max:void 0},withdraw:{min:void 0,max:void 0}},networks:c,info:t}}return s}parseCurrencyType(e){return this.safeString({CHAIN_TOKEN:"crypto",ERC20_TOKEN:"crypto",BSC_TOKEN:"crypto",REAL_MONEY:"fiat"},e)}async fetchOrderBook(e,t,i={}){await this.loadMarkets();let s={symbol:this.market(e).id};void 0!==t&&(s.limit=t);let r=await this.publicGetQuoteV1Depth(this.extend(s,i)),a=this.safeInteger(r,"t");return this.parseOrderBook(r,e,a,"b","a")}async fetchTrades(e,t,i,s={}){await this.loadMarkets();let r=this.market(e),a={symbol:r.id};void 0!==i&&(a.limit=i);let o=await this.publicGetQuoteV1Trades(this.extend(a,s));return this.parseTrades(o,r,t,i)}async fetchMyTrades(e,t,i,s={}){let a,o,n,d;let h="fetchMyTrades";await this.loadMarkets();let c={};void 0!==e&&(a=this.market(e));let p="spot";if([p,s]=this.handleMarketTypeAndParams(h,a,s),void 0!==t&&(c.startTime=t),void 0!==i&&(c.limit=i),[o,s]=this.handleOptionAndParams(s,h,"until"),void 0!==o&&(c.endTime=o),[n,s]=this.handleOptionAndParams(s,h,"accountId"),"spot"===p)void 0!==a&&(c.symbol=a.id),void 0!==n&&(c.accountId=n),d=await this.privateGetApiV1AccountTrades(this.extend(c,s));else if("swap"===p){if(void 0===e)throw new r.ArgumentsRequired(this.id+" "+h+"() requires a symbol argument for swap markets");c.symbol=a.id,void 0!==n?(c.subAccountId=n,d=await this.privateGetApiV1FuturesSubAccountUserTrades(this.extend(c,s))):d=await this.privateGetApiV1FuturesUserTrades(this.extend(c,s))}else throw new r.NotSupported(this.id+" "+h+"() is not supported for "+p+" type of markets");return this.parseTrades(d,a,t,i)}parseTrade(e,t){let i,s;let r=this.safeInteger2(e,"t","time"),a=this.safeString(e,"symbol");t=this.safeMarket(a,t);let o=this.safeStringLower(e,"side");void 0!==o&&(o=this.safeString(o.split("_"),0));let n=this.safeBool(e,"isBuyer");void 0!==n&&(o=n?"buy":"sell");let d=this.safeBoolN(e,["isMaker","isMarker"]);void 0!==d&&(i=d?"maker":"taker");let h=this.safeBool(e,"ibm");void 0!==h&&(i="taker",o=h?"sell":"buy");let c=this.safeString(e,"commission"),p=this.safeString(e,"commissionAsset"),u=this.safeDict(e,"fee");return void 0!==u&&(c=this.safeString(u,"fee"),p=this.safeString(u,"feeCoinId")),void 0!==c&&(s={cost:this.parseNumber(c),currency:this.safeCurrencyCode(p)}),this.safeTrade({id:this.safeString2(e,"id","tradeId"),timestamp:r,datetime:this.iso8601(r),symbol:t.symbol,side:o,price:this.safeString2(e,"p","price"),amount:this.safeStringN(e,["q","qty","quantity"]),cost:void 0,takerOrMaker:i,type:void 0,order:this.safeString(e,"orderId"),fee:s,info:e},t)}async fetchOHLCV(e,t="1m",i,s,r={}){let a;let o="fetchOHLCV";await this.loadMarkets();let n=!1;if([n,r]=this.handleOptionAndParams(r,o,"paginate"),n)return await this.fetchPaginatedCallDeterministic("fetchOHLCV",e,i,s,t,r,1e3);let d=this.market(e);t=this.safeString(this.timeframes,t,t);let h={symbol:d.id,interval:t};void 0!==i&&(h.startTime=i),void 0!==s&&(h.limit=s),[a,r]=this.handleOptionAndParams(r,o,"until"),void 0!==a&&(h.endTime=a);let c=await this.publicGetQuoteV1Klines(this.extend(h,r));return this.parseOHLCVs(c,d,t,i,s)}parseOHLCV(e,t){return[this.safeInteger(e,0),this.safeNumber(e,1),this.safeNumber(e,2),this.safeNumber(e,3),this.safeNumber(e,4),this.safeNumber(e,5)]}async fetchTicker(e,t={}){await this.loadMarkets();let i=this.market(e),s={symbol:i.id},r=await this.publicGetQuoteV1Ticker24hr(this.extend(s,t)),a=this.safeDict(r,0,{});return this.parseTicker(a,i)}async fetchTickers(e,t={}){await this.loadMarkets(),e=this.marketSymbols(e);let i=await this.publicGetQuoteV1Ticker24hr(t);return this.parseTickers(i,e)}parseTicker(e,t){let i=this.safeInteger(e,"t"),s=this.safeString(e,"s"),r=(t=this.safeMarket(s,t)).symbol,a=this.safeString(e,"c");return this.safeTicker({symbol:r,timestamp:i,datetime:this.iso8601(i),high:this.safeString(e,"h"),low:this.safeString(e,"l"),bid:this.safeString(e,"b"),bidVolume:void 0,ask:this.safeString(e,"a"),askVolume:void 0,vwap:void 0,open:this.safeString(e,"o"),close:a,last:a,previousClose:void 0,change:void 0,percentage:void 0,average:void 0,baseVolume:this.safeString(e,"v"),quoteVolume:this.safeString(e,"qv"),info:e},t)}async fetchLastPrices(e,t={}){await this.loadMarkets(),e=this.marketSymbols(e);let i=await this.publicGetQuoteV1TickerPrice(this.extend({},t));return this.parseLastPrices(i,e)}parseLastPrice(e,t){let i=this.safeString(e,"s");return{symbol:(t=this.safeMarket(i,t)).symbol,timestamp:void 0,datetime:void 0,price:this.safeNumber(e,"p"),side:void 0,info:e}}async fetchBalance(e={}){await this.loadMarkets();let t="fetchBalance",i="spot";if([i,e]=this.handleMarketTypeAndParams(t,void 0,e,i),"swap"===i){let t=await this.privateGetApiV1FuturesBalance(e),i=this.safeDict(t,0,{});return this.parseSwapBalance(i)}if("spot"===i){let t=await this.privateGetApiV1Account(this.extend({},e));return this.parseBalance(t)}throw new r.NotSupported(this.id+" "+t+"() is not supported for "+i+" type of markets")}parseBalance(e){let t={info:e},i=this.safeList(e,"balances",[]);for(let e=0;e<i.length;e++){let s=i[e],r=this.safeString(s,"asset"),a=this.safeCurrencyCode(r),o=this.account();o.total=this.safeString(s,"total"),o.free=this.safeString(s,"free"),o.used=this.safeString(s,"locked"),t[a]=o}return this.safeBalance(t)}parseSwapBalance(e){let t=this.safeString(e,"asset"),i=this.safeCurrencyCode(t),s=this.account();s.total=this.safeString(e,"balance");let r=this.safeString(e,"positionMargin"),o=this.safeString(e,"orderMargin");s.used=a.Y.stringAdd(r,o);let n={info:e};return n[i]=s,this.safeBalance(n)}async fetchDepositAddress(e,t={}){let i;await this.loadMarkets();let s=this.currency(e),r={coin:s.id};[i,t]=this.handleNetworkCodeAndParams(t),void 0===i&&(i=this.defaultNetworkCode(e)),r.chainType=this.networkCodeToId(i,e);let a=await this.privateGetApiV1AccountDepositAddress(this.extend(r,t)),o=this.parseDepositAddress(a,s);return o.network=i,o}parseDepositAddress(e,t){let i=this.safeString(e,"address");this.checkAddress(i);let s=this.safeString(e,"addressExt");return""===s&&(s=void 0),{info:e,currency:t.code,network:void 0,address:i,tag:s}}async fetchDeposits(e,t,i,s={}){let r,a;await this.loadMarkets();let o={};void 0!==e&&(r=this.currency(e),o.coin=r.id),void 0!==t&&(o.startTime=t),void 0!==i&&(o.limit=i),[a,s]=this.handleOptionAndParams(s,"fetchDeposits","until"),void 0!==a&&(o.endTime=a);let n=await this.privateGetApiV1AccountDepositOrders(this.extend(o,s));return this.parseTransactions(n,r,t,i,{type:"deposit"})}async fetchWithdrawals(e,t,i,s={}){let r,a;await this.loadMarkets();let o={};void 0!==e&&(r=this.currency(e),o.coin=r.id),void 0!==t&&(o.startTime=t),void 0!==i&&(o.limit=i),[a,s]=this.handleOptionAndParams(s,"fetchWithdrawals","until"),void 0!==a&&(o.endTime=a);let n=await this.privateGetApiV1AccountWithdrawOrders(this.extend(o,s));return this.parseTransactions(n,r,t,i,{type:"withdrawal"})}async withdraw(e,t,i,s,r={}){let a;[s,r]=this.handleWithdrawTagAndParams(s,r),await this.loadMarkets();let o=this.currency(e),n={coin:o.id,address:i,quantity:t};void 0!==s&&(n.addressExt=s),[a,r]=this.handleNetworkCodeAndParams(r),void 0!==a&&(n.chainType=this.networkCodeToId(a));let d=await this.privatePostApiV1AccountWithdraw(this.extend(n,r));return this.parseTransaction(d,o)}parseTransaction(e,t){let i;let s=this.safeString2(e,"id","orderId"),r=this.safeString(e,"address"),a=this.safeString(e,"status");void 0===a&&(this.safeBool(e,"success",!1)?a="ok":void 0!==this.safeString(e,"addressUrl")&&(a="ok"));let o=this.safeString(e,"txId"),n=this.safeString(e,"coin"),d=this.safeCurrencyCode(n,t),h=this.safeInteger(e,"time"),c=this.safeNumber(e,"quantity"),p=this.safeNumber(e,"fee");return void 0!==p&&(i={cost:p,currency:d}),{info:e,id:s,txid:o,timestamp:h,datetime:this.iso8601(h),network:void 0,address:r,addressTo:void 0,addressFrom:void 0,tag:void 0,tagTo:void 0,tagFrom:void 0,type:void 0,amount:c,currency:d,status:this.parseTransactionStatus(a),updated:void 0,internal:void 0,comment:void 0,fee:i}}parseTransactionStatus(e){return this.safeString({1:"pending",2:"pending",3:"failed",4:"ok",5:"pending",6:"ok",7:"failed",8:"cancelled",9:"failed",10:"failed",successful:"ok",success:"ok"},e,e)}async transfer(e,t,i,s,r={}){await this.loadMarkets();let a=this.currency(e),o={coin:a.id,quantity:this.currencyToPrecision(e,t),fromAccountId:i,toAccountId:s},n=await this.privatePostApiV1AccountAssetTransfer(this.extend(o,r));return this.parseTransfer(n,a)}parseTransfer(e,t){let i;let s=this.safeInteger(e,"timestamp"),r=this.safeString(t,"id");return this.safeBool(e,"success",!1)&&(i="ok"),{id:this.safeString(e,"orderId"),timestamp:s,datetime:this.iso8601(s),currency:this.safeCurrencyCode(r,t),amount:void 0,fromAccount:void 0,toAccount:void 0,status:i,info:e}}async fetchAccounts(e={}){await this.loadMarkets();let t=await this.privateGetApiV1AccountType(e);return this.parseAccounts(t,e)}parseAccount(e){let t=this.safeString(e,"accountLabel"),i="";"Main Trading Account"===t||"Main Future Account"===t?i="main":("Sub Main Trading Account"===t||"Sub Main Future Account"===t)&&(i="sub");let s=i+" "+this.parseAccountType(this.safeString(e,"accountType"));return{id:this.safeString(e,"accountId"),type:s,code:void 0,info:e}}parseAccountType(e){return this.safeString({1:"spot account",3:"swap account",5:"custody account",6:"fiat account"},e,e)}encodeAccountType(e){return this.safeInteger({spot:"1",swap:"3",custody:"5"},e,e)}encodeFlowType(e){return this.safeInteger({trade:"1",fee:"3",transfer:"51",deposit:"900",withdraw:"904"},e,e)}async fetchLedger(e,t,i,s={}){let a,o,n;let d="fetchLedger";if(void 0===t)throw new r.ArgumentsRequired(this.id+" "+d+"() requires a since argument");if([a,s]=this.handleOptionAndParams(s,d,"until"),void 0===a)throw new r.ArgumentsRequired(this.id+" "+d+"() requires an until argument");await this.loadMarkets();let h=this.currency(e),c={};c.startTime=t,void 0!==i&&(c.limit=i),c.endTime=a,[o,s]=this.handleOptionAndParams(s,d,"flowType"),void 0!==o&&(c.flowType=this.encodeFlowType(o)),[n,s]=this.handleOptionAndParams(s,d,"accountType"),void 0!==n&&(c.accountType=this.encodeAccountType(n));let p=await this.privateGetApiV1AccountBalanceFlow(this.extend(c,s));return this.parseLedger(p,h,t,i)}parseLedgerEntryType(e){return this.safeString({1:"trade",2:"fee",51:"transfer",900:"deposit",904:"withdraw"},e,e)}parseLedgerEntry(e,t){let i=this.safeString(e,"id"),s=this.safeString(e,"accountId"),r=this.safeInteger(e,"created"),a=this.parseLedgerEntryType(this.safeString(e,"flowTypeValue")),o=this.safeString(e,"coin"),n=this.safeCurrencyCode(o,t);t=this.safeCurrency(o,t);let d=this.safeString(e,"change"),h=this.parseNumber(d),c="in";d.indexOf("-")>=0&&(c="out");let p=this.safeString(e,"total"),u=this.parseNumber(p);return this.safeLedgerEntry({info:e,id:i,timestamp:r,datetime:this.iso8601(r),account:s,direction:c,referenceId:void 0,referenceAccount:void 0,type:a,currency:n,symbol:void 0,amount:h,before:void 0,after:u,status:"ok",fee:void 0},t)}async createOrder(e,t,i,s,a,o={}){await this.loadMarkets();let n=this.market(e);if(n.spot)return await this.createSpotOrder(e,t,i,s,a,o);if(n.swap)return await this.createSwapOrder(e,t,i,s,a,o);throw new r.NotSupported(this.id+" createOrder() is not supported for "+n.type+" type of markets")}async createMarketBuyOrderWithCost(e,t,i={}){if(await this.loadMarkets(),!this.market(e).spot)throw new r.NotSupported(this.id+" createMarketBuyOrderWithCost() is supported for spot markets only");return await this.createOrder(e,"market","buy",t,void 0,this.extend({cost:t},i))}async createSpotOrder(e,t,i,s,a,o={}){if(void 0!==this.safeString2(o,"stopPrice","triggerPrice"))throw new r.NotSupported(this.id+" trigger orders are not supported for spot markets");await this.loadMarkets();let n=this.market(e),d="market"===t&&"buy"===i,h=this.safeString(o,"cost");if(!d&&void 0!==h)throw new r.NotSupported(this.id+" createOrder() supports cost parameter for spot market buy orders only");let c=this.createSpotOrderRequest(e,t,i,s,a,o),p={};return this.safeBool(o,"test")?(o=this.omit(o,"test"),p=await this.privatePostApiV1SpotOrderTest(c)):p=d&&void 0===h?await this.privatePostApiV11SpotOrder(c):await this.privatePostApiV1SpotOrder(c),this.parseOrder(p,n)}createOrderRequest(e,t,i,s,a,o={}){let n=this.market(e);if(n.spot)return this.createSpotOrderRequest(e,t,i,s,a,o);if(n.swap)return this.createSwapOrderRequest(e,t,i,s,a,o);throw new r.NotSupported(this.id+" createOrderRequest() is not supported for "+n.type+" type of markets")}createSpotOrderRequest(e,t,i,s,r,a={}){let o,n;let d=this.market(e);t=t.toUpperCase();let h={symbol:d.id,side:i.toUpperCase(),type:t};void 0!==s&&(h.quantity=this.amountToPrecision(e,s)),[o,a]=this.handleParamString(a,"cost"),void 0!==o&&(h.quantity=this.costToPrecision(e,o)),void 0!==r&&(h.price=this.priceToPrecision(e,r));let c="MARKET"===t,p=!1;return[p,a]=this.handlePostOnly(c,"LIMIT_MAKER"===t,a),p&&"LIMIT"===t&&(h.type="LIMIT_MAKER"),[n,a]=this.handleParamString(a,"clientOrderId"),void 0!==n&&(a.newClientOrderId=n),this.extend(h,a)}createSwapOrderRequest(e,t,i,s,r,a={}){let o;let n={symbol:this.market(e).id,type:"LIMIT",quantity:this.amountToPrecision(e,s)},d="market"===t;d&&(n.priceType="MARKET"),void 0!==r&&(n.price=this.priceToPrecision(e,r),n.priceType="INPUT");let h=!1;[h,a]=this.handleParamBool(a,"reduceOnly",h);let c="_OPEN";h&&(c="_CLOSE"),n.side=i.toUpperCase()+c,[o,a]=this.handleParamString(a,"timeInForce");let p=!1;[p,a]=this.handlePostOnly(d,"LIMIT_MAKER"===o,a),p&&(o="LIMIT_MAKER"),void 0!==o&&(n.timeInForce=o),void 0===this.safeString(a,"clientOrderId")&&(n.clientOrderId=this.uuid());let u=this.safeString(a,"triggerPrice");return void 0!==u&&(n.stopPrice=this.priceToPrecision(e,u),n.type="STOP",a=this.omit(a,"triggerPrice")),this.extend(n,a)}async createSwapOrder(e,t,i,s,r,a={}){await this.loadMarkets();let o=this.market(e),n=this.createSwapOrderRequest(e,t,i,s,r,a),d=await this.privatePostApiV1FuturesOrder(this.extend(n,a));return this.parseOrder(d,o)}async createOrders(e,t={}){let i;await this.loadMarkets();let s=[];for(let t=0;t<e.length;t++){let i=e[t],r=this.safeString(i,"symbol"),a=this.safeString(i,"type"),o=this.safeString(i,"side"),n=this.safeNumber(i,"amount"),d=this.safeNumber(i,"price"),h=this.safeDict(i,"params",{}),c=this.createOrderRequest(r,a,o,n,d,h);void 0===this.safeString(c,"clientOrderId")&&(c.clientOrderId=this.uuid()),s.push(c)}let a=s[0],o=this.safeString(a,"symbol"),n=this.market(o),d={orders:s};if(n.spot)i=await this.privatePostApiV1SpotBatchOrders(this.extend(d,t));else if(n.swap)i=await this.privatePostApiV1FuturesBatchOrders(this.extend(d,t));else throw new r.NotSupported(this.id+" createOrderRequest() is not supported for "+n.type+" type of markets");let h=this.safeList(i,"result",[]),c=[];for(let e=0;e<h.length;e++){let t=this.safeDict(h,e,{}),i=this.safeDict(t,"order",{});c.push(i)}return this.parseOrders(c)}async cancelOrder(e,t,i={}){let s,a;let o="cancelOrder";this.checkTypeParam(o,i),await this.loadMarkets();let n={};void 0===this.safeString(i,"clientOrderId")&&(n.orderId=e),void 0!==t&&(s=this.market(t));let d="spot";if([d,i]=this.handleMarketTypeAndParams(o,s,i,d),"spot"===d)a=await this.privateDeleteApiV1SpotOrder(this.extend(n,i));else if("swap"===d){let e=!1;[e,i]=this.handleTriggerOptionAndParams(i,o,e),e?n.type="STOP":n.type="LIMIT",void 0!==s&&(n.symbol=s.id),a=await this.privateDeleteApiV1FuturesOrder(this.extend(n,i))}else throw new r.NotSupported(this.id+" "+o+"() is not supported for "+d+" type of markets");return this.parseOrder(a)}async cancelAllOrders(e,t={}){let i;let s="cancelAllOrders";if(void 0===e)throw new r.ArgumentsRequired(this.id+" "+s+"() requires a symbol argument");await this.loadMarkets();let a=this.market(e),o={symbol:a.id},n=this.safeString(t,"side");if(void 0!==n&&(o.side=n),a.spot)i=await this.privateDeleteApiV1SpotOpenOrders(this.extend(o,t));else if(a.swap)i=await this.privateDeleteApiV1FuturesBatchOrders(this.extend(o,t));else throw new r.NotSupported(this.id+" "+s+"() is not supported for "+a.type+" type of markets");let d=this.safeOrder(i);return d.info=i,[d]}async cancelOrders(e,t,i={}){let s,a;let o="cancelOrders";await this.loadMarkets();let n={},d=e.join(",");n.ids=d,void 0!==t&&(s=this.market(t));let h="spot";if([h,i]=this.handleMarketTypeAndParams(o,s,i,h),"spot"===h)a=await this.privateDeleteApiV1SpotCancelOrderByIds(this.extend(n));else if("swap"===h)a=this.privateDeleteApiV1FuturesCancelOrderByIds(this.extend(n));else throw new r.NotSupported(this.id+" "+o+"() is not supported for "+h+" type of markets");let c=this.safeOrder(a);return c.info=a,[c]}async fetchOrder(e,t,i={}){let s,a,o;let n="fetchOrder";this.checkTypeParam(n,i),await this.loadMarkets();let d={};[s,i]=this.handleParamString(i,"clientOrderId"),void 0===s&&(d.orderId=e),void 0!==t&&(a=this.market(t));let h="spot";if([h,i]=this.handleMarketTypeAndParams(n,a,i,h),"spot"===h)void 0!==s&&(d.origClientOrderId=s),o=await this.privateGetApiV1SpotOrder(this.extend(d,i));else if("swap"===h){let e=!1;[e,i]=this.handleTriggerOptionAndParams(i,n,e),e&&(d.type="STOP"),o=await this.privateGetApiV1FuturesOrder(this.extend(d,i))}else throw new r.NotSupported(this.id+" "+n+"() is not supported for "+h+" type of markets");return this.parseOrder(o)}async fetchOpenOrders(e,t,i,s={}){let a;let o="fetchOpenOrders";this.checkTypeParam(o,s),await this.loadMarkets(),void 0!==e&&(a=this.market(e));let n="spot";if([n,s]=this.handleMarketTypeAndParams(o,a,s,n),s=this.extend({methodName:o},s),"spot"===n)return await this.fetchOpenSpotOrders(e,t,i,s);if("swap"===n)return await this.fetchOpenSwapOrders(e,t,i,s);throw new r.NotSupported(this.id+" "+o+"() is not supported for "+n+" type of markets")}async fetchOpenSpotOrders(e,t,i,s={}){let r,a,o;await this.loadMarkets();let n="fetchOpenSpotOrders";[n,s]=this.handleParamString(s,"methodName",n);let d={};return[o,s]=this.handleOptionAndParams(s,n,"accountId"),void 0!==o?(d.subAccountId=o,a=await this.privateGetApiV1SpotSubAccountOpenOrders(this.extend(d,s))):(void 0!==e&&(r=this.market(e),d.symbol=r.id),void 0!==i&&(d.limit=i),a=await this.privateGetApiV1SpotOpenOrders(this.extend(d,s))),this.parseOrders(a,r,t,i)}async fetchOpenSwapOrders(e,t,i,s={}){let a,o,n="fetchOpenSwapOrders";if([n,s]=this.handleParamString(s,"methodName",n),void 0===e)throw new r.ArgumentsRequired(this.id+" "+n+"() requires a symbol argument for swap market orders");let d=this.market(e),h={symbol:d.id},c=!1;return[c,s]=this.handleTriggerOptionAndParams(s,n,c),c?h.type="STOP":h.type="LIMIT",void 0!==i&&(h.limit=i),[o,s]=this.handleOptionAndParams(s,n,"accountId"),void 0!==o?(h.subAccountId=o,a=await this.privateGetApiV1FuturesSubAccountOpenOrders(this.extend(h,s))):a=await this.privateGetApiV1FuturesOpenOrders(this.extend(h,s)),this.parseOrders(a,d,t,i)}async fetchCanceledAndClosedOrders(e,t,i,s={}){let a,o,n,d;let h="fetchCanceledAndClosedOrders";this.checkTypeParam(h,s),await this.loadMarkets();let c={};void 0!==i&&(c.limit=i),void 0!==t&&(c.startTime=t),[a,s]=this.handleOptionAndParams(s,h,"until"),void 0!==a&&(c.endTime=a),[o,s]=this.handleOptionAndParams(s,h,"accountId"),void 0!==e&&(n=this.market(e));let p="spot";if([p,s]=this.handleMarketTypeAndParams(h,n,s,p),"spot"===p)void 0!==n&&(c.symbol=n.id),void 0!==o&&(c.accountId=o),d=await this.privateGetApiV1SpotTradeOrders(this.extend(c,s));else if("swap"===p){if(void 0===e)throw new r.ArgumentsRequired(this.id+" "+h+"() requires a symbol argument for swap markets");c.symbol=n.id;let t=!1;[t,s]=this.handleTriggerOptionAndParams(s,h,t),t?c.type="STOP":c.type="LIMIT",void 0!==o?(c.subAccountId=o,d=await this.privateGetApiV1FuturesSubAccountHistoryOrders(this.extend(c,s))):d=await this.privateGetApiV1FuturesHistoryOrders(this.extend(c,s))}else throw new r.NotSupported(this.id+" "+h+"() is not supported for "+p+" type of markets");return this.parseOrders(d,n,t,i)}checkTypeParam(e,t){let i=this.safeString(t,"type");if(void 0!==i&&"spot"!==i&&"swap"!==i)throw new r.BadRequest(this.id+" "+e+' () type parameter can not be "'+i+'". It should define the type of the market ("spot" or "swap"). To define the type of an order use the trigger parameter (true for trigger orders)')}handleTriggerOptionAndParams(e,t,i){let s=i;return[s,e]=this.handleOptionAndParams2(e,t,"stop","trigger",s),[s,e]}parseOrder(e,t){let i,s;let r=this.safeString(e,"symbol");t=this.safeMarket(r,t);let a=this.safeInteger2(e,"transactTime","time"),o=this.safeString(e,"status"),n=this.safeString(e,"type");"MARKET"===this.safeString(e,"priceType")&&(n="market");let d=this.omitZero(this.safeString(e,"price"));"STOP"===n&&(n=void 0===d?"market":"limit");let h=this.safeString(e,"timeInForce");[n,h,i]=this.parseOrderTypeTimeInForceAndPostOnly(n,h);let c=this.omitZero(this.safeString(e,"avgPrice"));void 0===d&&(d=c);let p=this.safeStringLower(e,"side");[p,s]=this.parseOrderSideAndReduceOnly(p);let u=this.safeString(e,"feeCoin");return""===u&&(u=void 0),this.safeOrder({id:this.safeString(e,"orderId"),clientOrderId:this.safeString(e,"clientOrderId"),datetime:this.iso8601(a),timestamp:a,lastTradeTimestamp:void 0,lastUpdateTimestamp:this.safeInteger(e,"updateTime"),status:this.parseOrderStatus(o),symbol:t.symbol,type:n,timeInForce:h,side:p,price:d,average:c,amount:this.omitZero(this.safeString(e,"origQty")),filled:this.safeString(e,"executedQty"),remaining:void 0,triggerPrice:this.omitZero(this.safeString(e,"stopPrice")),takeProfitPrice:void 0,stopLossPrice:void 0,cost:this.omitZero(this.safeString2(e,"cumulativeQuoteQty","cummulativeQuoteQty")),trades:void 0,fee:{currency:this.safeCurrencyCode(u),amount:this.omitZero(this.safeString(e,"feeAmount"))},reduceOnly:s,postOnly:i,info:e},t)}parseOrderSideAndReduceOnly(e){let t;let i=e.split("_"),s=i[0],r=this.safeString(i,1);return void 0!==r&&("open"===r?t=!1:"close"===r&&(t=!0)),[s,t]}parseOrderStatus(e){return this.safeString({NEW:"open",PARTIALLY_FILLED:"open",PARTIALLY_CANCELED:"canceled",FILLED:"closed",CANCELED:"canceled",ORDER_CANCELED:"canceled",PENDING_CANCEL:"canceled",REJECTED:"rejected",ORDER_NEW:"open"},e,e)}parseOrderTypeTimeInForceAndPostOnly(e,t){let i;return"LIMIT_MAKER"===e?i=!0:("LIMIT_MAKER"===t||"MAKER"===t)&&(i=!0,t="PO"),[e=this.parseOrderType(e),t,i]}parseOrderType(e){return this.safeString({MARKET:"market",LIMIT:"limit",LIMIT_MAKER:"limit",MARKET_OF_BASE:"market"},e,e)}async fetchFundingRate(e,t={}){await this.loadMarkets();let i=this.market(e),s={symbol:i.id,timestamp:this.milliseconds()},r=await this.publicGetApiV1FuturesFundingRate(this.extend(s,t)),a=this.safeDict(r,0,{});return this.parseFundingRate(a,i)}async fetchFundingRates(e,t={}){await this.loadMarkets(),e=this.marketSymbols(e);let i={timestamp:this.milliseconds()},s=await this.publicGetApiV1FuturesFundingRate(this.extend(i,t));return this.parseFundingRates(s,e)}parseFundingRate(e,t){let i=this.safeString(e,"symbol");t=this.safeMarket(i,t,void 0,"swap");let s=this.safeNumber(e,"rate"),r=this.safeInteger(e,"nextSettleTime");return{info:e,symbol:t.symbol,markPrice:void 0,indexPrice:void 0,interestRate:void 0,estimatedSettlePrice:void 0,timestamp:void 0,datetime:void 0,fundingRate:s,fundingTimestamp:void 0,fundingDatetime:void 0,nextFundingRate:void 0,nextFundingTimestamp:r,nextFundingDatetime:this.iso8601(r),previousFundingRate:void 0,previousFundingTimestamp:void 0,previousFundingDatetime:void 0,interval:void 0}}async fetchFundingRateHistory(e,t,i,s={}){if(await this.loadMarkets(),void 0===e)throw new r.ArgumentsRequired(this.id+" fetchFundingRateHistory() requires a symbol argument");let a=this.market(e),o={symbol:a.id};void 0!==i&&(o.limit=i);let n=await this.publicGetApiV1FuturesHistoryFundingRate(this.extend(o,s)),d=[];for(let e=0;e<n.length;e++){let t=n[e],i=this.safeInteger(t,"settleTime");d.push({info:t,symbol:this.safeSymbol(this.safeString(t,"symbol"),a,void 0,"swap"),fundingRate:this.safeNumber(t,"settleRate"),timestamp:i,datetime:this.iso8601(i)})}let h=this.sortBy(d,"timestamp");return this.filterBySinceLimit(h,t,i)}async fetchPositions(e,t={}){let i="fetchPositions";if(void 0===e)throw new r.ArgumentsRequired(this.id+" "+i+"() requires a symbol argument with one single market symbol");if(1!==e.length)throw new r.NotSupported(this.id+" "+i+"() is supported for a symbol argument with one single market symbol only");return await this.loadMarkets(),await this.fetchPositionsForSymbol(e[0],this.extend({methodName:"fetchPositions"},t))}async fetchPositionsForSymbol(e,t={}){await this.loadMarkets();let i=this.market(e),s="fetchPosition";if([s,t]=this.handleParamString(t,"methodName",s),!i.swap)throw new r.NotSupported(this.id+" "+s+"() supports swap markets only");let a={symbol:i.id},o=await this.privateGetApiV1FuturesPositions(this.extend(a,t));return this.parsePositions(o,[e])}parsePosition(e,t){let i=this.safeString(e,"symbol"),s=(t=this.safeMarket(i,t)).symbol;return this.safePosition({symbol:s,id:void 0,timestamp:void 0,datetime:void 0,contracts:this.safeNumber(e,"position"),contractSize:void 0,side:this.safeStringLower(e,"side"),notional:this.safeNumber(e,"positionValue"),leverage:this.safeInteger(e,"leverage"),unrealizedPnl:this.safeNumber(e,"unrealizedPnL"),realizedPnl:this.safeNumber(e,"realizedPnL"),collateral:void 0,entryPrice:this.safeNumber(e,"avgPrice"),markPrice:void 0,liquidationPrice:this.safeNumber(e,"liquidationPrice"),marginMode:"cross",hedged:!0,maintenanceMargin:this.safeNumber(e,"minMargin"),maintenanceMarginPercentage:void 0,initialMargin:this.safeNumber(e,"margin"),initialMarginPercentage:void 0,marginRatio:void 0,lastUpdateTimestamp:void 0,lastPrice:this.safeNumber(e,"lastPrice"),stopLossPrice:void 0,takeProfitPrice:void 0,percentage:void 0,info:e})}async fetchLeverage(e,t={}){await this.loadMarkets();let i=this.market(e),s={symbol:i.id},r=await this.privateGetApiV1FuturesLeverage(this.extend(s,t)),a=this.safeDict(r,0,{});return this.parseLeverage(a,i)}parseLeverage(e,t){let i=this.safeStringLower(e,"marginType"),s=this.safeNumber(e,"leverage");return{info:e,symbol:t.symbol,marginMode:i,longLeverage:s,shortLeverage:s}}async setLeverage(e,t,i={}){if(void 0===t)throw new r.ArgumentsRequired(this.id+" setLeverage() requires a symbol argument");await this.loadMarkets();let s={leverage:e},a=this.market(t);s.symbol=a.id;let o=await this.privatePostApiV1FuturesLeverage(this.extend(s,i));return this.parseLeverage(o,a)}async fetchLeverageTiers(e,t={}){await this.loadMarkets();let i=await this.publicGetApiV1ExchangeInfo(t),s=this.safeList(i,"contracts",[]);return e=this.marketSymbols(e),this.parseLeverageTiers(s,e,"symbol")}parseMarketLeverageTiers(e,t){let i=this.safeList(e,"riskLimits",[]),s=this.safeString(e,"symbol");t=this.safeMarket(s,t);let r=[];for(let e=0;e<i.length;e++){let o=i[e],n=this.safeString(o,"initialMargin");r.push({tier:this.sum(e,1),symbol:this.safeSymbol(s,t),currency:t.settle,minNotional:void 0,maxNotional:this.safeNumber(o,"quantity"),maintenanceMarginRate:this.safeNumber(o,"maintMargin"),maxLeverage:this.parseNumber(a.Y.stringDiv("1",n)),info:o})}return r}async fetchTradingFee(e,t={}){let i;await this.loadMarkets();let s=this.market(e);if(s.spot)return i=await this.fetchTradingFees(t),this.safeDict(i,e);if(s.swap)return i=await this.privateGetApiV1FuturesCommissionRate(this.extend({symbol:s.id},t)),this.parseTradingFee(i,s);throw new r.NotSupported(this.id+" fetchTradingFee() is not supported for "+s.type+" type of markets")}async fetchTradingFees(e={}){await this.loadMarkets();let t=await this.privateGetApiV1AccountVipInfo(e),i=this.safeList(t,"data",[]),s={};for(let e=0;e<i.length;e++){let t=this.safeDict(i,e,{}),r=this.parseTradingFee(t);s[r.symbol]=r}return s}parseTradingFee(e,t){let i=this.safeString(e,"symbol");return{info:e,symbol:(t=this.safeMarket(i,t)).symbol,maker:this.safeNumber2(e,"openMakerFee","actualMakerRate"),taker:this.safeNumber2(e,"openTakerFee","actualTakerRate"),percentage:!0,tierBased:!0}}sign(e,t="public",i="GET",s={},r,a){let o,d=this.urls.api[t]+"/"+e;if("private"===t){let t;this.checkRequiredCredentials();let h={timestamp:this.milliseconds()},c=this.safeInteger(this.options,"recvWindow");if(void 0!==c&&(h.recvWindow=c),r={"X-HK-APIKEY":this.apiKey,"Content-Type":"application/x-www-form-urlencoded"},"POST"===i&&("api/v1/spot/batchOrders"===e||"api/v1/futures/batchOrders"===e))r["Content-Type"]="application/json",a=this.json(this.safeList(s,"orders")),t=this.hmac(this.encode(this.customUrlencode(h)),this.encode(this.secret),n.s),d+="?"+(o=this.customUrlencode(this.extend(h,{signature:t})));else{let e=this.extend(h,s);t=this.hmac(this.encode(this.customUrlencode(e)),this.encode(this.secret),n.s),e.signature=t,o=this.customUrlencode(e),"GET"===i?d+="?"+o:a=o}r["INPUT-SOURCE"]=this.safeString(this.options,"broker","10000700011"),r.broker_sign=t}else 0!==(o=this.urlencode(s)).length&&(d+="?"+o);return{url:d,method:i,body:a,headers:r}}customUrlencode(e={}){return this.urlencode(e).replace("%2C",",")}handleErrors(e,t,i,s,a,o,n,d,h){if(void 0===n)return;let c=!1,p=this.safeString(n,"code",void 0);if(0===this.safeInteger(n,"code",void 0)){let e=this.safeList(n,"result",[]);for(let t=0;t<e.length;t++){let i=this.safeDict(e,t);0!==this.safeInteger(i,"code")&&(c=!0,p=this.safeString(i,"code"))}}if(200!==e||c){let e=this.id+" "+o;throw this.throwBroadlyMatchedException(this.exceptions.broad,p,e),this.throwExactlyMatchedException(this.exceptions.exact,p,e),new r.ExchangeError(e)}}}}}]);