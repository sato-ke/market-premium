"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[202],{2526:(e,t,i)=>{i.d(t,{A:()=>c});var a=i(9555),s=i(8119),r=i(6077),n=i(3675),o=i(5432);class c extends a.A{describe(){return this.deepExtend(super.describe(),{id:"htx",name:"HTX",countries:["CN"],rateLimit:100,userAgent:this.userAgents.chrome100,certified:!0,version:"v1",hostname:"api.huobi.pro",pro:!0,has:{CORS:void 0,spot:!0,margin:!0,swap:!0,future:!0,option:void 0,addMargin:void 0,borrowCrossMargin:!0,borrowIsolatedMargin:!0,cancelAllOrders:!0,cancelAllOrdersAfter:!0,cancelOrder:!0,cancelOrders:!0,closeAllPositions:!1,closePosition:!0,createDepositAddress:void 0,createMarketBuyOrderWithCost:!0,createMarketOrderWithCost:!1,createMarketSellOrderWithCost:!1,createOrder:!0,createOrders:!0,createReduceOnlyOrder:!1,createStopLimitOrder:!0,createStopLossOrder:!0,createStopMarketOrder:!0,createStopOrder:!0,createTakeProfitOrder:!0,createTrailingPercentOrder:!0,createTriggerOrder:!0,fetchAccounts:!0,fetchBalance:!0,fetchBidsAsks:void 0,fetchBorrowInterest:!0,fetchBorrowRateHistories:void 0,fetchBorrowRateHistory:void 0,fetchCanceledOrders:void 0,fetchClosedOrder:void 0,fetchClosedOrders:!0,fetchCrossBorrowRate:!1,fetchCrossBorrowRates:!1,fetchCurrencies:!0,fetchDeposit:void 0,fetchDepositAddress:!0,fetchDepositAddresses:void 0,fetchDepositAddressesByNetwork:!0,fetchDeposits:!0,fetchDepositWithdrawFee:"emulated",fetchDepositWithdrawFees:!0,fetchFundingHistory:!0,fetchFundingRate:!0,fetchFundingRateHistory:!0,fetchFundingRates:!0,fetchIndexOHLCV:!0,fetchIsolatedBorrowRate:!1,fetchIsolatedBorrowRates:!0,fetchL3OrderBook:void 0,fetchLastPrices:!0,fetchLedger:!0,fetchLedgerEntry:void 0,fetchLeverage:!1,fetchLeverageTiers:!0,fetchLiquidations:!0,fetchMarginAdjustmentHistory:!1,fetchMarketLeverageTiers:"emulated",fetchMarkets:!0,fetchMarkOHLCV:!0,fetchMyLiquidations:!1,fetchMyTrades:!0,fetchOHLCV:!0,fetchOpenInterest:!0,fetchOpenInterestHistory:!0,fetchOpenInterests:!0,fetchOpenOrder:void 0,fetchOpenOrders:!0,fetchOrder:!0,fetchOrderBook:!0,fetchOrderBooks:void 0,fetchOrders:!0,fetchOrderTrades:!0,fetchPosition:!0,fetchPositionHistory:"emulated",fetchPositions:!0,fetchPositionsHistory:!1,fetchPositionsRisk:!1,fetchPremiumIndexOHLCV:!0,fetchSettlementHistory:!0,fetchStatus:!0,fetchTicker:!0,fetchTickers:!0,fetchTime:!0,fetchTrades:!0,fetchTradingFee:!0,fetchTradingFees:!1,fetchTradingLimits:!0,fetchTransactionFee:void 0,fetchTransactionFees:void 0,fetchTransactions:void 0,fetchTransfers:void 0,fetchWithdrawAddresses:!0,fetchWithdrawal:void 0,fetchWithdrawals:!0,fetchWithdrawalWhitelist:void 0,reduceMargin:void 0,repayCrossMargin:!0,repayIsolatedMargin:!0,setLeverage:!0,setMarginMode:!1,setPositionMode:!0,signIn:void 0,transfer:!0,withdraw:!0},timeframes:{"1m":"1min","5m":"5min","15m":"15min","30m":"30min","1h":"60min","4h":"4hour","1d":"1day","1w":"1week","1M":"1mon","1y":"1year"},urls:{logo:"https://user-images.githubusercontent.com/1294454/76137448-22748a80-604e-11ea-8069-6e389271911d.jpg",hostnames:{contract:"api.hbdm.com",spot:"api.huobi.pro",status:{spot:"status.huobigroup.com",future:{inverse:"status-dm.huobigroup.com",linear:"status-linear-swap.huobigroup.com"},swap:{inverse:"status-swap.huobigroup.com",linear:"status-linear-swap.huobigroup.com"}}},api:{status:"https://{hostname}",contract:"https://{hostname}",spot:"https://{hostname}",public:"https://{hostname}",private:"https://{hostname}",v2Public:"https://{hostname}",v2Private:"https://{hostname}"},www:"https://www.huobi.com",referral:{url:"https://www.htx.com.vc/invite/en-us/1h?invite_code=6rmm2223",discount:.15},doc:["https://huobiapi.github.io/docs/spot/v1/en/","https://huobiapi.github.io/docs/dm/v1/en/","https://huobiapi.github.io/docs/coin_margined_swap/v1/en/","https://huobiapi.github.io/docs/usdt_swap/v1/en/","https://www.huobi.com/en-us/opend/newApiPages/"],fees:"https://www.huobi.com/about/fee/"},api:{v2Public:{get:{"reference/currencies":1,"market-status":1}},v2Private:{get:{"account/ledger":1,"account/withdraw/quota":1,"account/withdraw/address":1,"account/deposit/address":1,"account/repayment":5,"reference/transact-fee-rate":1,"account/asset-valuation":.2,"point/account":5,"sub-user/user-list":1,"sub-user/user-state":1,"sub-user/account-list":1,"sub-user/deposit-address":1,"sub-user/query-deposit":1,"user/api-key":1,"user/uid":1,"algo-orders/opening":1,"algo-orders/history":1,"algo-orders/specific":1,"c2c/offers":1,"c2c/offer":1,"c2c/transactions":1,"c2c/repayment":1,"c2c/account":1,"etp/reference":1,"etp/transactions":5,"etp/transaction":5,"etp/rebalance":1,"etp/limit":1},post:{"account/transfer":1,"account/repayment":5,"point/transfer":5,"sub-user/management":1,"sub-user/creation":1,"sub-user/tradable-market":1,"sub-user/transferability":1,"sub-user/api-key-generation":1,"sub-user/api-key-modification":1,"sub-user/api-key-deletion":1,"sub-user/deduct-mode":1,"algo-orders":1,"algo-orders/cancel-all-after":1,"algo-orders/cancellation":1,"c2c/offer":1,"c2c/cancellation":1,"c2c/cancel-all":1,"c2c/repayment":1,"c2c/transfer":1,"etp/creation":5,"etp/redemption":5,"etp/{transactId}/cancel":10,"etp/batch-cancel":50}},public:{get:{"common/symbols":1,"common/currencys":1,"common/timestamp":1,"common/exchange":1,"settings/currencys":1}},private:{get:{"account/accounts":.2,"account/accounts/{id}/balance":.2,"account/accounts/{sub-uid}":1,"account/history":4,"cross-margin/loan-info":1,"margin/loan-info":1,"fee/fee-rate/get":1,"order/openOrders":.4,"order/orders":.4,"order/orders/{id}":.4,"order/orders/{id}/matchresults":.4,"order/orders/getClientOrder":.4,"order/history":1,"order/matchresults":1,"query/deposit-withdraw":1,"margin/loan-orders":.2,"margin/accounts/balance":.2,"cross-margin/loan-orders":1,"cross-margin/accounts/balance":1,"points/actions":1,"points/orders":1,"subuser/aggregate-balance":10,"stable-coin/exchange_rate":1,"stable-coin/quote":1},post:{"account/transfer":1,"futures/transfer":1,"order/batch-orders":.4,"order/orders/place":.2,"order/orders/submitCancelClientOrder":.2,"order/orders/batchCancelOpenOrders":.4,"order/orders/{id}/submitcancel":.2,"order/orders/batchcancel":.4,"dw/withdraw/api/create":1,"dw/withdraw-virtual/{id}/cancel":1,"dw/transfer-in/margin":10,"dw/transfer-out/margin":10,"margin/orders":10,"margin/orders/{id}/repay":10,"cross-margin/transfer-in":1,"cross-margin/transfer-out":1,"cross-margin/orders":1,"cross-margin/orders/{id}/repay":1,"stable-coin/exchange":1,"subuser/transfer":10}},status:{public:{spot:{get:{"api/v2/summary.json":1}},future:{inverse:{get:{"api/v2/summary.json":1}},linear:{get:{"api/v2/summary.json":1}}},swap:{inverse:{get:{"api/v2/summary.json":1}},linear:{get:{"api/v2/summary.json":1}}}}},spot:{public:{get:{"v2/market-status":1,"v1/common/symbols":1,"v1/common/currencys":1,"v2/settings/common/currencies":1,"v2/reference/currencies":1,"v1/common/timestamp":1,"v1/common/exchange":1,"v1/settings/common/chains":1,"v1/settings/common/currencys":1,"v1/settings/common/symbols":1,"v2/settings/common/symbols":1,"v1/settings/common/market-symbols":1,"market/history/candles":1,"market/history/kline":1,"market/detail/merged":1,"market/tickers":1,"market/detail":1,"market/depth":1,"market/trade":1,"market/history/trade":1,"market/etp":1,"v2/etp/reference":1,"v2/etp/rebalance":1}},private:{get:{"v1/account/accounts":.2,"v1/account/accounts/{account-id}/balance":.2,"v2/account/valuation":1,"v2/account/asset-valuation":.2,"v1/account/history":4,"v2/account/ledger":1,"v2/point/account":5,"v2/account/deposit/address":1,"v2/account/withdraw/quota":1,"v2/account/withdraw/address":1,"v2/reference/currencies":1,"v1/query/deposit-withdraw":1,"v1/query/withdraw/client-order-id":1,"v2/user/api-key":1,"v2/user/uid":1,"v2/sub-user/user-list":1,"v2/sub-user/user-state":1,"v2/sub-user/account-list":1,"v2/sub-user/deposit-address":1,"v2/sub-user/query-deposit":1,"v1/subuser/aggregate-balance":10,"v1/account/accounts/{sub-uid}":1,"v1/order/openOrders":.4,"v1/order/orders/{order-id}":.4,"v1/order/orders/getClientOrder":.4,"v1/order/orders/{order-id}/matchresult":.4,"v1/order/orders/{order-id}/matchresults":.4,"v1/order/orders":.4,"v1/order/history":1,"v1/order/matchresults":1,"v2/reference/transact-fee-rate":1,"v2/algo-orders/opening":1,"v2/algo-orders/history":1,"v2/algo-orders/specific":1,"v1/margin/loan-info":1,"v1/margin/loan-orders":.2,"v1/margin/accounts/balance":.2,"v1/cross-margin/loan-info":1,"v1/cross-margin/loan-orders":1,"v1/cross-margin/accounts/balance":1,"v2/account/repayment":5,"v1/stable-coin/quote":1,"v1/stable_coin/exchange_rate":1,"v2/etp/transactions":5,"v2/etp/transaction":5,"v2/etp/limit":1},post:{"v1/account/transfer":1,"v1/futures/transfer":1,"v2/point/transfer":5,"v2/account/transfer":1,"v1/dw/withdraw/api/create":1,"v1/dw/withdraw-virtual/{withdraw-id}/cancel":1,"v2/sub-user/deduct-mode":1,"v2/sub-user/creation":1,"v2/sub-user/management":1,"v2/sub-user/tradable-market":1,"v2/sub-user/transferability":1,"v2/sub-user/api-key-generation":1,"v2/sub-user/api-key-modification":1,"v2/sub-user/api-key-deletion":1,"v1/subuser/transfer":10,"v1/trust/user/active/credit":10,"v1/order/orders/place":.2,"v1/order/batch-orders":.4,"v1/order/auto/place":.2,"v1/order/orders/{order-id}/submitcancel":.2,"v1/order/orders/submitCancelClientOrder":.2,"v1/order/orders/batchCancelOpenOrders":.4,"v1/order/orders/batchcancel":.4,"v2/algo-orders/cancel-all-after":1,"v2/algo-orders":1,"v2/algo-orders/cancellation":1,"v2/account/repayment":5,"v1/dw/transfer-in/margin":10,"v1/dw/transfer-out/margin":10,"v1/margin/orders":10,"v1/margin/orders/{order-id}/repay":10,"v1/cross-margin/transfer-in":1,"v1/cross-margin/transfer-out":1,"v1/cross-margin/orders":1,"v1/cross-margin/orders/{order-id}/repay":1,"v1/stable-coin/exchange":1,"v2/etp/creation":5,"v2/etp/redemption":5,"v2/etp/{transactId}/cancel":10,"v2/etp/batch-cancel":50}}},contract:{public:{get:{"api/v1/timestamp":1,"heartbeat/":1,"api/v1/contract_contract_info":1,"api/v1/contract_index":1,"api/v1/contract_query_elements":1,"api/v1/contract_price_limit":1,"api/v1/contract_open_interest":1,"api/v1/contract_delivery_price":1,"market/depth":1,"market/bbo":1,"market/history/kline":1,"index/market/history/mark_price_kline":1,"market/detail/merged":1,"market/detail/batch_merged":1,"v2/market/detail/batch_merged":1,"market/trade":1,"market/history/trade":1,"api/v1/contract_risk_info":1,"api/v1/contract_insurance_fund":1,"api/v1/contract_adjustfactor":1,"api/v1/contract_his_open_interest":1,"api/v1/contract_ladder_margin":1,"api/v1/contract_api_state":1,"api/v1/contract_elite_account_ratio":1,"api/v1/contract_elite_position_ratio":1,"api/v1/contract_liquidation_orders":1,"api/v1/contract_settlement_records":1,"index/market/history/index":1,"index/market/history/basis":1,"api/v1/contract_estimated_settlement_price":1,"api/v3/contract_liquidation_orders":1,"swap-api/v1/swap_contract_info":1,"swap-api/v1/swap_index":1,"swap-api/v1/swap_query_elements":1,"swap-api/v1/swap_price_limit":1,"swap-api/v1/swap_open_interest":1,"swap-ex/market/depth":1,"swap-ex/market/bbo":1,"swap-ex/market/history/kline":1,"index/market/history/swap_mark_price_kline":1,"swap-ex/market/detail/merged":1,"v2/swap-ex/market/detail/batch_merged":1,"index/market/history/swap_premium_index_kline":1,"swap-ex/market/detail/batch_merged":1,"swap-ex/market/trade":1,"swap-ex/market/history/trade":1,"swap-api/v1/swap_risk_info":1,"swap-api/v1/swap_insurance_fund":1,"swap-api/v1/swap_adjustfactor":1,"swap-api/v1/swap_his_open_interest":1,"swap-api/v1/swap_ladder_margin":1,"swap-api/v1/swap_api_state":1,"swap-api/v1/swap_elite_account_ratio":1,"swap-api/v1/swap_elite_position_ratio":1,"swap-api/v1/swap_estimated_settlement_price":1,"swap-api/v1/swap_liquidation_orders":1,"swap-api/v1/swap_settlement_records":1,"swap-api/v1/swap_funding_rate":1,"swap-api/v1/swap_batch_funding_rate":1,"swap-api/v1/swap_historical_funding_rate":1,"swap-api/v3/swap_liquidation_orders":1,"index/market/history/swap_estimated_rate_kline":1,"index/market/history/swap_basis":1,"linear-swap-api/v1/swap_contract_info":1,"linear-swap-api/v1/swap_index":1,"linear-swap-api/v1/swap_query_elements":1,"linear-swap-api/v1/swap_price_limit":1,"linear-swap-api/v1/swap_open_interest":1,"linear-swap-ex/market/depth":1,"linear-swap-ex/market/bbo":1,"linear-swap-ex/market/history/kline":1,"index/market/history/linear_swap_mark_price_kline":1,"linear-swap-ex/market/detail/merged":1,"linear-swap-ex/market/detail/batch_merged":1,"v2/linear-swap-ex/market/detail/batch_merged":1,"linear-swap-ex/market/trade":1,"linear-swap-ex/market/history/trade":1,"linear-swap-api/v1/swap_risk_info":1,"swap-api/v1/linear-swap-api/v1/swap_insurance_fund":1,"linear-swap-api/v1/swap_adjustfactor":1,"linear-swap-api/v1/swap_cross_adjustfactor":1,"linear-swap-api/v1/swap_his_open_interest":1,"linear-swap-api/v1/swap_ladder_margin":1,"linear-swap-api/v1/swap_cross_ladder_margin":1,"linear-swap-api/v1/swap_api_state":1,"linear-swap-api/v1/swap_cross_transfer_state":1,"linear-swap-api/v1/swap_cross_trade_state":1,"linear-swap-api/v1/swap_elite_account_ratio":1,"linear-swap-api/v1/swap_elite_position_ratio":1,"linear-swap-api/v1/swap_liquidation_orders":1,"linear-swap-api/v1/swap_settlement_records":1,"linear-swap-api/v1/swap_funding_rate":1,"linear-swap-api/v1/swap_batch_funding_rate":1,"linear-swap-api/v1/swap_historical_funding_rate":1,"linear-swap-api/v3/swap_liquidation_orders":1,"index/market/history/linear_swap_premium_index_kline":1,"index/market/history/linear_swap_estimated_rate_kline":1,"index/market/history/linear_swap_basis":1,"linear-swap-api/v1/swap_estimated_settlement_price":1}},private:{get:{"api/v1/contract_sub_auth_list":1,"api/v1/contract_api_trading_status":1,"swap-api/v1/swap_sub_auth_list":1,"swap-api/v1/swap_api_trading_status":1,"linear-swap-api/v1/swap_sub_auth_list":1,"linear-swap-api/v1/swap_api_trading_status":1,"linear-swap-api/v1/swap_cross_position_side":1,"linear-swap-api/v1/swap_position_side":1,"linear-swap-api/v3/unified_account_info":1,"linear-swap-api/v3/fix_position_margin_change_record":1,"linear-swap-api/v3/swap_unified_account_type":1,"linear-swap-api/v3/linear_swap_overview_account_info":1},post:{"api/v1/contract_balance_valuation":1,"api/v1/contract_account_info":1,"api/v1/contract_position_info":1,"api/v1/contract_sub_auth":1,"api/v1/contract_sub_account_list":1,"api/v1/contract_sub_account_info_list":1,"api/v1/contract_sub_account_info":1,"api/v1/contract_sub_position_info":1,"api/v1/contract_financial_record":1,"api/v1/contract_financial_record_exact":1,"api/v1/contract_user_settlement_records":1,"api/v1/contract_order_limit":1,"api/v1/contract_fee":1,"api/v1/contract_transfer_limit":1,"api/v1/contract_position_limit":1,"api/v1/contract_account_position_info":1,"api/v1/contract_master_sub_transfer":1,"api/v1/contract_master_sub_transfer_record":1,"api/v1/contract_available_level_rate":1,"api/v3/contract_financial_record":1,"api/v3/contract_financial_record_exact":1,"api/v1/contract-cancel-after":1,"api/v1/contract_order":1,"api/v1/contract_batchorder":1,"api/v1/contract_cancel":1,"api/v1/contract_cancelall":1,"api/v1/contract_switch_lever_rate":1,"api/v1/lightning_close_position":1,"api/v1/contract_order_info":1,"api/v1/contract_order_detail":1,"api/v1/contract_openorders":1,"api/v1/contract_hisorders":1,"api/v1/contract_hisorders_exact":1,"api/v1/contract_matchresults":1,"api/v1/contract_matchresults_exact":1,"api/v3/contract_hisorders":1,"api/v3/contract_hisorders_exact":1,"api/v3/contract_matchresults":1,"api/v3/contract_matchresults_exact":1,"api/v1/contract_trigger_order":1,"api/v1/contract_trigger_cancel":1,"api/v1/contract_trigger_cancelall":1,"api/v1/contract_trigger_openorders":1,"api/v1/contract_trigger_hisorders":1,"api/v1/contract_tpsl_order":1,"api/v1/contract_tpsl_cancel":1,"api/v1/contract_tpsl_cancelall":1,"api/v1/contract_tpsl_openorders":1,"api/v1/contract_tpsl_hisorders":1,"api/v1/contract_relation_tpsl_order":1,"api/v1/contract_track_order":1,"api/v1/contract_track_cancel":1,"api/v1/contract_track_cancelall":1,"api/v1/contract_track_openorders":1,"api/v1/contract_track_hisorders":1,"swap-api/v1/swap_balance_valuation":1,"swap-api/v1/swap_account_info":1,"swap-api/v1/swap_position_info":1,"swap-api/v1/swap_account_position_info":1,"swap-api/v1/swap_sub_auth":1,"swap-api/v1/swap_sub_account_list":1,"swap-api/v1/swap_sub_account_info_list":1,"swap-api/v1/swap_sub_account_info":1,"swap-api/v1/swap_sub_position_info":1,"swap-api/v1/swap_financial_record":1,"swap-api/v1/swap_financial_record_exact":1,"swap-api/v1/swap_user_settlement_records":1,"swap-api/v1/swap_available_level_rate":1,"swap-api/v1/swap_order_limit":1,"swap-api/v1/swap_fee":1,"swap-api/v1/swap_transfer_limit":1,"swap-api/v1/swap_position_limit":1,"swap-api/v1/swap_master_sub_transfer":1,"swap-api/v1/swap_master_sub_transfer_record":1,"swap-api/v3/swap_financial_record":1,"swap-api/v3/swap_financial_record_exact":1,"swap-api/v1/swap-cancel-after":1,"swap-api/v1/swap_order":1,"swap-api/v1/swap_batchorder":1,"swap-api/v1/swap_cancel":1,"swap-api/v1/swap_cancelall":1,"swap-api/v1/swap_lightning_close_position":1,"swap-api/v1/swap_switch_lever_rate":1,"swap-api/v1/swap_order_info":1,"swap-api/v1/swap_order_detail":1,"swap-api/v1/swap_openorders":1,"swap-api/v1/swap_hisorders":1,"swap-api/v1/swap_hisorders_exact":1,"swap-api/v1/swap_matchresults":1,"swap-api/v1/swap_matchresults_exact":1,"swap-api/v3/swap_matchresults":1,"swap-api/v3/swap_matchresults_exact":1,"swap-api/v3/swap_hisorders":1,"swap-api/v3/swap_hisorders_exact":1,"swap-api/v1/swap_trigger_order":1,"swap-api/v1/swap_trigger_cancel":1,"swap-api/v1/swap_trigger_cancelall":1,"swap-api/v1/swap_trigger_openorders":1,"swap-api/v1/swap_trigger_hisorders":1,"swap-api/v1/swap_tpsl_order":1,"swap-api/v1/swap_tpsl_cancel":1,"swap-api/v1/swap_tpsl_cancelall":1,"swap-api/v1/swap_tpsl_openorders":1,"swap-api/v1/swap_tpsl_hisorders":1,"swap-api/v1/swap_relation_tpsl_order":1,"swap-api/v1/swap_track_order":1,"swap-api/v1/swap_track_cancel":1,"swap-api/v1/swap_track_cancelall":1,"swap-api/v1/swap_track_openorders":1,"swap-api/v1/swap_track_hisorders":1,"linear-swap-api/v1/swap_lever_position_limit":1,"linear-swap-api/v1/swap_cross_lever_position_limit":1,"linear-swap-api/v1/swap_balance_valuation":1,"linear-swap-api/v1/swap_account_info":1,"linear-swap-api/v1/swap_cross_account_info":1,"linear-swap-api/v1/swap_position_info":1,"linear-swap-api/v1/swap_cross_position_info":1,"linear-swap-api/v1/swap_account_position_info":1,"linear-swap-api/v1/swap_cross_account_position_info":1,"linear-swap-api/v1/swap_sub_auth":1,"linear-swap-api/v1/swap_sub_account_list":1,"linear-swap-api/v1/swap_cross_sub_account_list":1,"linear-swap-api/v1/swap_sub_account_info_list":1,"linear-swap-api/v1/swap_cross_sub_account_info_list":1,"linear-swap-api/v1/swap_sub_account_info":1,"linear-swap-api/v1/swap_cross_sub_account_info":1,"linear-swap-api/v1/swap_sub_position_info":1,"linear-swap-api/v1/swap_cross_sub_position_info":1,"linear-swap-api/v1/swap_financial_record":1,"linear-swap-api/v1/swap_financial_record_exact":1,"linear-swap-api/v1/swap_user_settlement_records":1,"linear-swap-api/v1/swap_cross_user_settlement_records":1,"linear-swap-api/v1/swap_available_level_rate":1,"linear-swap-api/v1/swap_cross_available_level_rate":1,"linear-swap-api/v1/swap_order_limit":1,"linear-swap-api/v1/swap_fee":1,"linear-swap-api/v1/swap_transfer_limit":1,"linear-swap-api/v1/swap_cross_transfer_limit":1,"linear-swap-api/v1/swap_position_limit":1,"linear-swap-api/v1/swap_cross_position_limit":1,"linear-swap-api/v1/swap_master_sub_transfer":1,"linear-swap-api/v1/swap_master_sub_transfer_record":1,"linear-swap-api/v1/swap_transfer_inner":1,"linear-swap-api/v3/swap_financial_record":1,"linear-swap-api/v3/swap_financial_record_exact":1,"linear-swap-api/v1/swap_order":1,"linear-swap-api/v1/swap_cross_order":1,"linear-swap-api/v1/swap_batchorder":1,"linear-swap-api/v1/swap_cross_batchorder":1,"linear-swap-api/v1/swap_cancel":1,"linear-swap-api/v1/swap_cross_cancel":1,"linear-swap-api/v1/swap_cancelall":1,"linear-swap-api/v1/swap_cross_cancelall":1,"linear-swap-api/v1/swap_switch_lever_rate":1,"linear-swap-api/v1/swap_cross_switch_lever_rate":1,"linear-swap-api/v1/swap_lightning_close_position":1,"linear-swap-api/v1/swap_cross_lightning_close_position":1,"linear-swap-api/v1/swap_order_info":1,"linear-swap-api/v1/swap_cross_order_info":1,"linear-swap-api/v1/swap_order_detail":1,"linear-swap-api/v1/swap_cross_order_detail":1,"linear-swap-api/v1/swap_openorders":1,"linear-swap-api/v1/swap_cross_openorders":1,"linear-swap-api/v1/swap_hisorders":1,"linear-swap-api/v1/swap_cross_hisorders":1,"linear-swap-api/v1/swap_hisorders_exact":1,"linear-swap-api/v1/swap_cross_hisorders_exact":1,"linear-swap-api/v1/swap_matchresults":1,"linear-swap-api/v1/swap_cross_matchresults":1,"linear-swap-api/v1/swap_matchresults_exact":1,"linear-swap-api/v1/swap_cross_matchresults_exact":1,"linear-swap-api/v1/linear-cancel-after":1,"linear-swap-api/v1/swap_switch_position_mode":1,"linear-swap-api/v1/swap_cross_switch_position_mode":1,"linear-swap-api/v3/swap_matchresults":1,"linear-swap-api/v3/swap_cross_matchresults":1,"linear-swap-api/v3/swap_matchresults_exact":1,"linear-swap-api/v3/swap_cross_matchresults_exact":1,"linear-swap-api/v3/swap_hisorders":1,"linear-swap-api/v3/swap_cross_hisorders":1,"linear-swap-api/v3/swap_hisorders_exact":1,"linear-swap-api/v3/swap_cross_hisorders_exact":1,"linear-swap-api/v3/fix_position_margin_change":1,"linear-swap-api/v3/swap_switch_account_type":1,"linear-swap-api/v3/linear_swap_fee_switch":1,"linear-swap-api/v1/swap_trigger_order":1,"linear-swap-api/v1/swap_cross_trigger_order":1,"linear-swap-api/v1/swap_trigger_cancel":1,"linear-swap-api/v1/swap_cross_trigger_cancel":1,"linear-swap-api/v1/swap_trigger_cancelall":1,"linear-swap-api/v1/swap_cross_trigger_cancelall":1,"linear-swap-api/v1/swap_trigger_openorders":1,"linear-swap-api/v1/swap_cross_trigger_openorders":1,"linear-swap-api/v1/swap_trigger_hisorders":1,"linear-swap-api/v1/swap_cross_trigger_hisorders":1,"linear-swap-api/v1/swap_tpsl_order":1,"linear-swap-api/v1/swap_cross_tpsl_order":1,"linear-swap-api/v1/swap_tpsl_cancel":1,"linear-swap-api/v1/swap_cross_tpsl_cancel":1,"linear-swap-api/v1/swap_tpsl_cancelall":1,"linear-swap-api/v1/swap_cross_tpsl_cancelall":1,"linear-swap-api/v1/swap_tpsl_openorders":1,"linear-swap-api/v1/swap_cross_tpsl_openorders":1,"linear-swap-api/v1/swap_tpsl_hisorders":1,"linear-swap-api/v1/swap_cross_tpsl_hisorders":1,"linear-swap-api/v1/swap_relation_tpsl_order":1,"linear-swap-api/v1/swap_cross_relation_tpsl_order":1,"linear-swap-api/v1/swap_track_order":1,"linear-swap-api/v1/swap_cross_track_order":1,"linear-swap-api/v1/swap_track_cancel":1,"linear-swap-api/v1/swap_cross_track_cancel":1,"linear-swap-api/v1/swap_track_cancelall":1,"linear-swap-api/v1/swap_cross_track_cancelall":1,"linear-swap-api/v1/swap_track_openorders":1,"linear-swap-api/v1/swap_cross_track_openorders":1,"linear-swap-api/v1/swap_track_hisorders":1,"linear-swap-api/v1/swap_cross_track_hisorders":1}}}},fees:{trading:{feeSide:"get",tierBased:!1,percentage:!0,maker:this.parseNumber("0.002"),taker:this.parseNumber("0.002")}},exceptions:{broad:{"contract is restricted of closing positions on API.  Please contact customer service":s.OnMaintenance,maintain:s.OnMaintenance,"API key has no permission":s.PermissionDenied},exact:{403:s.AuthenticationError,1010:s.AccountNotEnabled,1003:s.AuthenticationError,1013:s.BadSymbol,1017:s.OrderNotFound,1034:s.InvalidOrder,1036:s.InvalidOrder,1039:s.InvalidOrder,1041:s.InvalidOrder,1047:s.InsufficientFunds,1048:s.InsufficientFunds,1051:s.InvalidOrder,1066:s.BadSymbol,1067:s.InvalidOrder,1094:s.InvalidOrder,1220:s.AccountNotEnabled,1303:s.BadRequest,1461:s.InvalidOrder,4007:s.BadRequest,"bad-request":s.BadRequest,"validation-format-error":s.BadRequest,"validation-constraints-required":s.BadRequest,"base-date-limit-error":s.BadRequest,"api-not-support-temp-addr":s.PermissionDenied,timeout:s.RequestTimeout,"gateway-internal-error":s.ExchangeNotAvailable,"account-frozen-balance-insufficient-error":s.InsufficientFunds,"invalid-amount":s.InvalidOrder,"order-limitorder-amount-min-error":s.InvalidOrder,"order-limitorder-amount-max-error":s.InvalidOrder,"order-marketorder-amount-min-error":s.InvalidOrder,"order-limitorder-price-min-error":s.InvalidOrder,"order-limitorder-price-max-error":s.InvalidOrder,"order-stop-order-hit-trigger":s.InvalidOrder,"order-value-min-error":s.InvalidOrder,"order-invalid-price":s.InvalidOrder,"order-holding-limit-failed":s.InvalidOrder,"order-orderprice-precision-error":s.InvalidOrder,"order-etp-nav-price-max-error":s.InvalidOrder,"order-orderstate-error":s.OrderNotFound,"order-queryorder-invalid":s.OrderNotFound,"order-update-error":s.ExchangeNotAvailable,"api-signature-check-failed":s.AuthenticationError,"api-signature-not-valid":s.AuthenticationError,"base-record-invalid":s.OrderNotFound,"base-symbol-trade-disabled":s.BadSymbol,"base-symbol-error":s.BadSymbol,"system-maintenance":s.OnMaintenance,"base-request-exceed-frequency-limit":s.RateLimitExceeded,"invalid symbol":s.BadSymbol,"symbol trade not open now":s.BadSymbol,"require-symbol":s.BadSymbol,"invalid-address":s.BadRequest,"base-currency-chain-error":s.BadRequest,"dw-insufficient-balance":s.InsufficientFunds,"base-withdraw-fee-error":s.BadRequest,"dw-withdraw-min-limit":s.BadRequest,"request limit":s.RateLimitExceeded}},precisionMode:n.kb,options:{fetchMarkets:{types:{spot:!0,linear:!0,inverse:!0}},timeDifference:0,adjustForTimeDifference:!1,fetchOHLCV:{useHistoricalEndpointForSpot:!0},withdraw:{includeFee:!1},defaultType:"spot",defaultSubType:"linear",defaultNetwork:"ERC20",defaultNetworks:{ETH:"ERC20",BTC:"BTC",USDT:"TRC20"},networks:{TRC20:"TRX",BTC:"BTC",ERC20:"ETH",SOL:"SOLANA",HRC20:"HECO",BEP20:"BSC",XMR:"XMR",LTC:"LTC",XRP:"XRP",XLM:"XLM",CRONOS:"CRO",CRO:"CRO",GLMR:"GLMR",POLYGON:"MATIC",MATIC:"MATIC",BTT:"BTT",CUBE:"CUBE",IOST:"IOST",NEO:"NEO",KLAY:"KLAY",EOS:"EOS",THETA:"THETA",NAS:"NAS",NULS:"NULS",QTUM:"QTUM",FTM:"FTM",CELO:"CELO",DOGE:"DOGE",DOGECHAIN:"DOGECHAIN",NEAR:"NEAR",STEP:"STEP",BITCI:"BITCI",CARDANO:"ADA",ADA:"ADA",ETC:"ETC",LUK:"LUK",MINEPLEX:"MINEPLEX",DASH:"DASH",ZEC:"ZEC",IOTA:"IOTA",NEON3:"NEON3",XEM:"XEM",HC:"HC",LSK:"LSK",DCR:"DCR",BTG:"BTG",STEEM:"STEEM",BTS:"BTS",ICX:"ICX",WAVES:"WAVES",CMT:"CMT",BTM:"BTM",VET:"VET",XZC:"XZC",ACT:"ACT",SMT:"SMT",BCD:"BCD",WAX:"WAX1",WICC:"WICC",ELF:"ELF",ZIL:"ZIL",ELA:"ELA",BCX:"BCX",SBTC:"SBTC",BIFI:"BIFI",CTXC:"CTXC",WAN:"WAN",POLYX:"POLYX",PAI:"PAI",WTC:"WTC",DGB:"DGB",XVG:"XVG",AAC:"AAC",AE:"AE",SEELE:"SEELE",BCV:"BCV",GRS:"GRS",ARDR:"ARDR",NANO:"NANO",ZEN:"ZEN",RBTC:"RBTC",BSV:"BSV",GAS:"GAS",XTZ:"XTZ",LAMB:"LAMB",CVNT1:"CVNT1",DOCK:"DOCK",SC:"SC",KMD:"KMD",ETN:"ETN",TOP:"TOP",IRIS:"IRIS",UGAS:"UGAS",TT:"TT",NEWTON:"NEWTON",VSYS:"VSYS",FSN:"FSN",BHD:"BHD",ONE:"ONE",EM:"EM",CKB:"CKB",EOSS:"EOSS",HIVE:"HIVE",RVN:"RVN",DOT:"DOT",KSM:"KSM",BAND:"BAND",OEP4:"OEP4",NBS:"NBS",FIS:"FIS",AR:"AR",HBAR:"HBAR",FIL:"FIL",MASS:"MASS",KAVA:"KAVA",XYM:"XYM",ENJ:"ENJ",CRUST:"CRUST",ICP:"ICP",CSPR:"CSPR",FLOW:"FLOW",IOTX:"IOTX",LAT:"LAT",APT:"APT",XCH:"XCH",MINA:"MINA",XEC:"ECASH",XPRT:"XPRT",CCA:"ACA",AOTI:"COTI",AKT:"AKT",ARS:"ARS",ASTR:"ASTR",AZERO:"AZERO",BLD:"BLD",BRISE:"BRISE",CORE:"CORE",DESO:"DESO",DFI:"DFI",EGLD:"EGLD",ERG:"ERG",ETHF:"ETHFAIR",ETHW:"ETHW",EVMOS:"EVMOS",FIO:"FIO",FLR:"FLR",FINSCHIA:"FINSCHIA",KMA:"KMA",KYVE:"KYVE",MEV:"MEV",MOVR:"MOVR",NODL:"NODL",OAS:"OAS",OSMO:"OSMO",PAYCOIN:"PAYCOIN",POKT:"POKT",PYG:"PYG",REI:"REI",SCRT:"SCRT",SDN:"SDN",SEI:"SEI",SGB:"SGB",SUI:"SUI",SXP:"SOLAR",SYS:"SYS",TENET:"TENET",TON:"TON",UNQ:"UNQ",UYU:"UYU",WEMIX:"WEMIX",XDC:"XDC",XPLA:"XPLA"},fetchOrdersByStatesMethod:"spot_private_get_v1_order_orders",createMarketBuyOrderRequiresPrice:!0,language:"en-US",broker:{id:"AA03022abc"},accountsByType:{spot:"pro",funding:"pro",future:"futures"},accountsById:{spot:"spot",margin:"margin",otc:"otc",point:"point","super-margin":"super-margin",investment:"investment",borrow:"borrow","grid-trading":"grid-trading","deposit-earning":"deposit-earning","otc-options":"otc-options"},typesByAccount:{pro:"spot",futures:"future"},spot:{stopOrderTypes:{"stop-limit":!0,"buy-stop-limit":!0,"sell-stop-limit":!0,"stop-limit-fok":!0,"buy-stop-limit-fok":!0,"sell-stop-limit-fok":!0},limitOrderTypes:{limit:!0,"buy-limit":!0,"sell-limit":!0,ioc:!0,"buy-ioc":!0,"sell-ioc":!0,"limit-maker":!0,"buy-limit-maker":!0,"sell-limit-maker":!0,"stop-limit":!0,"buy-stop-limit":!0,"sell-stop-limit":!0,"limit-fok":!0,"buy-limit-fok":!0,"sell-limit-fok":!0,"stop-limit-fok":!0,"buy-stop-limit-fok":!0,"sell-stop-limit-fok":!0}}},commonCurrencies:{NGL:"GFNGL",GET:"THEMIS",GTC:"GAMECOM",HIT:"HITCHAIN",PNT:"PENTA",SBTC:"SUPERBITCOIN",SOUL:"SOULSAVER",BIFI:"BITCOINFILE",FUD:"FTX Users Debt"},features:{spot:{sandbox:!0,createOrder:{marginMode:!0,triggerPrice:!0,triggerDirection:!0,triggerPriceType:void 0,stopLossPrice:!1,takeProfitPrice:!1,attachedStopLossTakeProfit:void 0,timeInForce:{IOC:!0,FOK:!0,PO:!0,GTD:!1},hedged:!1,trailing:!1,iceberg:!1,selfTradePrevention:!0,leverage:!0,marketBuyByCost:!0,marketBuyRequiresPrice:!0},createOrders:{max:10},fetchMyTrades:{marginMode:!1,limit:500,daysBack:120,untilDays:2},fetchOrder:{marginMode:!1,trigger:!1,trailing:!1},fetchOpenOrders:{marginMode:!1,trigger:!0,trailing:!1,limit:500},fetchOrders:{marginMode:!1,trigger:!0,trailing:!1,limit:500,untilDays:2,daysBack:180},fetchClosedOrders:{marginMode:!1,trigger:!0,trailing:!1,untilDays:2,limit:500,daysBack:180,daysBackCanceled:1/12},fetchOHLCV:{limit:1e3}},forDerivatives:{extends:"spot",createOrder:{stopLossPrice:!0,takeProfitPrice:!0,trailing:!0,hedged:!0},createOrders:{max:25},fetchOrder:{marginMode:!0},fetchOpenOrders:{marginMode:!0,trigger:!1,trailing:!1,limit:50},fetchOrders:{marginMode:!0,trigger:!1,trailing:!1,limit:50,daysBack:90},fetchClosedOrders:{marginMode:!0,trigger:!1,trailing:!1,untilDays:2,limit:50,daysBack:90,daysBackCanceled:1/12},fetchOHLCV:{limit:2e3}},swap:{linear:{extends:"forDerivatives"},inverse:{extends:"forDerivatives"}},future:{linear:{extends:"forDerivatives"},inverse:{extends:"forDerivatives"}}}})}async fetchStatus(e={}){let t,i,a,s,r;await this.loadMarkets(),[t,e]=this.handleMarketTypeAndParams("fetchStatus",void 0,e);let n=this.handleOption("fetchStatus","enableForContracts",!1);if("spot"!==t&&n){let a=this.safeString(e,"subType",this.options.defaultSubType);"swap"===t?"linear"===a?i=await this.statusPublicSwapLinearGetApiV2SummaryJson():"inverse"===a&&(i=await this.statusPublicSwapInverseGetApiV2SummaryJson()):"future"===t?"linear"===a?i=await this.statusPublicFutureLinearGetApiV2SummaryJson():"inverse"===a&&(i=await this.statusPublicFutureInverseGetApiV2SummaryJson()):"contract"===t&&(i=await this.contractPublicGetHeartbeat())}else"spot"===t&&(i=await this.statusPublicSpotGetApiV2SummaryJson());if("contract"===t){let e=this.safeString(i,"status");a=void 0===e?void 0:"ok"===e?"ok":"maintenance",s=this.safeString(i,"ts")}else{let e=this.safeValue(i,"status",{});a="none"===this.safeString(e,"indicator")?"ok":"maintenance";let t=this.safeValue(i,"page",{}),n=this.safeString(t,"updated_at");s=this.parse8601(n),r=this.safeString(t,"url")}return{status:a,updated:s,eta:void 0,url:r,info:i}}async fetchTime(e={}){let t;let i=this.safeValue(this.options,"fetchTime",{}),a=this.safeString(this.options,"defaultType","spot"),s=this.safeString(i,"type",a);return t="future"===(s=this.safeString(e,"type",s))||"swap"===s?await this.contractPublicGetApiV1Timestamp(e):await this.spotPublicGetV1CommonTimestamp(e),this.safeInteger2(t,"data","ts")}parseTradingFee(e,t){let i=this.safeString(e,"symbol");return{info:e,symbol:this.safeSymbol(i,t),maker:this.safeNumber(e,"actualMakerRate"),taker:this.safeNumber(e,"actualTakerRate"),percentage:void 0,tierBased:void 0}}async fetchTradingFee(e,t={}){await this.loadMarkets();let i=this.market(e),a={symbols:i.id},s=await this.spotPrivateGetV2ReferenceTransactFeeRate(this.extend(a,t)),r=this.safeValue(s,"data",[]),n=this.safeValue(r,0,{});return this.parseTradingFee(n,i)}async fetchTradingLimits(e,t={}){await this.loadMarkets(),void 0===e&&(e=this.symbols);let i={};for(let a=0;a<e.length;a++){let s=e[a];i[s]=await this.fetchTradingLimitsById(this.marketId(s),t)}return i}async fetchTradingLimitsById(e,t={}){let i=await this.spotPublicGetV1CommonExchange(this.extend({symbol:e},t));return this.parseTradingLimits(this.safeValue(i,"data",{}))}parseTradingLimits(e,t,i={}){return{info:e,limits:{amount:{min:this.safeNumber(e,"limit-order-must-greater-than"),max:this.safeNumber(e,"limit-order-must-less-than")}}}}costToPrecision(e,t){return this.decimalToPrecision(t,n.R3,this.markets[e].precision.cost,this.precisionMode)}async fetchMarkets(e={}){let t;this.options.adjustForTimeDifference&&await this.loadTimeDifference(),[t,e]=this.handleOptionAndParams(e,"fetchMarkets","types",{});let i=[],a=[],s=Object.keys(t);for(let i=0;i<s.length;i++){let r=s[i];this.safeBool(t,r)&&("spot"===r?a.push(this.fetchMarketsByTypeAndSubType("spot",void 0,e)):"linear"===r?a.push(this.fetchMarketsByTypeAndSubType(void 0,"linear",e)):"inverse"===r&&(a.push(this.fetchMarketsByTypeAndSubType("swap","inverse",e)),a.push(this.fetchMarketsByTypeAndSubType("future","inverse",e))))}a=await Promise.all(a);for(let e=0;e<a.length;e++)i=this.arrayConcat(i,a[e]);return i}async fetchMarketsByTypeAndSubType(e,t,i={}){let a;let n={};"spot"===e?a=await this.spotPublicGetV1CommonSymbols(this.extend(n,i)):"linear"===t?(n.business_type="all",a=await this.contractPublicGetLinearSwapApiV1SwapContractInfo(this.extend(n,i))):"inverse"===t&&("future"===e?a=await this.contractPublicGetApiV1ContractContractInfo(this.extend(n,i)):"swap"===e&&(a=await this.contractPublicGetSwapApiV1SwapContractInfo(this.extend(n,i))));let o=this.safeList(a,"data",[]);if(o.length<1)throw new s.OperationFailed(this.id+" fetchMarkets() returned an empty response: "+this.json(a));let c=[];for(let t=0;t<o.length;t++){let i,a,s,n,d,p,l,h,u,f,w,m,v,g,_;let y=o[t],S="contract_code"in y,P=!S,b=!1,k=!1;if(S){d=(n=this.safeString(y,"contract_code")).toLowerCase();let t=this.safeString(y,"delivery_date"),r=this.safeString(y,"business_type");if(b=!(k=void 0!==t),l=!(p=void 0!==r),b){e="swap";let t=n.split("-");i=this.safeStringLower(y,"symbol"),a=this.safeStringLower(t,1),s=l?i:a}else if(k){if(e="future",i=this.safeStringLower(y,"symbol"),l)a="USD",s=i;else{let e=this.safeString(y,"pair").split("-");s=a=this.safeStringLower(e,1)}}}else e="spot",d=(n=(i=this.safeString(y,"base-currency"))+(a=this.safeString(y,"quote-currency"))).toLowerCase();let A=this.safeCurrencyCode(i),O=this.safeCurrencyCode(a),T=this.safeCurrencyCode(s),C=A+"/"+O;S&&(l?C+=":"+A:p&&(C+=":"+O),k&&(h=this.safeInteger(y,"delivery_time"),C+="-"+this.yymmdd(h)));let x=this.safeNumber(y,"contract_size"),M=this.safeNumber(y,"min-order-value"),V=this.safeNumber(y,"max-order-amt"),I=this.safeNumber(y,"min-order-amt");S&&(p?I=x:l&&(M=x)),P?(u=this.parseNumber(this.parsePrecision(this.safeString(y,"price-precision"))),f=this.parseNumber(this.parsePrecision(this.safeString(y,"amount-precision"))),w=this.parseNumber(this.parsePrecision(this.safeString(y,"value-precision"))),m=this.parseNumber("0.002"),v=this.parseNumber("0.002"),g="online"===this.safeString(y,"state")):(u=this.safeNumber(y,"price_tick"),f=this.parseNumber("1"),m=this.parseNumber("0.0002"),v=this.parseNumber("0.0005"),g=1===this.safeInteger(y,"contract_status"));let L=this.safeString(y,"leverage-ratio","1"),N=this.safeString(y,"super-margin-leverage-ratio","1"),B=r.Y.stringGt(L,"1")||r.Y.stringGt(N,"1"),R=this.safeString(y,"create_date");if(void 0!==R){let e=this.stringToCharsArray(R);R=e[0]+e[1]+e[2]+e[3]+"-"+e[4]+e[5]+"-"+e[6]+e[7]+" 00:00:00",_=this.parse8601(R)}c.push({id:n,lowercaseId:d,symbol:C,base:A,quote:O,settle:T,baseId:i,quoteId:a,settleId:s,type:e,spot:P,margin:P&&B,swap:b,future:k,option:!1,active:g,contract:S,linear:p,inverse:l,taker:v,maker:m,contractSize:x,expiry:h,expiryDatetime:this.iso8601(h),strike:void 0,optionType:void 0,precision:{amount:f,price:u,cost:w},limits:{leverage:{min:this.parseNumber("1"),max:this.parseNumber(L),superMax:this.parseNumber(N)},amount:{min:I,max:V},price:{min:void 0,max:void 0},cost:{min:M,max:void 0}},created:_,info:y})}return c}tryGetSymbolFromFutureMarkets(e){if(e in this.markets)return e;"futureMarketIdsForSymbols"in this.options||(this.options.futureMarketIdsForSymbols={});let t=this.safeDict(this.options,"futureMarketIdsForSymbols",{});if(e in t)return t[e];let i=this.filterBy(this.markets,"future",!0),a={this_week:"CW",next_week:"NW",quarter:"CQ",next_quarter:"NQ"};for(let t=0;t<i.length;t++){let s=i[t],r=this.safeValue(s,"info",{}),n=a[this.safeString(r,"contract_type")];if((s.linear?s.base+"-"+s.quote+"-"+n:s.base+"_"+n)===e){let t=s.symbol;return this.options.futureMarketIdsForSymbols[e]=t,t}}return this.options.futureMarketIdsForSymbols[e]=e,e}parseTicker(e,t){let i,a,s,r;let n=this.safeString2(e,"symbol","contract_code"),o=this.safeSymbol(n,t);o=this.tryGetSymbolFromFutureMarkets(o);let c=this.safeInteger2(e,"ts","quoteTime");"bid"in e&&(Array.isArray(e.bid)?(i=this.safeString(e.bid,0),a=this.safeString(e.bid,1)):(i=this.safeString(e,"bid"),a=this.safeString(e,"bidSize"))),"ask"in e&&(Array.isArray(e.ask)?(s=this.safeString(e.ask,0),r=this.safeString(e.ask,1)):(s=this.safeString(e,"ask"),r=this.safeString(e,"askSize")));let d=this.safeString(e,"open"),p=this.safeString(e,"close"),l=this.safeString(e,"amount"),h=this.safeString(e,"vol");return this.safeTicker({symbol:o,timestamp:c,datetime:this.iso8601(c),high:this.safeString(e,"high"),low:this.safeString(e,"low"),bid:i,bidVolume:a,ask:s,askVolume:r,vwap:void 0,open:d,close:p,last:p,previousClose:void 0,change:void 0,percentage:void 0,average:void 0,baseVolume:l,quoteVolume:h,info:e},t)}async fetchTicker(e,t={}){let i;await this.loadMarkets();let a=this.market(e),s={};a.linear?(s.contract_code=a.id,i=await this.contractPublicGetLinearSwapExMarketDetailMerged(this.extend(s,t))):a.inverse?a.future?(s.symbol=a.id,i=await this.contractPublicGetMarketDetailMerged(this.extend(s,t))):a.swap&&(s.contract_code=a.id,i=await this.contractPublicGetSwapExMarketDetailMerged(this.extend(s,t))):(s.symbol=a.id,i=await this.spotPublicGetMarketDetailMerged(this.extend(s,t)));let r=this.safeValue(i,"tick",{}),n=this.parseTicker(r,a),o=this.safeInteger(i,"ts");return n.timestamp=o,n.datetime=this.iso8601(o),n}async fetchTickers(e,t={}){let i,a,r,n;await this.loadMarkets(),e=this.marketSymbols(e);let o=this.safeString(e,0);void 0!==o&&(i=this.market(o));let c="subType"in t||"business_type"in t;[a,t]=this.handleMarketTypeAndParams("fetchTickers",i,t),[r,t]=this.handleSubTypeAndParams("fetchTickers",i,t);let d={},p="future"===a,l="swap"===a;if("spot"!==a||c){if("linear"===r)p?d.business_type="futures":l?d.business_type="swap":d.business_type="all",n=await this.contractPublicGetLinearSwapExMarketDetailBatchMerged(this.extend(d,t));else if("inverse"===r){if(p)n=await this.contractPublicGetMarketDetailBatchMerged(this.extend(d,t));else if(l)n=await this.contractPublicGetSwapExMarketDetailBatchMerged(this.extend(d,t));else throw new s.NotSupported(this.id+' fetchTickers() you have to set params["type"] to either "swap" or "future" for inverse contracts')}else throw new s.NotSupported(this.id+' fetchTickers() you have to set params["subType"] to either "linear" or "inverse" for contracts')}else n=await this.spotPublicGetMarketTickers(this.extend(d,t));let h=this.safeList2(n,"data","ticks",[]),u=this.parseTickers(h,e,t);return this.filterByArrayTickers(u,"symbol",e)}async fetchLastPrices(e,t={}){let i,a,r;await this.loadMarkets(),e=this.marketSymbols(e);let n=this.getMarketFromSymbols(e);if([a,t]=this.handleSubTypeAndParams("fetchLastPrices",n,t),[i,t]=this.handleMarketTypeAndParams("fetchLastPrices",n,t),("swap"===i||"future"===i)&&"linear"===a)r=await this.contractPublicGetLinearSwapExMarketTrade(t);else if("swap"===i&&"inverse"===a)r=await this.contractPublicGetSwapExMarketTrade(t);else if("future"===i&&"inverse"===a)r=await this.contractPublicGetMarketTrade(t);else throw new s.NotSupported(this.id+" fetchLastPrices() does not support "+i+" markets yet");let o=this.safeValue(r,"tick",{}),c=this.safeList(o,"data",[]);return this.parseLastPrices(c,e)}parseLastPrice(e,t){let i=this.safeString2(e,"symbol","contract_code");t=this.safeMarket(i,t);let a=this.safeNumber(e,"price"),s=this.safeString(e,"direction");return{symbol:t.symbol,timestamp:void 0,datetime:void 0,price:a,side:s,info:e}}async fetchOrderBook(e,t,i={}){let a;await this.loadMarkets();let r=this.market(e),n={type:"step0"};if(r.linear)n.contract_code=r.id,a=await this.contractPublicGetLinearSwapExMarketDepth(this.extend(n,i));else if(r.inverse)r.future?(n.symbol=r.id,a=await this.contractPublicGetMarketDepth(this.extend(n,i))):r.swap&&(n.contract_code=r.id,a=await this.contractPublicGetSwapExMarketDepth(this.extend(n,i)));else{if(void 0!==t){if(5!==t&&10!==t&&20!==t&&150!==t)throw new s.BadRequest(this.id+" fetchOrderBook() limit argument must be undefined, 5, 10, 20, or 150, default is 150");150!==t&&(n.depth=t)}n.symbol=r.id,a=await this.spotPublicGetMarketDepth(this.extend(n,i))}if("tick"in a){if(!a.tick)throw new s.BadSymbol(this.id+" fetchOrderBook() returned empty response: "+this.json(a));let t=this.safeValue(a,"tick"),i=this.safeInteger(t,"ts",this.safeInteger(a,"ts")),r=this.parseOrderBook(t,e,i);return r.nonce=this.safeInteger(t,"version"),r}throw new s.ExchangeError(this.id+" fetchOrderBook() returned unrecognized response: "+this.json(a))}parseTrade(e,t){let i;let a=this.safeString2(e,"contract_code","symbol"),s=(t=this.safeMarket(a,t)).symbol,n=this.safeInteger2(e,"ts","created-at");n=this.safeInteger2(e,"created_at","create_date",n);let o=this.safeString2(e,"order-id","order_id"),c=this.safeString(e,"direction"),d=this.safeString(e,"type");if(void 0!==d){let e=d.split("-");c=e[0],d=e[1]}let p=this.safeStringLower(e,"role"),l=this.safeString2(e,"price","trade_price"),h=this.safeString2(e,"filled-amount","amount");h=this.safeString(e,"trade_volume",h);let u=this.safeString(e,"trade_turnover"),f=this.safeString(e,"filled-fees");void 0===f&&(f=r.Y.stringNeg(this.safeString(e,"trade_fee")));let w=this.safeString2(e,"fee-currency","fee_asset"),m=this.safeCurrencyCode(w),v=this.safeString(e,"filled-points");if(void 0!==v&&(void 0===f||r.Y.stringEquals(f,"0"))){let t=this.safeString(e,"fee-deduct-currency");void 0!==t&&(f=v,m=this.safeCurrencyCode(t))}void 0!==f&&(i={cost:f,currency:m});let g=this.safeStringN(e,["trade_id","trade-id","id"]);return this.safeTrade({id:g,info:e,order:o,timestamp:n,datetime:this.iso8601(n),symbol:s,type:d,side:c,takerOrMaker:p,price:l,amount:h,cost:u,fee:i},t)}async fetchOrderTrades(e,t,i,a,r={}){let n,o;if(void 0!==t&&(n=this.market(t)),[o,r]=this.handleMarketTypeAndParams("fetchOrderTrades",n,r),"spot"!==o)throw new s.NotSupported(this.id+" fetchOrderTrades() is only supported for spot markets");return await this.fetchSpotOrderTrades(e,t,i,a,r)}async fetchSpotOrderTrades(e,t,i,a,s={}){await this.loadMarkets();let r=await this.spotPrivateGetV1OrderOrdersOrderIdMatchresults(this.extend({"order-id":e},s));return this.parseTrades(r.data,void 0,i,a)}async fetchMyTrades(e,t,i,a={}){let r,n,o;await this.loadMarkets();let c=!1;if([c,a]=this.handleOptionAndParams(a,"fetchMyTrades","paginate"),c)return await this.fetchPaginatedCallDynamic("fetchMyTrades",e,t,i,a);void 0!==e&&(r=this.market(e)),[n,a]=this.handleMarketTypeAndParams("fetchMyTrades",r,a);let d={};if("spot"===n)void 0!==e&&(r=this.market(e),d.symbol=r.id),void 0!==i&&(d.size=i),void 0!==t&&(d["start-time"]=t),[d,a]=this.handleUntilOption("end-time",d,a),o=await this.spotPrivateGetV1OrderMatchresults(this.extend(d,a));else{if(void 0===e)throw new s.ArgumentsRequired(this.id+" fetchMyTrades() requires a symbol argument");if(d.contract=r.id,d.trade_type=0,void 0!==t&&(d.start_time=t),[d,a]=this.handleUntilOption("end_time",d,a),void 0!==i&&(d.page_size=i),r.linear){let e;[e,a]=this.handleMarginModeAndParams("fetchMyTrades",a),"isolated"===(e=void 0===e?"cross":e)?o=await this.contractPrivatePostLinearSwapApiV3SwapMatchresultsExact(this.extend(d,a)):"cross"===e&&(o=await this.contractPrivatePostLinearSwapApiV3SwapCrossMatchresultsExact(this.extend(d,a)))}else if(r.inverse){if("future"===n)d.symbol=r.settleId,o=await this.contractPrivatePostApiV3ContractMatchresultsExact(this.extend(d,a));else if("swap"===n)o=await this.contractPrivatePostSwapApiV3SwapMatchresultsExact(this.extend(d,a));else throw new s.NotSupported(this.id+" fetchMyTrades() does not support "+n+" markets")}}let p=this.safeValue(o,"data");return Array.isArray(p)||(p=this.safeValue(p,"trades")),this.parseTrades(p,r,t,i)}async fetchTrades(e,t,i=1e3,a={}){let s;await this.loadMarkets();let r=this.market(e),n={};void 0!==i&&(n.size=Math.min(i,2e3)),r.future?r.inverse?(n.symbol=r.id,s=await this.contractPublicGetMarketHistoryTrade(this.extend(n,a))):r.linear&&(n.contract_code=r.id,s=await this.contractPublicGetLinearSwapExMarketHistoryTrade(this.extend(n,a))):r.swap?(n.contract_code=r.id,r.inverse?s=await this.contractPublicGetSwapExMarketHistoryTrade(this.extend(n,a)):r.linear&&(s=await this.contractPublicGetLinearSwapExMarketHistoryTrade(this.extend(n,a)))):(n.symbol=r.id,s=await this.spotPublicGetMarketHistoryTrade(this.extend(n,a)));let o=this.safeValue(s,"data",[]),c=[];for(let e=0;e<o.length;e++){let t=this.safeValue(o[e],"data",[]);for(let e=0;e<t.length;e++){let i=this.parseTrade(t[e],r);c.push(i)}}return c=this.sortBy(c,"timestamp"),this.filterBySymbolSinceLimit(c,r.symbol,t,i)}parseOHLCV(e,t){return[this.safeTimestamp(e,"id"),this.safeNumber(e,"open"),this.safeNumber(e,"high"),this.safeNumber(e,"low"),this.safeNumber(e,"close"),this.safeNumber(e,"amount")]}async fetchOHLCV(e,t="1m",i,a,r={}){let n,o;await this.loadMarkets();let c=!1;if([c,r]=this.handleOptionAndParams(r,"fetchOHLCV","paginate"),c)return await this.fetchPaginatedCallDeterministic("fetchOHLCV",e,i,a,t,r,1e3);let d=this.market(e),p={period:this.safeString(this.timeframes,t,t)},l=this.safeStringN(r,["priceType","price"]);r=this.omit(r,["priceType","price"]),[n,r]=this.handleParamInteger(r,"until");let h=void 0!==n?this.parseToInt(n/1e3):void 0;if(d.contract&&(void 0!==a?p.size=Math.min(a,2e3):a=2e3,void 0===l)){let e;let s=this.parseTimeframe(t);if(void 0===i){let t=this.seconds();p.from=t-s*(a-1),e=t}else{let t=this.parseToInt(i/1e3);p.from=t,e=this.sum(t,s*(a-1))}p.to=void 0!==h?h:e}if(d.future){if(d.inverse){if(p.symbol=d.id,"mark"===l)o=await this.contractPublicGetIndexMarketHistoryMarkPriceKline(this.extend(p,r));else if("index"===l)o=await this.contractPublicGetIndexMarketHistoryIndex(this.extend(p,r));else if("premiumIndex"===l)throw new s.BadRequest(this.id+" "+d.type+" has no api endpoint for "+l+" kline data");else o=await this.contractPublicGetMarketHistoryKline(this.extend(p,r))}else if(d.linear){if(p.contract_code=d.id,"mark"===l)o=await this.contractPublicGetIndexMarketHistoryLinearSwapMarkPriceKline(this.extend(p,r));else if("index"===l)throw new s.BadRequest(this.id+" "+d.type+" has no api endpoint for "+l+" kline data");else o="premiumIndex"===l?await this.contractPublicGetIndexMarketHistoryLinearSwapPremiumIndexKline(this.extend(p,r)):await this.contractPublicGetLinearSwapExMarketHistoryKline(this.extend(p,r))}}else if(d.swap){if(p.contract_code=d.id,d.inverse){if("mark"===l)o=await this.contractPublicGetIndexMarketHistorySwapMarkPriceKline(this.extend(p,r));else if("index"===l)throw new s.BadRequest(this.id+" "+d.type+" has no api endpoint for "+l+" kline data");else o="premiumIndex"===l?await this.contractPublicGetIndexMarketHistorySwapPremiumIndexKline(this.extend(p,r)):await this.contractPublicGetSwapExMarketHistoryKline(this.extend(p,r))}else if(d.linear){if("mark"===l)o=await this.contractPublicGetIndexMarketHistoryLinearSwapMarkPriceKline(this.extend(p,r));else if("index"===l)throw new s.BadRequest(this.id+" "+d.type+" has no api endpoint for "+l+" kline data");else o="premiumIndex"===l?await this.contractPublicGetIndexMarketHistoryLinearSwapPremiumIndexKline(this.extend(p,r)):await this.contractPublicGetLinearSwapExMarketHistoryKline(this.extend(p,r))}}else{let e;p.symbol=d.id,[e,r]=this.handleOptionAndParams(r,"fetchOHLCV","useHistoricalEndpointForSpot",!0),e?(void 0!==i&&(p.from=this.parseToInt(i/1e3)),void 0!==h&&(p.to=h),void 0!==a&&(p.size=Math.min(1e3,a)),o=await this.spotPublicGetMarketHistoryCandles(this.extend(p,r))):(void 0!==a&&(p.size=Math.min(a,2e3)),o=await this.spotPublicGetMarketHistoryKline(this.extend(p,r)))}let u=this.safeList(o,"data",[]);return this.parseOHLCVs(u,d,t,i,a)}async fetchAccounts(e={}){await this.loadMarkets();let t=await this.spotPrivateGetV1AccountAccounts(e),i=this.safeValue(t,"data");return this.parseAccounts(i)}parseAccount(e){let t=this.safeString(e,"type"),i=this.safeValue(this.options,"accountsById",{}),a=this.safeValue(i,t,t);return{info:e,id:this.safeString(e,"id"),type:a,code:void 0}}async fetchAccountIdByType(e,t,i,a={}){let s=await this.loadAccounts(),r=this.safeValue2(a,"accountId","account-id");if(void 0!==r)return r;"spot"===e&&("cross"===t?e="super-margin":"isolated"===t&&(e="margin"));let n=void 0===i?void 0:this.marketId(i);for(let t=0;t<s.length;t++){let i=s[t],a=this.safeValue(i,"info"),r=this.safeString(a,"subtype",void 0),o=this.safeString(i,"type");if("margin"===e){if(r===n)return this.safeString(i,"id")}else if(e===o)return this.safeString(i,"id")}let o=this.safeValue(s,0,{});return this.safeString(o,"id")}async fetchCurrencies(e={}){let t=await this.spotPublicGetV2ReferenceCurrencies(e),i=this.safeValue(t,"data",[]),a={};this.options.networkChainIdsByNames={},this.options.networkNamesByChainIds={};for(let e=0;e<i.length;e++){let t,s,n,o;let c=i[e],d=this.safeString(c,"currency"),p=this.safeCurrencyCode(d);this.options.networkChainIdsByNames[p]={};let l=this.safeValue(c,"chains",[]),h={},u="normal"===this.safeString(c,"instStatus"),f=!1,w=!1;for(let e=0;e<l.length;e++){let i=l[e],a=this.safeString(i,"chain"),c=this.safeString2(i,"baseChain","displayName");this.options.networkChainIdsByNames[p][c]=a,this.options.networkNamesByChainIds[a]=c;let d=this.networkIdToCode(a);s=this.safeNumber(i,"minDepositAmt"),n=this.safeNumber(i,"minWithdrawAmt"),o=this.safeNumber(i,"maxWithdrawAmt");let u=this.safeString(i,"withdrawStatus"),m=this.safeString(i,"depositStatus"),v="allowed"===u,g="allowed"===m;w=v||w,f=g||f;let _=v&&g,y=this.parsePrecision(this.safeString(i,"withdrawPrecision"));void 0!==y&&(t=void 0===t?y:r.Y.stringMin(y,t));let S=this.safeNumber(i,"transactFeeWithdraw");h[d]={info:i,id:a,network:d,limits:{deposit:{min:s,max:void 0},withdraw:{min:n,max:o}},active:_,deposit:g,withdraw:v,fee:S,precision:this.parseNumber(y)}}a[p]={info:c,code:p,id:d,active:u,deposit:f,withdraw:w,fee:void 0,name:void 0,limits:{amount:{min:void 0,max:void 0},withdraw:{min:n,max:o},deposit:{min:void 0,max:void 0}},precision:this.parseNumber(t),networks:h}}return a}networkIdToCode(e,t){if(0===Object.keys(this.options.networkNamesByChainIds).length)throw new s.ExchangeError(this.id+" networkIdToCode() - markets need to be loaded at first");let i=this.safeValue(this.options.networkNamesByChainIds,e,e);return super.networkIdToCode(i)}networkCodeToId(e,t){if(void 0===t)throw new s.ArgumentsRequired(this.id+" networkCodeToId() requires a currencyCode argument");if(0===Object.keys(this.options.networkChainIdsByNames).length)throw new s.ExchangeError(this.id+" networkCodeToId() - markets need to be loaded at first");let i=this.safeValue(this.options.networkChainIdsByNames,t,{});if(e in i)return i[e];{let t=super.networkCodeToId(e);return this.safeValue(i,t,t)}}async fetchBalance(e={}){let t,i,a;await this.loadMarkets(),[t,e]=this.handleMarketTypeAndParams("fetchBalance",void 0,e);let s=this.safeValue(this.options,"fetchBalance",{}),r=this.safeValue2(e,"isUnifiedAccount","unified",!1);e=this.omit(e,["isUnifiedAccount","unified"]);let n={},o="spot"===t,c="future"===t,d=this.safeString2(this.options,"defaultSubType","subType","linear"),p=this.safeString2(s,"defaultSubType","subType",d),l="inverse"===(p=this.safeString2(e,"defaultSubType","subType",p)),h="linear"===p;[i,e]=this.handleMarginModeAndParams("fetchBalance",e),e=this.omit(e,["defaultSubType","subType"]);let u="isolated"===i,f="margin"===t||o&&("cross"===i||u);if(o||f){if(f)a=u?await this.spotPrivateGetV1MarginAccountsBalance(this.extend(n,e)):await this.spotPrivateGetV1CrossMarginAccountsBalance(this.extend(n,e));else{await this.loadAccounts();let i=await this.fetchAccountIdByType(t,void 0,void 0,e);n["account-id"]=i,a=await this.spotPrivateGetV1AccountAccountsAccountIdBalance(this.extend(n,e))}}else r?a=await this.contractPrivateGetLinearSwapApiV3UnifiedAccountInfo(this.extend(n,e)):h?a=u?await this.contractPrivatePostLinearSwapApiV1SwapAccountInfo(this.extend(n,e)):await this.contractPrivatePostLinearSwapApiV1SwapCrossAccountInfo(this.extend(n,e)):l&&(a=c?await this.contractPrivatePostApiV1ContractAccountInfo(this.extend(n,e)):await this.contractPrivatePostSwapApiV1SwapAccountInfo(this.extend(n,e)));let w={info:a},m=this.safeValue(a,"data");if(o||f){if(u)for(let e=0;e<m.length;e++){let t=m[e],i=this.safeSymbol(this.safeString(t,"symbol")),a=this.safeValue(t,"list"),s={};for(let e=0;e<a.length;e++){let t=a[e],i=this.safeString(t,"currency"),r=this.safeCurrencyCode(i);s[r]=this.parseMarginBalanceHelper(t,r,s)}w[i]=this.safeBalance(s)}else{let e=this.safeValue(m,"list",[]);for(let t=0;t<e.length;t++){let i=e[t],a=this.safeString(i,"currency"),s=this.safeCurrencyCode(a);w[s]=this.parseMarginBalanceHelper(i,s,w)}w=this.safeBalance(w)}}else if(r)for(let e=0;e<m.length;e++){let t=m[e],i=this.safeString(t,"margin_asset"),a=this.safeCurrencyCode(i);if(u){let e=this.safeValue(t,"isolated_swap",{});for(let t=0;t<e.length;t++){let i=e[t],s=this.safeString(i,"contract_code"),r={code:a,free:this.safeNumber(i,"margin_available")};w[this.safeSymbol(s)]=r,w=this.safeBalance(w)}}else{let e=this.account();e.free=this.safeString(t,"margin_static"),e.used=this.safeString(t,"margin_frozen"),w[a]=e,w=this.safeBalance(w)}}else if(h){let e=this.safeValue(m,0,{});if(u)for(let e=0;e<m.length;e++){let t=m[e],i=this.safeString2(t,"contract_code","margin_account"),a=this.safeMarket(i),s=this.safeString(t,"margin_asset"),r=this.safeCurrency(s),n=this.safeString(a,"settle",r.code);if(void 0!==n){let e=this.account();e.free=this.safeString(t,"margin_balance"),e.used=this.safeString(t,"margin_frozen");let i={};i[n]=e,w[a.symbol]=this.safeBalance(i)}}else{let t=this.account();t.free=this.safeString(e,"withdraw_available"),t.total=this.safeString(e,"margin_balance");let i=this.safeString2(e,"margin_asset","symbol");w[this.safeCurrencyCode(i)]=t,w=this.safeBalance(w)}}else if(l){for(let e=0;e<m.length;e++){let t=m[e],i=this.safeString(t,"symbol"),a=this.safeCurrencyCode(i),s=this.account();s.free=this.safeString(t,"margin_available"),s.used=this.safeString(t,"margin_frozen"),w[a]=s}w=this.safeBalance(w)}return w}async fetchOrder(e,t,i={}){let a,r,n;await this.loadMarkets(),void 0!==t&&(a=this.market(t)),[r,i]=this.handleMarketTypeAndParams("fetchOrder",a,i);let o={};if("spot"===r)void 0!==this.safeString(i,"clientOrderId")?n=await this.spotPrivateGetV1OrderOrdersGetClientOrder(this.extend(o,i)):(o["order-id"]=e,n=await this.spotPrivateGetV1OrderOrdersOrderId(this.extend(o,i)));else{if(void 0===t)throw new s.ArgumentsRequired(this.id+" fetchOrder() requires a symbol argument");let c=this.safeString2(i,"client_order_id","clientOrderId");if(void 0===c?o.order_id=e:(o.client_order_id=c,i=this.omit(i,["client_order_id","clientOrderId"])),o.contract_code=a.id,a.linear){let e;[e,i]=this.handleMarginModeAndParams("fetchOrder",i),"isolated"===(e=void 0===e?"cross":e)?n=await this.contractPrivatePostLinearSwapApiV1SwapOrderInfo(this.extend(o,i)):"cross"===e&&(n=await this.contractPrivatePostLinearSwapApiV1SwapCrossOrderInfo(this.extend(o,i)))}else if(a.inverse){if("future"===r)o.symbol=a.settleId,n=await this.contractPrivatePostApiV1ContractOrderInfo(this.extend(o,i));else if("swap"===r)n=await this.contractPrivatePostSwapApiV1SwapOrderInfo(this.extend(o,i));else throw new s.NotSupported(this.id+" fetchOrder() does not support "+r+" markets")}}let c=this.safeValue(n,"data");return Array.isArray(c)&&(c=this.safeValue(c,0)),this.parseOrder(c)}parseMarginBalanceHelper(e,t,i){let a;return a=t in i?i[t]:this.account(),"trade"===e.type&&(a.free=this.safeString(e,"balance")),"frozen"===e.type&&(a.used=this.safeString(e,"balance")),a}async fetchSpotOrdersByStates(e,t,i,a,r={}){let n,o;let c=this.safeString(this.options,"fetchOrdersByStatesMethod","spot_private_get_v1_order_orders");if("spot_private_get_v1_order_orders"===c&&void 0===t)throw new s.ArgumentsRequired(this.id+" fetchOrders() requires a symbol argument");await this.loadMarkets();let d={states:e};void 0!==t&&(n=this.market(t),d.symbol=n.id),void 0!==i&&(d["start-time"]=i,d["end-time"]=this.sum(i,1728e5)),[d,r]=this.handleUntilOption("end-time",d,r),void 0!==a&&(d.size=a),o="spot_private_get_v1_order_orders"===c?await this.spotPrivateGetV1OrderOrders(this.extend(d,r)):await this.spotPrivateGetV1OrderHistory(this.extend(d,r));let p=this.safeList(o,"data",[]);return this.parseOrders(p,n,i,a)}async fetchSpotOrders(e,t,i,a={}){return await this.fetchSpotOrdersByStates("pre-submitted,submitted,partial-filled,filled,partial-canceled,canceled",e,t,i,a)}async fetchClosedSpotOrders(e,t,i,a={}){return await this.fetchSpotOrdersByStates("filled,partial-canceled,canceled",e,t,i,a)}async fetchContractOrders(e,t,i,a={}){let r;if(void 0===e)throw new s.ArgumentsRequired(this.id+" fetchContractOrders() requires a symbol argument");await this.loadMarkets();let n=this.market(e),o={trade_type:0,status:"0"},c=this.safeBool2(a,"stop","trigger"),d=this.safeValue(a,"stopLossTakeProfit"),p=this.safeBool(a,"trailing",!1);if(a=this.omit(a,["stop","stopLossTakeProfit","trailing","trigger"]),c||d||p?(void 0!==i&&(o.page_size=i),o.contract_code=n.id,o.create_date=90):(void 0!==t&&(o.start_time=t),o.contract=n.id,o.type=1),[o,a]=this.handleUntilOption("end_time",o,a),n.linear){let e;[e,a]=this.handleMarginModeAndParams("fetchContractOrders",a),"isolated"===(e=void 0===e?"cross":e)?r=c?await this.contractPrivatePostLinearSwapApiV1SwapTriggerHisorders(this.extend(o,a)):d?await this.contractPrivatePostLinearSwapApiV1SwapTpslHisorders(this.extend(o,a)):p?await this.contractPrivatePostLinearSwapApiV1SwapTrackHisorders(this.extend(o,a)):await this.contractPrivatePostLinearSwapApiV3SwapHisorders(this.extend(o,a)):"cross"===e&&(r=c?await this.contractPrivatePostLinearSwapApiV1SwapCrossTriggerHisorders(this.extend(o,a)):d?await this.contractPrivatePostLinearSwapApiV1SwapCrossTpslHisorders(this.extend(o,a)):p?await this.contractPrivatePostLinearSwapApiV1SwapCrossTrackHisorders(this.extend(o,a)):await this.contractPrivatePostLinearSwapApiV3SwapCrossHisorders(this.extend(o,a)))}else n.inverse&&(n.swap?r=c?await this.contractPrivatePostSwapApiV1SwapTriggerHisorders(this.extend(o,a)):d?await this.contractPrivatePostSwapApiV1SwapTpslHisorders(this.extend(o,a)):p?await this.contractPrivatePostSwapApiV1SwapTrackHisorders(this.extend(o,a)):await this.contractPrivatePostSwapApiV3SwapHisorders(this.extend(o,a)):n.future&&(o.symbol=n.settleId,r=c?await this.contractPrivatePostApiV1ContractTriggerHisorders(this.extend(o,a)):d?await this.contractPrivatePostApiV1ContractTpslHisorders(this.extend(o,a)):p?await this.contractPrivatePostApiV1ContractTrackHisorders(this.extend(o,a)):await this.contractPrivatePostApiV3ContractHisorders(this.extend(o,a))));let l=this.safeValue(r,"data");return Array.isArray(l)||(l=this.safeValue(l,"orders",[])),this.parseOrders(l,n,t,i)}async fetchClosedContractOrders(e,t,i,a={}){return await this.fetchContractOrders(e,t,i,this.extend({status:"5,6,7"},a))}async fetchOrders(e,t,i,a={}){let r,n;await this.loadMarkets(),void 0!==e&&(r=this.market(e)),[n,a]=this.handleMarketTypeAndParams("fetchOrders",r,a);let o="swap"===n||"future"===n;if(o&&void 0===e)throw new s.ArgumentsRequired(this.id+" fetchOrders() requires a symbol argument for "+n+" orders");return o?await this.fetchContractOrders(e,t,i,a):await this.fetchSpotOrders(e,t,i,a)}async fetchClosedOrders(e,t,i,a={}){let s,r;await this.loadMarkets();let n=!1;return([n,a]=this.handleOptionAndParams(a,"fetchClosedOrders","paginate"),n)?await this.fetchPaginatedCallDynamic("fetchClosedOrders",e,t,i,a,100):(void 0!==e&&(s=this.market(e)),([r,a]=this.handleMarketTypeAndParams("fetchClosedOrders",s,a),"spot"===r)?await this.fetchClosedSpotOrders(e,t,i,a):await this.fetchClosedContractOrders(e,t,i,a))}async fetchOpenOrders(e,t,i,a={}){let r,n,o;await this.loadMarkets(),void 0!==e&&(r=this.market(e));let c={};if([n,a]=this.handleMarketTypeAndParams("fetchOpenOrders",r,a),"spot"===n){void 0!==e&&(c.symbol=r.id);let t=this.safeString(a,"account-id");if(void 0===t){await this.loadAccounts();for(let e=0;e<this.accounts.length;e++){let i=this.accounts[e];if("spot"===this.safeString(i,"type")&&void 0!==(t=this.safeString(i,"id")))break}}c["account-id"]=t,void 0!==i&&(c.size=i),a=this.omit(a,"account-id"),o=await this.spotPrivateGetV1OrderOpenOrders(this.extend(c,a))}else{if(void 0===e)throw new s.ArgumentsRequired(this.id+" fetchOpenOrders() requires a symbol argument");void 0!==i&&(c.page_size=i),c.contract_code=r.id;let t=this.safeBool2(a,"stop","trigger"),n=this.safeValue(a,"stopLossTakeProfit"),d=this.safeBool(a,"trailing",!1);if(a=this.omit(a,["stop","stopLossTakeProfit","trailing","trigger"]),r.linear){let e;[e,a]=this.handleMarginModeAndParams("fetchOpenOrders",a),"isolated"===(e=void 0===e?"cross":e)?o=t?await this.contractPrivatePostLinearSwapApiV1SwapTriggerOpenorders(this.extend(c,a)):n?await this.contractPrivatePostLinearSwapApiV1SwapTpslOpenorders(this.extend(c,a)):d?await this.contractPrivatePostLinearSwapApiV1SwapTrackOpenorders(this.extend(c,a)):await this.contractPrivatePostLinearSwapApiV1SwapOpenorders(this.extend(c,a)):"cross"===e&&(o=t?await this.contractPrivatePostLinearSwapApiV1SwapCrossTriggerOpenorders(this.extend(c,a)):n?await this.contractPrivatePostLinearSwapApiV1SwapCrossTpslOpenorders(this.extend(c,a)):d?await this.contractPrivatePostLinearSwapApiV1SwapCrossTrackOpenorders(this.extend(c,a)):await this.contractPrivatePostLinearSwapApiV1SwapCrossOpenorders(this.extend(c,a)))}else r.inverse&&(r.swap?o=t?await this.contractPrivatePostSwapApiV1SwapTriggerOpenorders(this.extend(c,a)):n?await this.contractPrivatePostSwapApiV1SwapTpslOpenorders(this.extend(c,a)):d?await this.contractPrivatePostSwapApiV1SwapTrackOpenorders(this.extend(c,a)):await this.contractPrivatePostSwapApiV1SwapOpenorders(this.extend(c,a)):r.future&&(c.symbol=r.settleId,o=t?await this.contractPrivatePostApiV1ContractTriggerOpenorders(this.extend(c,a)):n?await this.contractPrivatePostApiV1ContractTpslOpenorders(this.extend(c,a)):d?await this.contractPrivatePostApiV1ContractTrackOpenorders(this.extend(c,a)):await this.contractPrivatePostApiV1ContractOpenorders(this.extend(c,a))))}let d=this.safeValue(o,"data");return Array.isArray(d)||(d=this.safeValue(d,"orders",[])),this.parseOrders(d,r,t,i)}parseOrderStatus(e){return this.safeString({"partial-filled":"open","partial-canceled":"canceled",filled:"closed",canceled:"canceled",submitted:"open",created:"open",1:"open",2:"open",3:"open",4:"open",5:"canceled",6:"closed",7:"canceled",11:"canceling"},e,e)}parseOrder(e,t){let i,a,s,r;let n=this.safeString2(e,"err_code","err-code"),o=this.parseOrderStatus(this.safeString2(e,"state","status"));void 0!==n&&(o="rejected");let c=this.safeStringN(e,["id","order_id_str","order-id"]),d=this.safeString(e,"direction"),p=this.safeString(e,"order_price_type");if("type"in e){let t=e.type.split("-");d=t[0],p=t[1]}let l=this.safeString2(e,"contract_code","symbol");t=this.safeMarket(l,t);let h=this.safeIntegerN(e,["created_at","created-at","create_date"]),u=this.safeString2(e,"client_order_id","client-order-id");void 0!==p&&p.indexOf("market")>=0?i=this.safeString(e,"field-cash-amount"):(a=this.safeString2(e,"volume","amount"),i=this.safeStringN(e,["filled-cash-amount","field-cash-amount","trade_turnover"]));let f=this.safeStringN(e,["filled-amount","field-amount","trade_volume"]),w=this.safeString2(e,"price","order_price"),m=this.safeString2(e,"filled-fees","field-fees");if(void 0!==(m=this.safeString(e,"fee",m))){let i=this.safeString(e,"fee_asset");s={cost:m,currency:void 0!==i?this.safeCurrencyCode(i):"sell"===d?t.quote:t.base}}let v=this.safeString(e,"trade_avg_price"),g=this.safeValue(e,"trades"),_=this.safeInteger(e,"reduce_only");return void 0!==_&&(r=0!==_),this.safeOrder({info:e,id:c,clientOrderId:u,timestamp:h,datetime:this.iso8601(h),lastTradeTimestamp:void 0,symbol:t.symbol,type:p,timeInForce:void 0,postOnly:void 0,side:d,price:w,triggerPrice:this.safeString2(e,"stop-price","trigger_price"),average:v,cost:i,amount:a,filled:f,remaining:void 0,status:o,reduceOnly:r,fee:s,trades:g},t)}async createMarketBuyOrderWithCost(e,t,i={}){if(await this.loadMarkets(),!this.market(e).spot)throw new s.NotSupported(this.id+" createMarketBuyOrderWithCost() supports spot orders only");return i.createMarketBuyOrderRequiresPrice=!1,await this.createOrder(e,"market","buy",t,void 0,i)}async createTrailingPercentOrder(e,t,i,a,r,n,o,c={}){if(void 0===n)throw new s.ArgumentsRequired(this.id+" createTrailingPercentOrder() requires a trailingPercent argument");if(void 0===o)throw new s.ArgumentsRequired(this.id+" createTrailingPercentOrder() requires a trailingTriggerPrice argument");return c.trailingPercent=n,c.trailingTriggerPrice=o,await this.createOrder(e,t,i,a,r,c)}async createSpotOrderRequest(e,t,i,a,n,o={}){let c,d;await this.loadMarkets(),await this.loadAccounts();let p=this.market(e);[c,o]=this.handleMarginModeAndParams("createOrder",o);let l={"account-id":await this.fetchAccountIdByType(p.type,c,e),symbol:p.id},h=t.replace("buy-","");h=h.replace("sell-","");let u=this.safeValue(this.options,p.type,{}),f=this.safeStringN(o,["triggerPrice","stopPrice","stop-price"]);if(void 0===f){if(h in this.safeValue(u,"stopOrderTypes",{}))throw new s.ArgumentsRequired(this.id+" createOrder() requires a triggerPrice for a trigger order")}else{let a=this.safeString(o,"operator","sell"===i?"lte":"gte");if(l["stop-price"]=this.priceToPrecision(e,f),l.operator=a,"limit"===h||"limit-fok"===h)h="stop-"+h;else if("stop-limit"!==h&&"stop-limit-fok"!==h)throw new s.NotSupported(this.id+" createOrder() does not support "+t+" orders")}[d,o]=this.handlePostOnly("market"===h,"limit-maker"===h,o),d&&(h="limit-maker");let w=this.safeString(o,"timeInForce","GTC");"FOK"===w?h+="-fok":"IOC"===w&&(h="ioc"),l.type=i+"-"+h;let m=this.safeString2(o,"clientOrderId","client-order-id");if(void 0===m){let e=this.safeValue(this.options,"broker",{}),t=this.safeString(e,"id");l["client-order-id"]=t+this.uuid()}else l["client-order-id"]=m;if("cross"===c?l.source="super-margin-api":"isolated"===c?l.source="margin-api":"c2c"===c&&(l.source="c2c-margin-api"),"market"===h&&"buy"===i){let t;let i=!0;[i,o]=this.handleOptionAndParams(o,"createOrder","createMarketBuyOrderRequiresPrice",!0);let c=this.safeNumber(o,"cost");if(o=this.omit(o,"cost"),void 0!==c)t=this.amountToPrecision(e,c);else if(i){if(void 0===n)throw new s.InvalidOrder(this.id+" createOrder() requires the price argument for market buy orders to calculate the total cost to spend (amount * price), alternatively set the createMarketBuyOrderRequiresPrice option or param to false and pass the cost to spend in the amount argument");{let i=this.numberToString(a),s=this.numberToString(n);t=this.amountToPrecision(e,r.Y.stringMul(i,s))}}else t=this.amountToPrecision(e,a);l.amount=t}else l.amount=this.amountToPrecision(e,a);return h in this.safeValue(u,"limitOrderTypes",{})&&(l.price=this.priceToPrecision(e,n)),o=this.omit(o,["triggerPrice","stopPrice","stop-price","clientOrderId","client-order-id","operator","timeInForce"]),this.extend(l,o)}createContractOrderRequest(e,t,i,a,s,n={}){let o;let c={contract_code:this.market(e).id,volume:this.amountToPrecision(e,a),direction:i};[o,n]=this.handlePostOnly("market"===t,"post_only"===t,n),o&&(t="post_only");let d=this.safeString(n,"timeInForce","GTC");"FOK"===d?t="fok":"IOC"===d&&(t="ioc");let p=this.safeNumberN(n,["triggerPrice","stopPrice","trigger_price"]),l=this.safeNumber2(n,"stopLossPrice","sl_trigger_price"),h=this.safeNumber2(n,"takeProfitPrice","tp_trigger_price"),u=this.safeString2(n,"trailingPercent","callback_rate"),f=this.safeNumber(n,"trailingTriggerPrice",s),w=void 0!==u,m=void 0!==l,v=void 0!==h;if(void 0!==p){let t=this.safeString2(n,"triggerType","trigger_type","le");c.trigger_type=t,c.trigger_price=this.priceToPrecision(e,p),void 0!==s&&(c.order_price=this.priceToPrecision(e,s))}else if(m||v)m?(c.sl_order_price_type=t,c.sl_trigger_price=this.priceToPrecision(e,l),void 0!==s&&(c.sl_order_price=this.priceToPrecision(e,s))):(c.tp_order_price_type=t,c.tp_trigger_price=this.priceToPrecision(e,h),void 0!==s&&(c.tp_order_price=this.priceToPrecision(e,s)));else if(w){let e=r.Y.stringDiv(u,"100");c.callback_rate=this.parseToNumeric(e),c.active_price=f,c.order_price_type=this.safeString(n,"order_price_type","formula_price")}else{let i=this.safeInteger2(n,"client_order_id","clientOrderId");void 0!==i&&(c.client_order_id=i,n=this.omit(n,["clientOrderId"])),("limit"===t||"ioc"===t||"fok"===t||"post_only"===t)&&(c.price=this.priceToPrecision(e,s))}let g=this.safeBool2(n,"reduceOnly","reduce_only",!1);m||v||(g&&(c.reduce_only=1),c.lever_rate=this.safeIntegerN(n,["leverRate","lever_rate","leverage"],1),w||(c.order_price_type=t)),this.safeBool(n,"hedged",!1)&&(g?c.offset="close":c.offset="open");let _=this.safeValue(this.options,"broker",{}),y=this.safeString(_,"id");return c.channel_code=y,n=this.omit(n,["reduceOnly","triggerPrice","stopPrice","stopLossPrice","takeProfitPrice","triggerType","leverRate","timeInForce","leverage","trailingPercent","trailingTriggerPrice","hedged"]),this.extend(c,n)}async createOrder(e,t,i,a,r,n={}){let o,c,d;await this.loadMarkets();let p=this.market(e),l=this.safeNumberN(n,["triggerPrice","stopPrice","trigger_price"]),h=this.safeNumber2(n,"stopLossPrice","sl_trigger_price"),u=this.safeNumber2(n,"takeProfitPrice","tp_trigger_price"),f=void 0!==this.safeNumber(n,"trailingPercent"),w=void 0!==l,m=void 0!==h,v=void 0!==u;if(p.spot){if(f)throw new s.NotSupported(this.id+" createOrder() does not support trailing orders for spot markets");let c=await this.createSpotOrderRequest(e,t,i,a,r,n);o=await this.spotPrivatePostV1OrderOrdersPlace(c)}else{let c=this.createContractOrderRequest(e,t,i,a,r,n);if(p.linear){let e;[e,c]=this.handleMarginModeAndParams("createOrder",c),"isolated"===(e=void 0===e?"cross":e)?o=w?await this.contractPrivatePostLinearSwapApiV1SwapTriggerOrder(c):m||v?await this.contractPrivatePostLinearSwapApiV1SwapTpslOrder(c):f?await this.contractPrivatePostLinearSwapApiV1SwapTrackOrder(c):await this.contractPrivatePostLinearSwapApiV1SwapOrder(c):"cross"===e&&(o=w?await this.contractPrivatePostLinearSwapApiV1SwapCrossTriggerOrder(c):m||v?await this.contractPrivatePostLinearSwapApiV1SwapCrossTpslOrder(c):f?await this.contractPrivatePostLinearSwapApiV1SwapCrossTrackOrder(c):await this.contractPrivatePostLinearSwapApiV1SwapCrossOrder(c))}else if(p.inverse){if(void 0===this.safeString(n,"offset"))throw new s.ArgumentsRequired(this.id+' createOrder () requires an extra parameter params["offset"] to be set to "open" or "close" when placing orders in inverse markets');p.swap?o=w?await this.contractPrivatePostSwapApiV1SwapTriggerOrder(c):m||v?await this.contractPrivatePostSwapApiV1SwapTpslOrder(c):f?await this.contractPrivatePostSwapApiV1SwapTrackOrder(c):await this.contractPrivatePostSwapApiV1SwapOrder(c):p.future&&(o=w?await this.contractPrivatePostApiV1ContractTriggerOrder(c):m||v?await this.contractPrivatePostApiV1ContractTpslOrder(c):f?await this.contractPrivatePostApiV1ContractTrackOrder(c):await this.contractPrivatePostApiV1ContractOrder(c))}}return p.spot?this.safeOrder({info:o,id:this.safeString(o,"data"),timestamp:void 0,datetime:void 0,lastTradeTimestamp:void 0,status:void 0,symbol:void 0,type:t,side:i,price:r,amount:a,filled:void 0,remaining:void 0,cost:void 0,trades:void 0,fee:void 0,clientOrderId:void 0,average:void 0},p):(m?(c=this.safeValue(o,"data",{}),d=this.safeValue(c,"sl_order",{})):v?(c=this.safeValue(o,"data",{}),d=this.safeValue(c,"tp_order",{})):d=this.safeValue(o,"data",{}),this.parseOrder(d,p))}async createOrders(e,t={}){let i,a,r,n,o;await this.loadMarkets();let c=[];for(let t=0;t<e.length;t++){let n;let o=e[t],d=this.safeString(o,"symbol");if(void 0===i)i=d;else if(i!==d)throw new s.BadRequest(this.id+" createOrders() requires all orders to have the same symbol");let p=this.safeString(o,"type"),l=this.safeString(o,"side"),h=this.safeValue(o,"amount"),u=this.safeValue(o,"price"),f=this.safeValue(o,"params",{}),w=this.handleMarginModeAndParams("createOrders",f)[0];if(void 0!==w){if(void 0===r)r=w;else if(r!==w)throw new s.BadRequest(this.id+" createOrders() requires all orders to have the same margin mode (isolated or cross)")}n=(a=this.market(i)).spot?await this.createSpotOrderRequest(d,p,l,h,u,f):this.createContractOrderRequest(d,p,l,h,u,f),n=this.omit(n,"marginMode"),c.push(n)}let d={};if(a.spot?n=await this.privatePostOrderBatchOrders(c):(d.orders_data=c,a.linear?"isolated"===(r=void 0===r?"cross":r)?n=await this.contractPrivatePostLinearSwapApiV1SwapBatchorder(d):"cross"===r&&(n=await this.contractPrivatePostLinearSwapApiV1SwapCrossBatchorder(d)):a.inverse&&(a.swap?n=await this.contractPrivatePostSwapApiV1SwapBatchorder(d):a.future&&(n=await this.contractPrivatePostApiV1ContractBatchorder(d)))),a.spot)o=this.safeValue(n,"data",[]);else{let e=this.safeValue(n,"data",{}),t=this.safeValue(e,"success",[]),i=this.safeValue(e,"errors",[]);o=this.arrayConcat(t,i)}return this.parseOrders(o,a)}async cancelOrder(e,t,i={}){let a,r,n;await this.loadMarkets(),void 0!==t&&(a=this.market(t)),[r,i]=this.handleMarketTypeAndParams("cancelOrder",a,i);let o={};if("spot"===r){let t=this.safeString2(i,"client-order-id","clientOrderId");void 0===t?(o["order-id"]=e,n=await this.spotPrivatePostV1OrderOrdersOrderIdSubmitcancel(this.extend(o,i))):(o["client-order-id"]=t,i=this.omit(i,["client-order-id","clientOrderId"]),n=await this.spotPrivatePostV1OrderOrdersSubmitCancelClientOrder(this.extend(o,i)))}else{if(void 0===t)throw new s.ArgumentsRequired(this.id+" cancelOrder() requires a symbol argument");let c=this.safeString2(i,"client_order_id","clientOrderId");void 0===c?o.order_id=e:(o.client_order_id=c,i=this.omit(i,["client_order_id","clientOrderId"])),a.future?o.symbol=a.settleId:o.contract_code=a.id;let d=this.safeBool2(i,"stop","trigger"),p=this.safeValue(i,"stopLossTakeProfit"),l=this.safeBool(i,"trailing",!1);if(i=this.omit(i,["stop","stopLossTakeProfit","trailing","trigger"]),a.linear){let e;[e,i]=this.handleMarginModeAndParams("cancelOrder",i),"isolated"===(e=void 0===e?"cross":e)?n=d?await this.contractPrivatePostLinearSwapApiV1SwapTriggerCancel(this.extend(o,i)):p?await this.contractPrivatePostLinearSwapApiV1SwapTpslCancel(this.extend(o,i)):l?await this.contractPrivatePostLinearSwapApiV1SwapTrackCancel(this.extend(o,i)):await this.contractPrivatePostLinearSwapApiV1SwapCancel(this.extend(o,i)):"cross"===e&&(n=d?await this.contractPrivatePostLinearSwapApiV1SwapCrossTriggerCancel(this.extend(o,i)):p?await this.contractPrivatePostLinearSwapApiV1SwapCrossTpslCancel(this.extend(o,i)):l?await this.contractPrivatePostLinearSwapApiV1SwapCrossTrackCancel(this.extend(o,i)):await this.contractPrivatePostLinearSwapApiV1SwapCrossCancel(this.extend(o,i)))}else if(a.inverse)a.swap?n=d?await this.contractPrivatePostSwapApiV1SwapTriggerCancel(this.extend(o,i)):p?await this.contractPrivatePostSwapApiV1SwapTpslCancel(this.extend(o,i)):l?await this.contractPrivatePostSwapApiV1SwapTrackCancel(this.extend(o,i)):await this.contractPrivatePostSwapApiV1SwapCancel(this.extend(o,i)):a.future&&(n=d?await this.contractPrivatePostApiV1ContractTriggerCancel(this.extend(o,i)):p?await this.contractPrivatePostApiV1ContractTpslCancel(this.extend(o,i)):l?await this.contractPrivatePostApiV1ContractTrackCancel(this.extend(o,i)):await this.contractPrivatePostApiV1ContractCancel(this.extend(o,i)));else throw new s.NotSupported(this.id+" cancelOrder() does not support "+r+" markets")}return this.extend(this.parseOrder(n,a),{id:e,status:"canceled"})}async cancelOrders(e,t,i={}){let a,r,n;await this.loadMarkets(),void 0!==t&&(a=this.market(t)),[r,i]=this.handleMarketTypeAndParams("cancelOrders",a,i);let o={};if("spot"===r){let t=this.safeValue2(i,"client-order-id","clientOrderId");void 0===(t=this.safeValue2(i,"client-order-ids","clientOrderIds",t))?"string"==typeof t?o["order-ids"]=[e]:o["order-ids"]=e:("string"==typeof t?o["client-order-ids"]=[t]:o["client-order-ids"]=t,i=this.omit(i,["client-order-id","client-order-ids","clientOrderId","clientOrderIds"])),n=await this.spotPrivatePostV1OrderOrdersBatchcancel(this.extend(o,i))}else{if(void 0===t)throw new s.ArgumentsRequired(this.id+" cancelOrders() requires a symbol argument");let c=this.safeString2(i,"client_order_id","clientOrderId");void 0===(c=this.safeString2(i,"client_order_ids","clientOrderIds",c))?o.order_id=e.join(","):(o.client_order_id=c,i=this.omit(i,["client_order_id","client_order_ids","clientOrderId","clientOrderIds"])),a.future?o.symbol=a.settleId:o.contract_code=a.id;let d=this.safeBool2(i,"stop","trigger"),p=this.safeValue(i,"stopLossTakeProfit");if(i=this.omit(i,["stop","stopLossTakeProfit","trigger"]),a.linear){let e;[e,i]=this.handleMarginModeAndParams("cancelOrders",i),"isolated"===(e=void 0===e?"cross":e)?n=d?await this.contractPrivatePostLinearSwapApiV1SwapTriggerCancel(this.extend(o,i)):p?await this.contractPrivatePostLinearSwapApiV1SwapTpslCancel(this.extend(o,i)):await this.contractPrivatePostLinearSwapApiV1SwapCancel(this.extend(o,i)):"cross"===e&&(n=d?await this.contractPrivatePostLinearSwapApiV1SwapCrossTriggerCancel(this.extend(o,i)):p?await this.contractPrivatePostLinearSwapApiV1SwapCrossTpslCancel(this.extend(o,i)):await this.contractPrivatePostLinearSwapApiV1SwapCrossCancel(this.extend(o,i)))}else if(a.inverse)a.swap?n=d?await this.contractPrivatePostSwapApiV1SwapTriggerCancel(this.extend(o,i)):p?await this.contractPrivatePostSwapApiV1SwapTpslCancel(this.extend(o,i)):await this.contractPrivatePostSwapApiV1SwapCancel(this.extend(o,i)):a.future&&(n=d?await this.contractPrivatePostApiV1ContractTriggerCancel(this.extend(o,i)):p?await this.contractPrivatePostApiV1ContractTpslCancel(this.extend(o,i)):await this.contractPrivatePostApiV1ContractCancel(this.extend(o,i)));else throw new s.NotSupported(this.id+" cancelOrders() does not support "+r+" markets")}let c=this.safeDict(n,"data");return this.parseCancelOrders(c)}parseCancelOrders(e){let t;let i=this.safeString(e,"successes");t=void 0!==i?i.split(","):this.safeList(e,"success",[]);let a=this.safeList2(e,"errors","failed",[]),s=[];for(let e=0;e<t.length;e++){let i=t[e];s.push(this.safeOrder({info:i,id:i,status:"canceled"}))}for(let e=0;e<a.length;e++){let t=a[e];s.push(this.safeOrder({info:t,id:this.safeString2(t,"order-id","order_id"),status:"failed",clientOrderId:this.safeString(t,"client-order-id")}))}return s}async cancelAllOrders(e,t={}){let i,a,r;await this.loadMarkets(),void 0!==e&&(i=this.market(e)),[a,t]=this.handleMarketTypeAndParams("cancelAllOrders",i,t);let n={};if("spot"===a){void 0!==e&&(n.symbol=i.id),r=await this.spotPrivatePostV1OrderOrdersBatchCancelOpenOrders(this.extend(n,t));let a=this.safeDict(r,"data");return[this.safeOrder({info:a})]}{if(void 0===e)throw new s.ArgumentsRequired(this.id+" cancelAllOrders() requires a symbol argument");i.future&&(n.symbol=i.settleId),n.contract_code=i.id;let o=this.safeBool2(t,"stop","trigger"),c=this.safeValue(t,"stopLossTakeProfit"),d=this.safeBool(t,"trailing",!1);if(t=this.omit(t,["stop","stopLossTakeProfit","trailing","trigger"]),i.linear){let e;[e,t]=this.handleMarginModeAndParams("cancelAllOrders",t),"isolated"===(e=void 0===e?"cross":e)?r=o?await this.contractPrivatePostLinearSwapApiV1SwapTriggerCancelall(this.extend(n,t)):c?await this.contractPrivatePostLinearSwapApiV1SwapTpslCancelall(this.extend(n,t)):d?await this.contractPrivatePostLinearSwapApiV1SwapTrackCancelall(this.extend(n,t)):await this.contractPrivatePostLinearSwapApiV1SwapCancelall(this.extend(n,t)):"cross"===e&&(r=o?await this.contractPrivatePostLinearSwapApiV1SwapCrossTriggerCancelall(this.extend(n,t)):c?await this.contractPrivatePostLinearSwapApiV1SwapCrossTpslCancelall(this.extend(n,t)):d?await this.contractPrivatePostLinearSwapApiV1SwapCrossTrackCancelall(this.extend(n,t)):await this.contractPrivatePostLinearSwapApiV1SwapCrossCancelall(this.extend(n,t)))}else if(i.inverse)i.swap?r=o?await this.contractPrivatePostSwapApiV1SwapTriggerCancelall(this.extend(n,t)):c?await this.contractPrivatePostSwapApiV1SwapTpslCancelall(this.extend(n,t)):d?await this.contractPrivatePostSwapApiV1SwapTrackCancelall(this.extend(n,t)):await this.contractPrivatePostSwapApiV1SwapCancelall(this.extend(n,t)):i.future&&(r=o?await this.contractPrivatePostApiV1ContractTriggerCancelall(this.extend(n,t)):c?await this.contractPrivatePostApiV1ContractTpslCancelall(this.extend(n,t)):d?await this.contractPrivatePostApiV1ContractTrackCancelall(this.extend(n,t)):await this.contractPrivatePostApiV1ContractCancelall(this.extend(n,t)));else throw new s.NotSupported(this.id+" cancelAllOrders() does not support "+a+" markets");let p=this.safeDict(r,"data");return this.parseCancelOrders(p)}}async cancelAllOrdersAfter(e,t={}){await this.loadMarkets();let i={timeout:e>0?this.parseToInt(e/1e3):0};return await this.v2PrivatePostAlgoOrdersCancelAllAfter(this.extend(i,t))}parseDepositAddress(e,t){let i=this.safeString(e,"address"),a=this.safeString(e,"addressTag"),s=this.safeString(e,"currency");t=this.safeCurrency(s,t);let r=this.safeCurrencyCode(s,t),n=this.safeString(e,"note"),o=this.safeString(e,"chain");return this.checkAddress(i),{currency:r,address:i,tag:a,network:this.networkIdToCode(o),note:n,info:e}}async fetchDepositAddressesByNetwork(e,t={}){await this.loadMarkets();let i=this.currency(e),a={currency:i.id},s=await this.spotPrivateGetV2AccountDepositAddress(this.extend(a,t)),r=this.safeValue(s,"data",[]),n=this.parseDepositAddresses(r,[i.code],!1);return this.indexBy(n,"network")}async fetchDepositAddress(e,t={}){await this.loadMarkets();let i=this.currency(e),[a,s]=this.handleNetworkCodeAndParams(t),r=await this.fetchDepositAddressesByNetwork(e,s),n=this.selectNetworkCodeFromUnifiedNetworks(i.code,a,r);return r[n]}async fetchWithdrawAddresses(e,t,i,a={}){await this.loadMarkets();let s=this.currency(e),r={currency:s.id},n=await this.spotPrivateGetV2AccountWithdrawAddress(this.extend(r,a)),o=this.safeValue(n,"data",[]),c=this.parseDepositAddresses(o,[s.code],!1),d=[];for(let e=0;e<c.length;e++){let a=c[e],s=void 0===t||a.note===t,r=void 0===i||a.network===i;s&&r&&d.push(a)}return d}async fetchDeposits(e,t,i,a={}){let s;(void 0===i||i>100)&&(i=100),await this.loadMarkets(),void 0!==e&&(s=this.currency(e));let r={type:"deposit",direct:"next",from:0};void 0!==s&&(r.currency=s.id),void 0!==i&&(r.size=i);let n=await this.spotPrivateGetV1QueryDepositWithdraw(this.extend(r,a));return this.parseTransactions(n.data,s,t,i)}async fetchWithdrawals(e,t,i,a={}){let s;(void 0===i||i>100)&&(i=100),await this.loadMarkets(),void 0!==e&&(s=this.currency(e));let r={type:"withdraw",direct:"next",from:0};void 0!==s&&(r.currency=s.id),void 0!==i&&(r.size=i);let n=await this.spotPrivateGetV1QueryDepositWithdraw(this.extend(r,a));return this.parseTransactions(n.data,s,t,i)}parseTransaction(e,t){let i=this.safeInteger(e,"created-at"),a=this.safeCurrencyCode(this.safeString(e,"currency")),s=this.safeString(e,"type");"withdraw"===s&&(s="withdrawal");let n=this.safeString(e,"fee");void 0!==n&&(n=r.Y.stringAbs(n));let o=this.safeString(e,"chain"),c=this.safeString(e,"tx-hash");"ETH"===o&&0>c.indexOf("0x")&&(c="0x"+c);let d=this.safeString(e,"sub-type");return{info:e,id:this.safeString2(e,"id","data"),txid:c,timestamp:i,datetime:this.iso8601(i),network:this.networkIdToCode(o),address:this.safeString(e,"address"),addressTo:void 0,addressFrom:void 0,tag:this.safeString(e,"address-tag"),tagTo:void 0,tagFrom:void 0,type:s,amount:this.safeNumber(e,"amount"),currency:a,status:this.parseTransactionStatus(this.safeString(e,"state")),updated:this.safeInteger(e,"updated-at"),comment:void 0,internal:"FAST"===d,fee:{currency:a,cost:this.parseNumber(n),rate:void 0}}}parseTransactionStatus(e){return this.safeString({unknown:"failed",confirming:"pending",confirmed:"ok",safe:"ok",orphan:"failed",submitted:"pending",canceled:"canceled",reexamine:"pending",reject:"failed",pass:"pending","wallet-reject":"failed","confirm-error":"failed",repealed:"failed","wallet-transfer":"pending","pre-transfer":"pending"},e,e)}async withdraw(e,t,i,a,n={}){let o;[a,n]=this.handleWithdrawTagAndParams(a,n),await this.loadMarkets(),this.checkAddress(i);let c=this.currency(e),d={address:i,currency:c.id.toLowerCase()};void 0!==a&&(d["addr-tag"]=a),[o,n]=this.handleNetworkCodeAndParams(n),void 0!==o&&(d.chain=this.networkCodeToId(o,e)),t=parseFloat(this.currencyToPrecision(e,t,o));let p=this.safeValue(this.options,"withdraw",{});if(this.safeBool(p,"includeFee",!1)){let i=this.safeNumber(n,"fee");if(void 0===i){let e=await this.fetchCurrencies();this.currencies=this.deepExtend(this.currencies,e);let t=this.safeValue(c.networks,o,{});if(void 0===(i=this.safeNumber(t,"fee")))throw new s.ArgumentsRequired(this.id+' withdraw() function can not find withdraw fee for chosen network. You need to re-load markets with "exchange.loadMarkets(true)", or provide the "fee" parameter')}let a=this.currencyToPrecision(e,i,o);n=this.omit(n,"fee");let p=this.numberToString(t),l=parseFloat(r.Y.stringSub(p,a));d.fee=parseFloat(a),t=parseFloat(this.currencyToPrecision(e,l,o))}d.amount=t;let l=await this.spotPrivatePostV1DwWithdrawApiCreate(this.extend(d,n));return this.parseTransaction(l,c)}parseTransfer(e,t){let i=this.safeString(e,"data");return{info:e,id:i,timestamp:void 0,datetime:void 0,currency:this.safeCurrencyCode(void 0,t),amount:void 0,fromAccount:void 0,toAccount:void 0,status:void 0}}async transfer(e,t,i,a,r={}){let n,o;await this.loadMarkets();let c=this.currency(e),d={currency:c.id,amount:parseFloat(this.currencyToPrecision(e,t))};[n,r]=this.handleSubTypeAndParams("transfer",void 0,r);let p=this.convertTypeToAccount(i),l=this.convertTypeToAccount(a),h="cross"===l,u="cross"===p,f=this.inArray(l,this.ids),w=this.inArray(p,this.ids),m="pro"===p,v="pro"===l;if(m&&v)throw new s.BadRequest(this.id+" transfer () cannot make a transfer between "+i+" and "+a);if("futures"===p||"futures"===l){let e=p+"-to-"+l;e=this.safeString(r,"type",e),d.type=e,o=await this.spotPrivatePostV1FuturesTransfer(this.extend(d,r))}else if(m&&h)o=await this.privatePostCrossMarginTransferIn(this.extend(d,r));else if(u&&v)o=await this.privatePostCrossMarginTransferOut(this.extend(d,r));else if(m&&f)d.symbol=l,o=await this.privatePostDwTransferInMargin(this.extend(d,r));else if(w&&v)d.symbol=p,o=await this.privatePostDwTransferOutMargin(this.extend(d,r));else{if("linear"===n){"swap"===p||"linear-swap"===i?p="linear-swap":l="linear-swap";let e=this.safeString(r,"symbol");r=this.omit(r,"symbol"),void 0!==e?(e=this.marketId(e),d["margin-account"]=e):d["margin-account"]="USDT"}d.from=m?"spot":p,d.to=v?"spot":l,o=await this.v2PrivatePostAccountTransfer(this.extend(d,r))}return this.parseTransfer(o,c)}async fetchIsolatedBorrowRates(e={}){await this.loadMarkets();let t=await this.spotPrivateGetV1MarginLoanInfo(e),i=this.safeValue(t,"data",[]);return this.parseIsolatedBorrowRates(i)}parseIsolatedBorrowRate(e,t){let i=this.safeString(e,"symbol"),a=this.safeSymbol(i,t),s=this.safeValue(e,"currencies",[]),r=this.safeValue(s,0),n=this.safeValue(s,1),o=this.safeString(r,"currency"),c=this.safeString(n,"currency");return{symbol:a,base:this.safeCurrencyCode(o),baseRate:this.safeNumber(r,"actual-rate"),quote:this.safeCurrencyCode(c),quoteRate:this.safeNumber(n,"actual-rate"),period:864e5,timestamp:void 0,datetime:void 0,info:e}}async fetchFundingRateHistory(e,t,i,a={}){let r;if(void 0===e)throw new s.ArgumentsRequired(this.id+" fetchFundingRateHistory() requires a symbol argument");let n=!1;if([n,a]=this.handleOptionAndParams(a,"fetchFundingRateHistory","paginate"),n)return await this.fetchPaginatedCallCursor("fetchFundingRateHistory",e,t,i,a,"page_index","current_page",1,50);await this.loadMarkets();let o=this.market(e),c={contract_code:o.id};if(o.inverse)r=await this.contractPublicGetSwapApiV1SwapHistoricalFundingRate(this.extend(c,a));else if(o.linear)r=await this.contractPublicGetLinearSwapApiV1SwapHistoricalFundingRate(this.extend(c,a));else throw new s.NotSupported(this.id+" fetchFundingRateHistory() supports inverse and linear swaps only");let d=this.safeValue(r,"data"),p=this.safeValue(d,"current_page"),l=this.safeValue(d,"data",[]),h=[];for(let e=0;e<l.length;e++){let t=l[e];t.current_page=p;let i=this.safeString(t,"contract_code"),a=this.safeSymbol(i),s=this.safeInteger(t,"funding_time");h.push({info:t,symbol:a,fundingRate:this.safeNumber(t,"funding_rate"),timestamp:s,datetime:this.iso8601(s)})}let u=this.sortBy(h,"timestamp");return this.filterBySymbolSinceLimit(u,o.symbol,t,i)}parseFundingRate(e,t){let i=this.safeNumber(e,"estimated_rate"),a=this.safeInteger(e,"funding_time"),s=this.safeInteger(e,"next_funding_time"),n=this.safeString(e,"funding_time"),o=this.safeString(e,"next_funding_time"),c=r.Y.stringSub(o,n),d=this.safeString(e,"contract_code");return{info:e,symbol:this.safeSymbol(d,t),markPrice:void 0,indexPrice:void 0,interestRate:void 0,estimatedSettlePrice:void 0,timestamp:void 0,datetime:void 0,fundingRate:this.safeNumber(e,"funding_rate"),fundingTimestamp:a,fundingDatetime:this.iso8601(a),nextFundingRate:i,nextFundingTimestamp:s,nextFundingDatetime:this.iso8601(s),previousFundingRate:void 0,previousFundingTimestamp:void 0,previousFundingDatetime:void 0,interval:this.parseFundingInterval(c)}}parseFundingInterval(e){return this.safeString({36e5:"1h",144e5:"4h",288e5:"8h",576e5:"16h",864e5:"24h"},e,e)}async fetchFundingRate(e,t={}){let i;await this.loadMarkets();let a=this.market(e),r={contract_code:a.id};if(a.inverse)i=await this.contractPublicGetSwapApiV1SwapFundingRate(this.extend(r,t));else if(a.linear)i=await this.contractPublicGetLinearSwapApiV1SwapFundingRate(this.extend(r,t));else throw new s.NotSupported(this.id+" fetchFundingRate() supports inverse and linear swaps only");let n=this.safeValue(i,"data",{});return this.parseFundingRate(n,a)}async fetchFundingRates(e,t={}){let i;await this.loadMarkets(),e=this.marketSymbols(e);let a=this.safeValue(this.options,"fetchFundingRates",{}),r=this.safeString(this.options,"defaultSubType","inverse"),n=this.safeString(a,"subType",r);n=this.safeString(t,"subType",n);let o={};if(t=this.omit(t,"subType"),"linear"===n)i=await this.contractPublicGetLinearSwapApiV1SwapBatchFundingRate(this.extend(o,t));else if("inverse"===n)i=await this.contractPublicGetSwapApiV1SwapBatchFundingRate(this.extend(o,t));else throw new s.NotSupported(this.id+" fetchFundingRates() not support this market type");let c=this.safeValue(i,"data",[]);return this.parseFundingRates(c,e)}async fetchBorrowInterest(e,t,i,a,s={}){let r,n,o;await this.loadMarkets(),[r,s]=this.handleMarginModeAndParams("fetchBorrowInterest",s),r=void 0===r?"cross":r;let c={};if(void 0!==i&&(c["start-date"]=this.yyyymmdd(i)),void 0!==a&&(c.size=a),"isolated"===r)void 0!==t&&(n=this.market(t),c.symbol=n.id),o=await this.privateGetMarginLoanOrders(this.extend(c,s));else{if(void 0!==e){let t=this.currency(e);c.currency=t.id}o=await this.privateGetCrossMarginLoanOrders(this.extend(c,s))}let d=this.safeValue(o,"data"),p=this.parseBorrowInterests(d,n);return this.filterByCurrencySinceLimit(p,e,i,a)}parseBorrowInterest(e,t){let i=this.safeString(e,"symbol"),a=void 0===i?"cross":"isolated";t=this.safeMarket(i);let s=this.safeString(t,"symbol"),r=this.safeInteger(e,"accrued-at");return{info:e,symbol:s,currency:this.safeCurrencyCode(this.safeString(e,"currency")),interest:this.safeNumber(e,"interest-amount"),interestRate:this.safeNumber(e,"interest-rate"),amountBorrowed:this.safeNumber(e,"loan-amount"),marginMode:a,timestamp:r,datetime:this.iso8601(r)}}nonce(){return this.milliseconds()-this.options.timeDifference}sign(e,t="public",i="GET",a={},s,r){let n="/",c=this.omit(a,this.extractParams(e));if("string"==typeof t){if("public"===t||"private"===t?n+=this.version:("v2Public"===t||"v2Private"===t)&&(n+="v2"),n+="/"+this.implodeParams(e,a),"private"===t||"v2Private"===t){this.checkRequiredCredentials();let e=this.ymdhms(this.nonce(),"T"),t={SignatureMethod:"HmacSHA256",SignatureVersion:"2",AccessKeyId:this.apiKey,Timestamp:e};"POST"!==i&&(t=this.extend(t,c));let a=this.keysort(t),d=this.urlencode(a),p=[i,this.hostname,n,d].join("\n"),l=this.hmac(this.encode(p),this.encode(this.secret),o.s,"base64");d+="&"+this.urlencode({Signature:l}),n+="?"+d,"POST"===i?(r=this.json(c),s={"Content-Type":"application/json"}):s={"Content-Type":"application/x-www-form-urlencoded"}}else Object.keys(c).length&&(n+="?"+this.urlencode(c));n=this.implodeParams(this.urls.api[t],{hostname:this.hostname})+n}else{let d;let p=this.safeString(t,0),l=this.safeString(t,1),h=this.safeString(t,2),u=this.safeString(t,3),f=this.safeValue(this.urls.hostnames,p);if("string"!=typeof f&&"string"!=typeof(f=this.safeValue(f,h))&&void 0!==u&&(f=this.safeValue(f,u)),d=f,n+=this.implodeParams(e,a),"public"===l)Object.keys(c).length&&(n+="?"+this.urlencode(c));else if("private"===l){if(this.checkRequiredCredentials(),"POST"===i){let t=this.safeValue(this.options,"broker",{}),i=this.safeString(t,"id","AA03022abc");-1===e.indexOf("cancel")&&e.endsWith("order")?void 0===this.safeString(a,"channel_code")&&(a.channel_code=i):e.endsWith("orders/place")&&void 0===this.safeString(a,"client-order-id")&&(a["client-order-id"]=i+this.uuid())}let t=this.ymdhms(this.nonce(),"T"),p={SignatureMethod:"HmacSHA256",SignatureVersion:"2",AccessKeyId:this.apiKey,Timestamp:t};"POST"!==i&&(p=this.extend(p,c)),p=this.keysort(p);let l=this.urlencode(p),h=[i,d,n,l].join("\n"),u=this.hmac(this.encode(h),this.encode(this.secret),o.s,"base64");l+="&"+this.urlencode({Signature:u}),n+="?"+l,"POST"===i?(2===(r=this.json(c)).length&&(r="{}"),s={"Content-Type":"application/json"}):s={"Content-Type":"application/x-www-form-urlencoded"}}n=this.implodeParams(this.urls.api[p],{hostname:d})+n}return{url:n,method:i,body:r,headers:s}}handleErrors(e,t,i,a,r,n,o,c,d){if(void 0!==o){if("status"in o&&"error"===this.safeString(o,"status")){let e=this.safeString2(o,"err-code","err_code"),t=this.id+" "+n;this.throwBroadlyMatchedException(this.exceptions.broad,n,t),this.throwExactlyMatchedException(this.exceptions.exact,e,t);let i=this.safeString2(o,"err-msg","err_msg");throw this.throwExactlyMatchedException(this.exceptions.exact,i,t),new s.ExchangeError(t)}if("code"in o){let e=this.id+" "+n,t=this.safeString(o,"code");this.throwExactlyMatchedException(this.exceptions.exact,t,e)}}}async fetchFundingHistory(e,t,i,a={}){let s;await this.loadMarkets();let r=this.market(e),[n,o]=this.handleMarketTypeAndParams("fetchFundingHistory",r,a),c={type:"30,31"};if(void 0!==t&&(c.start_date=t),"swap"===n){if(c.contract=r.id,r.linear){let e;[e,a]=this.handleMarginModeAndParams("fetchFundingHistory",a),"isolated"===(e=void 0===e?"cross":e)?c.mar_acct=r.id:c.mar_acct=r.quoteId,s=await this.contractPrivatePostLinearSwapApiV3SwapFinancialRecordExact(this.extend(c,o))}else s=await this.contractPrivatePostSwapApiV3SwapFinancialRecordExact(this.extend(c,o))}else c.symbol=r.id,s=await this.contractPrivatePostApiV3ContractFinancialRecordExact(this.extend(c,o));let d=this.safeList(s,"data",[]);return this.parseIncomes(d,r,t,i)}async setLeverage(e,t,i={}){let a;if(void 0===t)throw new s.ArgumentsRequired(this.id+" setLeverage() requires a symbol argument");await this.loadMarkets();let r=this.market(t),[n,o]=this.handleMarketTypeAndParams("setLeverage",r,i),c={lever_rate:e};if("future"===n&&r.inverse?c.symbol=r.settleId:c.contract_code=r.id,r.linear){let e;if([e,i]=this.handleMarginModeAndParams("setLeverage",i),"isolated"===(e=void 0===e?"cross":e))a=await this.contractPrivatePostLinearSwapApiV1SwapSwitchLeverRate(this.extend(c,o));else if("cross"===e)a=await this.contractPrivatePostLinearSwapApiV1SwapCrossSwitchLeverRate(this.extend(c,o));else throw new s.NotSupported(this.id+" setLeverage() not support this market type")}else if("future"===n)a=await this.contractPrivatePostApiV1ContractSwitchLeverRate(this.extend(c,o));else if("swap"===n)a=await this.contractPrivatePostSwapApiV1SwapSwitchLeverRate(this.extend(c,o));else throw new s.NotSupported(this.id+" setLeverage() not support this market type");return a}parseIncome(e,t){let i=this.safeString(e,"contract_code"),a=this.safeSymbol(i,t),s=this.safeNumber(e,"amount"),r=this.safeInteger(e,"ts"),n=this.safeString(e,"id"),o=this.safeString2(e,"symbol","asset");return{info:e,symbol:a,code:this.safeCurrencyCode(o),timestamp:r,datetime:this.iso8601(r),id:n,amount:s}}parsePosition(e,t){let i;let a=(t=this.safeMarket(this.safeString(e,"contract_code"))).symbol,s=this.safeString(e,"volume"),n=this.safeValue(t,"contractSize"),o=this.numberToString(n),c=this.safeNumber(e,"cost_open"),d=this.safeString(e,"position_margin"),p=this.safeString(e,"direction"),l=this.safeNumber(e,"profit_unreal"),h=this.safeString(e,"margin_mode"),u=this.safeString(e,"lever_rate"),f=r.Y.stringMul(this.safeString(e,"profit_rate"),"100"),w=this.safeString(e,"last_price"),m=r.Y.stringMul(s,o);t.linear?i=r.Y.stringMul(m,w):(i=r.Y.stringDiv(m,w),h="cross");let v=r.Y.stringDiv(d,i),g=this.safeString(e,"margin_balance"),_=this.safeNumber(e,"liquidation_price"),y=this.safeString(e,"adjust_factor"),S=r.Y.stringDiv(y,u),P=r.Y.stringMul(S,i),b=r.Y.stringDiv(P,g);return this.safePosition({info:e,id:void 0,symbol:a,contracts:this.parseNumber(s),contractSize:n,entryPrice:c,collateral:this.parseNumber(g),side:"buy"===p?"long":"short",unrealizedPnl:l,leverage:this.parseNumber(u),percentage:this.parseNumber(f),marginMode:h,notional:this.parseNumber(i),markPrice:void 0,lastPrice:void 0,liquidationPrice:_,initialMargin:this.parseNumber(d),initialMarginPercentage:this.parseNumber(v),maintenanceMargin:this.parseNumber(P),maintenanceMarginPercentage:this.parseNumber(S),marginRatio:this.parseNumber(b),timestamp:void 0,datetime:void 0,hedged:void 0,lastUpdateTimestamp:void 0,stopLossPrice:void 0,takeProfitPrice:void 0})}async fetchPositions(e,t={}){let i,a,r,n,o;if(await this.loadMarkets(),void 0!==(e=this.marketSymbols(e))&&e.length>0){let t=this.safeString(e,0);i=this.market(t)}if([a,t]=this.handleMarginModeAndParams("fetchPositions",t,"cross"),[r,t]=this.handleSubTypeAndParams("fetchPositions",i,t,"linear"),[n,t]=this.handleMarketTypeAndParams("fetchPositions",i,t),"spot"===n&&(n="future"),"linear"===r){if("isolated"===a)o=await this.contractPrivatePostLinearSwapApiV1SwapPositionInfo(t);else if("cross"===a)o=await this.contractPrivatePostLinearSwapApiV1SwapCrossPositionInfo(t);else throw new s.NotSupported(this.id+" fetchPositions() not support this market type")}else if("future"===n)o=await this.contractPrivatePostApiV1ContractPositionInfo(t);else if("swap"===n)o=await this.contractPrivatePostSwapApiV1SwapPositionInfo(t);else throw new s.NotSupported(this.id+" fetchPositions() not support this market type");let c=this.safeValue(o,"data",[]),d=this.safeInteger(o,"ts"),p=[];for(let e=0;e<c.length;e++){let t=c[e],i=this.parsePosition(t);p.push(this.extend(i,{timestamp:d,datetime:this.iso8601(d)}))}return this.filterByArrayPositions(p,"symbol",e,!1)}async fetchPosition(e,t={}){let i,a,r,n;await this.loadMarkets();let o=this.market(e);[i,t]=this.handleMarginModeAndParams("fetchPosition",t),i=void 0===i?"cross":i;let[c,d]=this.handleMarketTypeAndParams("fetchPosition",o,t),p={};if(o.future&&o.inverse?p.symbol=o.settleId:("cross"===i&&(p.margin_account="USDT"),p.contract_code=o.id),o.linear){if("isolated"===i)a=await this.contractPrivatePostLinearSwapApiV1SwapAccountPositionInfo(this.extend(p,d));else if("cross"===i)a=await this.contractPrivatePostLinearSwapApiV1SwapCrossAccountPositionInfo(this.extend(p,d));else throw new s.NotSupported(this.id+" fetchPosition() not support this market type")}else if("future"===c)a=await this.contractPrivatePostApiV1ContractAccountPositionInfo(this.extend(p,d));else if("swap"===c)a=await this.contractPrivatePostSwapApiV1SwapAccountPositionInfo(this.extend(p,d));else throw new s.NotSupported(this.id+" setLeverage() not support this market type");let l=this.safeValue(a,"data");r="cross"===i?l:this.safeValue(l,0);let h=this.omit(r,["positions"]),u=this.safeValue(r,"positions");if(o.future&&o.inverse)for(let e=0;e<u.length;e++){let t=u[e];if(t.contract_code===o.id){n=t;break}}else n=this.safeValue(u,0);let f=this.safeInteger(a,"ts"),w=this.parsePosition(this.extend(n,h));return w.timestamp=f,w.datetime=this.iso8601(f),w}parseLedgerEntryType(e){return this.safeString({trade:"trade",etf:"trade","transact-fee":"fee","fee-deduction":"fee",transfer:"transfer",credit:"credit",liquidation:"trade",interest:"credit",deposit:"deposit",withdraw:"withdrawal","withdraw-fee":"fee",exchange:"exchange","other-types":"transfer",rebate:"rebate"},e,e)}parseLedgerEntry(e,t){let i=this.safeString(e,"currency"),a=this.safeCurrencyCode(i,t);t=this.safeCurrency(i,t);let s=this.safeString(e,"transactId"),r=this.safeString(e,"transferType"),n=this.safeInteger(e,"transactTime"),o=this.safeString(e,"accountId");return this.safeLedgerEntry({info:e,id:s,direction:this.safeString(e,"direction"),account:o,referenceId:s,referenceAccount:o,type:this.parseLedgerEntryType(r),currency:a,amount:this.safeNumber(e,"transactAmt"),timestamp:n,datetime:this.iso8601(n),before:void 0,after:void 0,status:void 0,fee:void 0},t)}async fetchLedger(e,t,i,a={}){let s;await this.loadMarkets();let r=!1;if([r,a]=this.handleOptionAndParams(a,"fetchLedger","paginate"),r)return await this.fetchPaginatedCallDynamic("fetchLedger",e,t,i,a,500);let n={accountId:await this.fetchAccountIdByType("spot",void 0,void 0,a)};void 0!==e&&(s=this.currency(e),n.currency=s.id),void 0!==t&&(n.startTime=t),void 0!==i&&(n.limit=i),[n,a]=this.handleUntilOption("endTime",n,a);let o=await this.spotPrivateGetV2AccountLedger(this.extend(n,a)),c=this.safeValue(o,"data",[]);return this.parseLedger(c,s,t,i)}async fetchLeverageTiers(e,t={}){await this.loadMarkets();let i=await this.contractPublicGetLinearSwapApiV1SwapAdjustfactor(t),a=this.safeList(i,"data",[]);return this.parseLeverageTiers(a,e,"contract_code")}parseMarketLeverageTiers(e,t){let i=this.safeString(e,"trade_partition"),a=this.safeString(e,"contract_code"),s=[],n=this.safeList(e,"list",[]);for(let e=0;e<n.length;e++){let o=n[e],c=this.safeString(o,"lever_rate"),d=this.safeList(o,"ladders",[]);for(let e=0;e<d.length;e++){let n=d[e],o=this.safeString(n,"adjust_factor");s.push({tier:this.safeInteger(n,"ladder"),symbol:this.safeSymbol(a,t,void 0,"swap"),currency:this.safeCurrencyCode(i),minNotional:this.safeNumber(n,"min_size"),maxNotional:this.safeNumber(n,"max_size"),maintenanceMarginRate:this.parseNumber(r.Y.stringDiv(o,c)),maxLeverage:this.parseNumber(c),info:n})}}return s}async fetchOpenInterestHistory(e,t="1h",i,a,r={}){let n;if("1h"!==t&&"4h"!==t&&"12h"!==t&&"1d"!==t)throw new s.BadRequest(this.id+" fetchOpenInterestHistory cannot only use the 1h, 4h, 12h and 1d timeframe");await this.loadMarkets();let o=this.market(e),c={period:{"1h":"60min","4h":"4hour","12h":"12hour","1d":"1day"}[t],amount_type:this.safeInteger2(r,"amount_type","amountType",2)};void 0!==a&&(c.size=a),o.future?(c.contract_type=this.safeString(o.info,"contract_type"),c.symbol=o.baseId,n=await this.contractPublicGetApiV1ContractHisOpenInterest(this.extend(c,r))):o.linear?(c.contract_type="swap",c.contract_code=o.id,c.contract_code=o.id,n=await this.contractPublicGetLinearSwapApiV1SwapHisOpenInterest(this.extend(c,r))):(c.contract_code=o.id,n=await this.contractPublicGetSwapApiV1SwapHisOpenInterest(this.extend(c,r)));let d=this.safeValue(n,"data"),p=this.safeList(d,"tick");return this.parseOpenInterestsHistory(p,o,i,a)}async fetchOpenInterests(e,t={}){let i,a,s,r;if(await this.loadMarkets(),void 0!==(e=this.marketSymbols(e))&&e.length>0){let t=this.safeString(e,0);i=this.market(t)}let n={};[a,t]=this.handleSubTypeAndParams("fetchPositions",i,t,"linear"),[s,t]=this.handleMarketTypeAndParams("fetchPositions",i,t),"future"===s?r=await this.contractPublicGetApiV1ContractOpenInterest(this.extend(n,t)):"inverse"===a?r=await this.contractPublicGetSwapApiV1SwapOpenInterest(this.extend(n,t)):(n.contract_type="swap",r=await this.contractPublicGetLinearSwapApiV1SwapOpenInterest(this.extend(n,t)));let o=this.safeList(r,"data",[]);return this.parseOpenInterests(o,e)}async fetchOpenInterest(e,t={}){let i;await this.loadMarkets();let a=this.market(e);if(!a.contract)throw new s.BadRequest(this.id+" fetchOpenInterest() supports contract markets only");if(a.option)throw new s.NotSupported(this.id+" fetchOpenInterest() does not currently support option markets");let r={contract_code:a.id};a.future?(r.contract_type=this.safeString(a.info,"contract_type"),r.symbol=a.baseId,i=await this.contractPublicGetApiV1ContractOpenInterest(this.extend(r,t))):a.linear?(r.contract_type="swap",i=await this.contractPublicGetLinearSwapApiV1SwapOpenInterest(this.extend(r,t))):i=await this.contractPublicGetSwapApiV1SwapOpenInterest(this.extend(r,t));let n=this.safeValue(i,"data",[]),o=this.parseOpenInterest(n[0],a),c=this.safeInteger(i,"ts");return o.timestamp=c,o.datetime=this.iso8601(c),o}parseOpenInterest(e,t){let i=this.safeInteger(e,"ts"),a=this.safeNumber(e,"volume"),s=this.safeNumber(e,"value"),r=this.safeString(e,"contract_code");return this.safeOpenInterest({symbol:this.safeSymbol(r,t),baseVolume:a,quoteVolume:s,openInterestAmount:a,openInterestValue:s,timestamp:i,datetime:this.iso8601(i),info:e},t)}async borrowIsolatedMargin(e,t,i,a={}){await this.loadMarkets();let s=this.currency(t),r=this.market(e),n={currency:s.id,amount:this.currencyToPrecision(t,i),symbol:r.id},o=await this.privatePostMarginOrders(this.extend(n,a)),c=this.parseMarginLoan(o,s);return this.extend(c,{amount:i,symbol:e})}async borrowCrossMargin(e,t,i={}){await this.loadMarkets();let a=this.currency(e),s={currency:a.id,amount:this.currencyToPrecision(e,t)},r=await this.privatePostCrossMarginOrders(this.extend(s,i)),n=this.parseMarginLoan(r,a);return this.extend(n,{amount:t})}async repayIsolatedMargin(e,t,i,a={}){await this.loadMarkets();let s=this.currency(t),r=await this.fetchAccountIdByType("spot","isolated",e,a),n={currency:s.id,amount:this.currencyToPrecision(t,i),accountId:r},o=await this.v2PrivatePostAccountRepayment(this.extend(n,a)),c=this.safeValue(o,"Data",[]),d=this.safeValue(c,0),p=this.parseMarginLoan(d,s);return this.extend(p,{amount:i,symbol:e})}async repayCrossMargin(e,t,i={}){await this.loadMarkets();let a=this.currency(e),s=await this.fetchAccountIdByType("spot","cross",void 0,i),r={currency:a.id,amount:this.currencyToPrecision(e,t),accountId:s},n=await this.v2PrivatePostAccountRepayment(this.extend(r,i)),o=this.safeValue(n,"Data",[]),c=this.safeValue(o,0),d=this.parseMarginLoan(c,a);return this.extend(d,{amount:t})}parseMarginLoan(e,t){let i=this.safeInteger(e,"repayTime");return{id:this.safeString2(e,"repayId","data"),currency:this.safeCurrencyCode(void 0,t),amount:void 0,symbol:void 0,timestamp:i,datetime:this.iso8601(i),info:e}}async fetchSettlementHistory(e,t,i,a={}){let r;if(void 0===e)throw new s.ArgumentsRequired(this.id+" fetchSettlementHistory() requires a symbol argument");let n=this.safeInteger(a,"until");a=this.omit(a,["until"]);let o=this.market(e),c={};o.future?c.symbol=o.baseId:c.contract_code=o.id,void 0!==t&&(c.start_at=t),void 0!==i&&(c.page_size=i),void 0!==n&&(c.end_at=n),r=o.swap?o.linear?await this.contractPublicGetLinearSwapApiV1SwapSettlementRecords(this.extend(c,a)):await this.contractPublicGetSwapApiV1SwapSettlementRecords(this.extend(c,a)):await this.contractPublicGetApiV1ContractSettlementRecords(this.extend(c,a));let d=this.safeValue(r,"data"),p=this.safeValue(d,"settlement_record"),l=this.parseSettlements(p,o);return this.sortBy(l,"timestamp")}async fetchDepositWithdrawFees(e,t={}){await this.loadMarkets();let i=await this.spotPublicGetV2ReferenceCurrencies(t),a=this.safeList(i,"data");return this.parseDepositWithdrawFees(a,e,"currency")}parseDepositWithdrawFee(e,t){let i=this.safeValue(e,"chains",[]),a=this.depositWithdrawFee(e);for(let e=0;e<i.length;e++){let s;let r=i[e],n=this.safeString(r,"chain"),o=this.safeString(r,"withdrawFeeType"),c=this.networkIdToCode(n);s="fixed"===o?{fee:this.safeNumber(r,"transactFeeWithdraw"),percentage:!1}:{fee:this.safeNumber(r,"transactFeeRateWithdraw"),percentage:!0},a.networks[c]={withdraw:s,deposit:{fee:void 0,percentage:void 0}},a=this.assignDefaultDepositWithdrawFees(a,t)}return a}parseSettlements(e,t){let i=[];for(let a=0;a<e.length;a++){let s=e[a],r=this.safeValue(s,"list");if(void 0!==r){let e=this.safeInteger(s,"settlement_time"),a={timestamp:e,datetime:this.iso8601(e)};for(let e=0;e<r.length;e++){let s=r[e],n=this.parseSettlement(s,t);i.push(this.extend(n,a))}}else i.push(this.parseSettlement(e[a],t))}return i}parseSettlement(e,t){let i=this.safeInteger(e,"settlement_time"),a=this.safeString(e,"contract_code");return{info:e,symbol:this.safeSymbol(a,t),price:this.safeNumber(e,"settlement_price"),timestamp:i,datetime:this.iso8601(i)}}async fetchLiquidations(e,t,i,a={}){let r;await this.loadMarkets();let n=this.market(e),o={trade_type:this.safeInteger(a,"trade_type",0)};if(void 0!==t&&(o.start_time=t),[o,a]=this.handleUntilOption("end_time",o,a),n.swap)o.contract=n.id,r=n.linear?await this.contractPublicGetLinearSwapApiV3SwapLiquidationOrders(this.extend(o,a)):await this.contractPublicGetSwapApiV3SwapLiquidationOrders(this.extend(o,a));else if(n.future)o.symbol=n.id,r=await this.contractPublicGetApiV3ContractLiquidationOrders(this.extend(o,a));else throw new s.NotSupported(this.id+" fetchLiquidations() does not support "+n.type+" orders");let c=this.safeList(r,"data",[]);return this.parseLiquidations(c,n,t,i)}parseLiquidation(e,t){let i=this.safeString(e,"contract_code"),a=this.safeInteger(e,"created_at");return this.safeLiquidation({info:e,symbol:this.safeSymbol(i,t),contracts:this.safeNumber(e,"volume"),contractSize:this.safeNumber(t,"contractSize"),price:this.safeNumber(e,"price"),baseValue:this.safeNumber(e,"amount"),quoteValue:this.safeNumber(e,"trade_turnover"),timestamp:a,datetime:this.iso8601(a)})}async closePosition(e,t,i={}){let a;await this.loadMarkets();let r=this.market(e),n=this.safeString(i,"clientOrderId");if(!r.contract)throw new s.BadRequest(this.id+" closePosition() symbol supports contract markets only");this.checkRequiredArgument("closePosition",t,"side");let o={contract_code:r.id,direction:t};if(void 0!==n&&(o.client_order_id=n),r.inverse){let t=this.safeString2(i,"volume","amount");if(void 0===t)throw new s.ArgumentsRequired(this.id+' closePosition () requires an extra argument params["amount"] for inverse markets');o.volume=this.amountToPrecision(e,t)}if(i=this.omit(i,["clientOrderId","volume","amount"]),r.inverse)a=r.swap?await this.contractPrivatePostSwapApiV1SwapLightningClosePosition(this.extend(o,i)):await this.contractPrivatePostApiV1LightningClosePosition(this.extend(o,i));else{let e;[e,i]=this.handleMarginModeAndParams("closePosition",i,"cross"),a="cross"===e?await this.contractPrivatePostLinearSwapApiV1SwapCrossLightningClosePosition(this.extend(o,i)):await this.contractPrivatePostLinearSwapApiV1SwapLightningClosePosition(this.extend(o,i))}return this.parseOrder(a,r)}async setPositionMode(e,t,i={}){let a,r,n;await this.loadMarkets(),void 0!==t&&(a=this.market(t)),[r,i]=this.handleMarginModeAndParams("setPositionMode",i,"cross");let o={position_mode:e?"dual_side":"single_side"};if(void 0!==a&&a.inverse)throw new s.BadRequest(this.id+" setPositionMode can only be used for linear markets");if("isolated"===r){if(void 0===t)throw new s.ArgumentsRequired(this.id+" setPositionMode requires a symbol argument for isolated margin mode");o.margin_account=a.id,n=await this.contractPrivatePostLinearSwapApiV1SwapSwitchPositionMode(this.extend(o,i))}else o.margin_account="USDT",n=await this.contractPrivatePostLinearSwapApiV1SwapCrossSwitchPositionMode(this.extend(o,i));return n}}}}]);