"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[814],{9478:(e,t,r)=>{r.d(t,{A:()=>u});var i=r(1185),s=r(6077),a=r(3675),n=r(8119),o=r(5432);class u extends i.A{describe(){return this.deepExtend(super.describe(),{id:"xt",name:"XT",countries:["SC"],rateLimit:100,version:"v4",certified:!1,pro:!0,has:{CORS:!1,spot:!0,margin:!0,swap:!0,future:!0,option:!1,addMargin:!0,borrowMargin:!1,cancelAllOrders:!0,cancelOrder:!0,cancelOrders:!0,createDepositAddress:!1,createMarketBuyOrderWithCost:!0,createMarketSellOrderWithCost:!1,createOrder:!0,createPostOnlyOrder:!1,createReduceOnlyOrder:!0,editOrder:!1,fetchAccounts:!1,fetchBalance:!0,fetchBidsAsks:!0,fetchBorrowInterest:!1,fetchBorrowRate:!1,fetchBorrowRateHistories:!1,fetchBorrowRateHistory:!1,fetchBorrowRatesPerSymbol:!1,fetchCanceledOrders:!0,fetchClosedOrders:!0,fetchCurrencies:!0,fetchDeposit:!1,fetchDepositAddress:!0,fetchDepositAddresses:!1,fetchDepositAddressesByNetwork:!1,fetchDeposits:!0,fetchDepositWithdrawals:!1,fetchDepositWithdrawFee:!1,fetchDepositWithdrawFees:!1,fetchFundingHistory:!0,fetchFundingInterval:!0,fetchFundingIntervals:!1,fetchFundingRate:!0,fetchFundingRateHistory:!0,fetchFundingRates:!1,fetchIndexOHLCV:!1,fetchL3OrderBook:!1,fetchLedger:!0,fetchLedgerEntry:!1,fetchLeverage:!1,fetchLeverageTiers:!0,fetchMarketLeverageTiers:!0,fetchMarkets:!0,fetchMarkOHLCV:!1,fetchMyTrades:!0,fetchOHLCV:!0,fetchOpenInterest:!1,fetchOpenInterestHistory:!1,fetchOpenOrders:!0,fetchOrder:!0,fetchOrderBook:!0,fetchOrderBooks:!1,fetchOrders:!0,fetchOrdersByStatus:!0,fetchOrderTrades:!1,fetchPosition:!0,fetchPositions:!0,fetchPremiumIndexOHLCV:!1,fetchSettlementHistory:!1,fetchStatus:!1,fetchTicker:!0,fetchTickers:!0,fetchTime:!0,fetchTrades:!0,fetchTradingFee:!1,fetchTradingFees:!1,fetchTradingLimits:!1,fetchTransactionFee:!1,fetchTransactionFees:!1,fetchTransactions:!1,fetchTransfer:!1,fetchTransfers:!1,fetchWithdrawal:!1,fetchWithdrawals:!0,fetchWithdrawalWhitelist:!1,reduceMargin:!0,repayMargin:!1,setLeverage:!0,setMargin:!1,setMarginMode:!1,setPositionMode:!1,signIn:!1,transfer:!0,withdraw:!0},precisionMode:a.kb,urls:{logo:"https://user-images.githubusercontent.com/14319357/232636712-466df2fc-560a-4ca4-aab2-b1d954a58e24.jpg",api:{spot:"https://sapi.xt.com",linear:"https://fapi.xt.com",inverse:"https://dapi.xt.com",user:"https://api.xt.com"},www:"https://xt.com",referral:"https://www.xt.com/en/accounts/register?ref=9PTM9VW",doc:["https://doc.xt.com/","https://github.com/xtpub/api-doc"],fees:"https://www.xt.com/en/rate"},api:{public:{spot:{get:{currencies:1,depth:10,kline:1,symbol:1,ticker:1,"ticker/book":1,"ticker/price":1,"ticker/24h":1,time:1,"trade/history":1,"trade/recent":1,"wallet/support/currency":1}},linear:{get:{"future/market/v1/public/contract/risk-balance":1,"future/market/v1/public/contract/open-interest":1,"future/market/v1/public/leverage/bracket/detail":1,"future/market/v1/public/leverage/bracket/list":1,"future/market/v1/public/q/agg-ticker":1,"future/market/v1/public/q/agg-tickers":1,"future/market/v1/public/q/deal":1,"future/market/v1/public/q/depth":1,"future/market/v1/public/q/funding-rate":1,"future/market/v1/public/q/funding-rate-record":1,"future/market/v1/public/q/index-price":1,"future/market/v1/public/q/kline":1,"future/market/v1/public/q/mark-price":1,"future/market/v1/public/q/symbol-index-price":1,"future/market/v1/public/q/symbol-mark-price":1,"future/market/v1/public/q/ticker":1,"future/market/v1/public/q/tickers":1,"future/market/v1/public/symbol/coins":3.33,"future/market/v1/public/symbol/detail":3.33,"future/market/v1/public/symbol/list":1}},inverse:{get:{"future/market/v1/public/contract/risk-balance":1,"future/market/v1/public/contract/open-interest":1,"future/market/v1/public/leverage/bracket/detail":1,"future/market/v1/public/leverage/bracket/list":1,"future/market/v1/public/q/agg-ticker":1,"future/market/v1/public/q/agg-tickers":1,"future/market/v1/public/q/deal":1,"future/market/v1/public/q/depth":1,"future/market/v1/public/q/funding-rate":1,"future/market/v1/public/q/funding-rate-record":1,"future/market/v1/public/q/index-price":1,"future/market/v1/public/q/kline":1,"future/market/v1/public/q/mark-price":1,"future/market/v1/public/q/symbol-index-price":1,"future/market/v1/public/q/symbol-mark-price":1,"future/market/v1/public/q/ticker":1,"future/market/v1/public/q/tickers":1,"future/market/v1/public/symbol/coins":3.33,"future/market/v1/public/symbol/detail":3.33,"future/market/v1/public/symbol/list":1}}},private:{spot:{get:{balance:1,balances:1,"batch-order":1,"deposit/address":1,"deposit/history":1,"history-order":1,"open-order":1,order:1,"order/{orderId}":1,trade:1,"withdraw/history":1},post:{order:.2,withdraw:10,"balance/transfer":1,"balance/account/transfer":1,"ws-token":1},delete:{"batch-order":1,"open-order":1,"order/{orderId}":1}},linear:{get:{"future/trade/v1/entrust/plan-detail":1,"future/trade/v1/entrust/plan-list":1,"future/trade/v1/entrust/plan-list-history":1,"future/trade/v1/entrust/profit-detail":1,"future/trade/v1/entrust/profit-list":1,"future/trade/v1/order/detail":1,"future/trade/v1/order/list":1,"future/trade/v1/order/list-history":1,"future/trade/v1/order/trade-list":1,"future/user/v1/account/info":1,"future/user/v1/balance/bills":1,"future/user/v1/balance/detail":1,"future/user/v1/balance/funding-rate-list":1,"future/user/v1/balance/list":1,"future/user/v1/position/adl":1,"future/user/v1/position/list":1,"future/user/v1/user/collection/list":1,"future/user/v1/user/listen-key":1},post:{"future/trade/v1/entrust/cancel-all-plan":1,"future/trade/v1/entrust/cancel-all-profit-stop":1,"future/trade/v1/entrust/cancel-plan":1,"future/trade/v1/entrust/cancel-profit-stop":1,"future/trade/v1/entrust/create-plan":1,"future/trade/v1/entrust/create-profit":1,"future/trade/v1/entrust/update-profit-stop":1,"future/trade/v1/order/cancel":1,"future/trade/v1/order/cancel-all":1,"future/trade/v1/order/create":1,"future/trade/v1/order/create-batch":1,"future/user/v1/account/open":1,"future/user/v1/position/adjust-leverage":1,"future/user/v1/position/auto-margin":1,"future/user/v1/position/close-all":1,"future/user/v1/position/margin":1,"future/user/v1/user/collection/add":1,"future/user/v1/user/collection/cancel":1}},inverse:{get:{"future/trade/v1/entrust/plan-detail":1,"future/trade/v1/entrust/plan-list":1,"future/trade/v1/entrust/plan-list-history":1,"future/trade/v1/entrust/profit-detail":1,"future/trade/v1/entrust/profit-list":1,"future/trade/v1/order/detail":1,"future/trade/v1/order/list":1,"future/trade/v1/order/list-history":1,"future/trade/v1/order/trade-list":1,"future/user/v1/account/info":1,"future/user/v1/balance/bills":1,"future/user/v1/balance/detail":1,"future/user/v1/balance/funding-rate-list":1,"future/user/v1/balance/list":1,"future/user/v1/position/adl":1,"future/user/v1/position/list":1,"future/user/v1/user/collection/list":1,"future/user/v1/user/listen-key":1},post:{"future/trade/v1/entrust/cancel-all-plan":1,"future/trade/v1/entrust/cancel-all-profit-stop":1,"future/trade/v1/entrust/cancel-plan":1,"future/trade/v1/entrust/cancel-profit-stop":1,"future/trade/v1/entrust/create-plan":1,"future/trade/v1/entrust/create-profit":1,"future/trade/v1/entrust/update-profit-stop":1,"future/trade/v1/order/cancel":1,"future/trade/v1/order/cancel-all":1,"future/trade/v1/order/create":1,"future/trade/v1/order/create-batch":1,"future/user/v1/account/open":1,"future/user/v1/position/adjust-leverage":1,"future/user/v1/position/auto-margin":1,"future/user/v1/position/close-all":1,"future/user/v1/position/margin":1,"future/user/v1/user/collection/add":1,"future/user/v1/user/collection/cancel":1}},user:{get:{"user/account":1,"user/account/api-key":1},post:{"user/account":1,"user/account/api-key":1},put:{"user/account/api-key":1},delete:{"user/account/{apikeyId}":1}}}},fees:{spot:{tierBased:!0,percentage:!0,maker:this.parseNumber("0.002"),taker:this.parseNumber("0.002"),tiers:{maker:[[this.parseNumber("0"),this.parseNumber("0.002")],[this.parseNumber("5000"),this.parseNumber("0.0018")],[this.parseNumber("10000"),this.parseNumber("0.0016")],[this.parseNumber("20000"),this.parseNumber("0.0014")],[this.parseNumber("50000"),this.parseNumber("0.0012")],[this.parseNumber("150000"),this.parseNumber("0.0010")],[this.parseNumber("300000"),this.parseNumber("0.0008")],[this.parseNumber("600000"),this.parseNumber("0.0007")],[this.parseNumber("1200000"),this.parseNumber("0.0006")],[this.parseNumber("2500000"),this.parseNumber("0.0005")],[this.parseNumber("6000000"),this.parseNumber("0.0004")],[this.parseNumber("15000000"),this.parseNumber("0.0003")],[this.parseNumber("30000000"),this.parseNumber("0.0002")]],taker:[[this.parseNumber("0"),this.parseNumber("0.002")],[this.parseNumber("5000"),this.parseNumber("0.0018")],[this.parseNumber("10000"),this.parseNumber("0.0016")],[this.parseNumber("20000"),this.parseNumber("0.0014")],[this.parseNumber("50000"),this.parseNumber("0.0012")],[this.parseNumber("150000"),this.parseNumber("0.0010")],[this.parseNumber("300000"),this.parseNumber("0.0008")],[this.parseNumber("600000"),this.parseNumber("0.0007")],[this.parseNumber("1200000"),this.parseNumber("0.0006")],[this.parseNumber("2500000"),this.parseNumber("0.0005")],[this.parseNumber("6000000"),this.parseNumber("0.0004")],[this.parseNumber("15000000"),this.parseNumber("0.0003")],[this.parseNumber("30000000"),this.parseNumber("0.0002")]]}},contract:{tierBased:!0,percentage:!0,maker:this.parseNumber("0.0004"),taker:this.parseNumber("0.0006"),tiers:{maker:[[this.parseNumber("0"),this.parseNumber("0.0004")],[this.parseNumber("200000"),this.parseNumber("0.00038")],[this.parseNumber("1000000"),this.parseNumber("0.00036")],[this.parseNumber("5000000"),this.parseNumber("0.00034")],[this.parseNumber("10000000"),this.parseNumber("0.00032")],[this.parseNumber("15000000"),this.parseNumber("0.00028")],[this.parseNumber("30000000"),this.parseNumber("0.00024")],[this.parseNumber("50000000"),this.parseNumber("0.0002")],[this.parseNumber("100000000"),this.parseNumber("0.00016")],[this.parseNumber("300000000"),this.parseNumber("0.00012")],[this.parseNumber("500000000"),this.parseNumber("0.00008")]],taker:[[this.parseNumber("0"),this.parseNumber("0.0006")],[this.parseNumber("200000"),this.parseNumber("0.000588")],[this.parseNumber("1000000"),this.parseNumber("0.00057")],[this.parseNumber("5000000"),this.parseNumber("0.00054")],[this.parseNumber("10000000"),this.parseNumber("0.00051")],[this.parseNumber("15000000"),this.parseNumber("0.00048")],[this.parseNumber("30000000"),this.parseNumber("0.00045")],[this.parseNumber("50000000"),this.parseNumber("0.00045")],[this.parseNumber("100000000"),this.parseNumber("0.00036")],[this.parseNumber("300000000"),this.parseNumber("0.00033")],[this.parseNumber("500000000"),this.parseNumber("0.0003")]]}}},exceptions:{exact:{400:n.NetworkError,404:n.ExchangeError,429:n.RateLimitExceeded,500:n.ExchangeError,502:n.ExchangeError,503:n.OnMaintenance,AUTH_001:n.AuthenticationError,AUTH_002:n.AuthenticationError,AUTH_003:n.AuthenticationError,AUTH_004:n.AuthenticationError,AUTH_005:n.AuthenticationError,AUTH_006:n.AuthenticationError,AUTH_007:n.AuthenticationError,AUTH_101:n.AuthenticationError,AUTH_102:n.AuthenticationError,AUTH_103:n.AuthenticationError,AUTH_104:n.AuthenticationError,AUTH_105:n.AuthenticationError,AUTH_106:n.PermissionDenied,SYMBOL_001:n.BadSymbol,SYMBOL_002:n.BadSymbol,SYMBOL_003:n.BadSymbol,SYMBOL_004:n.BadSymbol,SYMBOL_005:n.BadSymbol,ORDER_001:n.InvalidOrder,ORDER_002:n.InsufficientFunds,ORDER_003:n.InvalidOrder,ORDER_004:n.InvalidOrder,ORDER_005:n.InvalidOrder,ORDER_006:n.InvalidOrder,ORDER_007:n.PermissionDenied,ORDER_F0101:n.InvalidOrder,ORDER_F0102:n.InvalidOrder,ORDER_F0103:n.InvalidOrder,ORDER_F0201:n.InvalidOrder,ORDER_F0202:n.InvalidOrder,ORDER_F0203:n.InvalidOrder,ORDER_F0301:n.InvalidOrder,ORDER_F0401:n.InvalidOrder,ORDER_F0501:n.InvalidOrder,ORDER_F0502:n.InvalidOrder,ORDER_F0601:n.InvalidOrder,COMMON_001:n.ExchangeError,COMMON_002:n.ExchangeError,COMMON_003:n.BadRequest,CURRENCY_001:n.BadRequest,DEPOSIT_001:n.BadRequest,DEPOSIT_002:n.PermissionDenied,DEPOSIT_003:n.BadRequest,DEPOSIT_004:n.BadRequest,DEPOSIT_005:n.BadRequest,DEPOSIT_006:n.BadRequest,DEPOSIT_007:n.BadRequest,DEPOSIT_008:n.BadRequest,WITHDRAW_001:n.BadRequest,WITHDRAW_002:n.BadRequest,WITHDRAW_003:n.PermissionDenied,WITHDRAW_004:n.BadRequest,WITHDRAW_005:n.BadRequest,WITHDRAW_006:n.BadRequest,WITHDRAW_008:n.PermissionDenied,WITHDRAW_009:n.PermissionDenied,WITHDRAW_010:n.BadRequest,WITHDRAW_011:n.InsufficientFunds,WITHDRAW_012:n.PermissionDenied,WITHDRAW_013:n.PermissionDenied,WITHDRAW_014:n.BadRequest,WITHDRAW_015:n.BadRequest,WITHDRAW_016:n.BadRequest,WITHDRAW_017:n.BadRequest,WITHDRAW_018:n.BadRequest,WITHDRAW_019:n.BadRequest,WITHDRAW_020:n.PermissionDenied,WITHDRAW_021:n.PermissionDenied,WITHDRAW_022:n.BadRequest,WITHDRAW_023:n.BadRequest,WITHDRAW_024:n.BadRequest,WITHDRAW_025:n.BadRequest,FUND_001:n.BadRequest,FUND_002:n.InsufficientFunds,FUND_003:n.BadRequest,FUND_004:n.ExchangeError,FUND_005:n.PermissionDenied,FUND_014:n.BadRequest,FUND_015:n.BadRequest,FUND_016:n.BadRequest,FUND_017:n.BadRequest,FUND_018:n.BadRequest,FUND_019:n.BadRequest,FUND_020:n.BadRequest,FUND_021:n.BadRequest,FUND_022:n.BadRequest,FUND_044:n.BadRequest,TRANSFER_001:n.BadRequest,TRANSFER_002:n.InsufficientFunds,TRANSFER_003:n.BadRequest,TRANSFER_004:n.PermissionDenied,TRANSFER_005:n.PermissionDenied,TRANSFER_006:n.PermissionDenied,TRANSFER_007:n.RequestTimeout,TRANSFER_008:n.BadRequest,TRANSFER_009:n.BadRequest,TRANSFER_010:n.PermissionDenied,TRANSFER_011:n.PermissionDenied,TRANSFER_012:n.PermissionDenied,symbol_not_support_trading_via_api:n.BadSymbol,open_order_min_nominal_value_limit:n.InvalidOrder},broad:{"The symbol does not support trading via API":n.BadSymbol,"Exceeds the minimum notional value of a single order":n.InvalidOrder}},timeframes:{"1m":"1m","5m":"5m","15m":"15m","30m":"30m","1h":"1h","2h":"2h","4h":"4h","6h":"6h","8h":"8h","1d":"1d","3d":"3d","1w":"1w","1M":"1M"},commonCurrencies:{},options:{adjustForTimeDifference:!1,timeDifference:0,accountsById:{spot:"SPOT",leverage:"LEVER",finance:"FINANCE",swap:"FUTURES_U",future:"FUTURES_U",linear:"FUTURES_U",inverse:"FUTURES_C"},networks:{ERC20:"Ethereum",TRC20:"Tron",BEP20:"BNB Smart Chain",BEP2:"BNB-BEP2",ETH:"Ethereum",TRON:"Tron",BNB:"BNB Smart Chain",AVAX:"AVAX C-Chain",GAL:"GAL(FT)",ALEO:"ALEO(IOU)",BTC:"Bitcoin",XT:"XT Smart Chain",ETC:"Ethereum Classic",MATIC:"Polygon",LTC:"Litecoin",BTS:"BitShares",XRP:"Ripple",XLM:"Stellar Network",ADA:"Cardano",XWC:"XWC-XWC",DOGE:"dogecoin",DCR:"Decred",SC:"Siacoin",XTZ:"Tezos",ZEC:"Zcash",XMR:"Monero",LSK:"Lisk",ATOM:"Cosmos",ONT:"Ontology",ALGO:"Algorand",SOL:"SOL-SOL",DOT:"Polkadot",ZEN:"Horizen",FIL:"Filecoin",CHZ:"chz",ICP:"Internet Computer",KSM:"Kusama",LUNA:"Terra",THETA:"Theta Token",FTM:"Fantom",VET:"VeChain",NEAR:"NEAR Protocol",ONE:"Harmony",KLAY:"Klaytn",AR:"Arweave",CELT:"OKT",EGLD:"Elrond eGold",CRO:"CRO-CRONOS",BCH:"Bitcoin Cash",GLMR:"Moonbeam",LOOP:"LOOP-LRC",REI:"REI Network",ASTR:"Astar Network",OP:"OPT",MMT:"MMT-MMT",TBC:"TBC-TBC",OMAX:"OMAX-OMAX CHAIN",GMMT:"GMMT chain",ZIL:"Zilliqa"},networksById:{Ethereum:"ERC20",Tron:"TRC20","BNB Smart Chain":"BEP20","BNB-BEP2":"BEP2",Bitcoin:"BTC","XT Smart Chain":"XT","Ethereum Classic":"ETC",Polygon:"MATIC",Litecoin:"LTC",BitShares:"BTS",Ripple:"XRP","Stellar Network":"XLM",Cardano:"ADA","XWC-XWC":"XWC",dogecoin:"DOGE",Decred:"DCR",Siacoin:"SC",Tezos:"XTZ",Zcash:"ZEC",Monero:"XMR",Lisk:"LSK",Cosmos:"ATOM",Ontology:"ONT",Algorand:"ALGO","SOL-SOL":"SOL",Polkadot:"DOT",Horizen:"ZEN",Filecoin:"FIL",chz:"CHZ","Internet Computer":"ICP",Kusama:"KSM",Terra:"LUNA","Theta Token":"THETA",Fantom:"FTM",VeChain:"VET","AVAX C-Chain":"AVAX","NEAR Protocol":"NEAR",Harmony:"ONE",Klaytn:"KLAY",Arweave:"AR",OKT:"CELT","Elrond eGold":"EGLD","CRO-CRONOS":"CRO","Bitcoin Cash":"BCH",Moonbeam:"GLMR","LOOP-LRC":"LOOP","REI Network":"REI","Astar Network":"ASTR","GAL(FT)":"GAL","ALEO(IOU)":"ALEO",OPT:"OP","MMT-MMT":"MMT","TBC-TBC":"TBC","OMAX-OMAX CHAIN":"OMAX","GMMT chain":"GMMT",Zilliqa:"ZIL"},createMarketBuyOrderRequiresPrice:!0,recvWindow:"5000"}})}nonce(){return this.milliseconds()-this.options.timeDifference}async fetchTime(e={}){let t=await this.publicSpotGetTime(e),r=this.safeValue(t,"result");return this.safeInteger(r,"serverTime")}async fetchCurrencies(e={}){let t=[this.publicSpotGetWalletSupportCurrency(e),this.publicSpotGetCurrencies(e)],[r,i]=await Promise.all(t),a=this.safeValue(r,"result",[]),n=this.safeValue(i,"result",[]),o=this.safeValue(n,"currencies",[]),u=this.indexBy(a,"currency"),d={};for(let e=0;e<o.length;e++){let t,r;let i=o[e],a=this.safeString(i,"currency"),n=this.safeCurrencyCode(a),h=this.parseNumber(this.parsePrecision(this.safeString(i,"maxPrecision"))),l=this.safeValue(u,a,{}),c=this.safeValue(l,"supportChains",[]),p={},f=!1,m=!1,v=!1;for(let e=0;e<c.length;e++){let i=c[e],a=this.safeString(i,"chain"),n=this.networkIdToCode(a),o=this.safeValue(i,"depositEnabled");m=o||m;let u=this.safeValue(i,"withdrawEnabled");v=u||v;let d=o&&u;f=d||f;let l=this.safeString(i,"withdrawFeeAmount");void 0!==l&&(r=void 0===r?l:s.Y.stringMin(l,r));let b=this.safeString(i,"withdrawMinAmount");void 0!==b&&(t=void 0===t?b:s.Y.stringMin(b,t)),p[n]={info:i,id:a,network:n,name:void 0,active:d,fee:this.parseNumber(l),precision:h,deposit:o,withdraw:u,limits:{amount:{min:void 0,max:void 0},withdraw:{min:this.parseNumber(b),max:void 0},deposit:{min:void 0,max:void 0}}}}d[n]={info:i,id:a,code:n,name:this.safeString(i,"fullName"),active:f,fee:this.parseNumber(r),precision:h,deposit:m,withdraw:v,networks:p,limits:{amount:{min:void 0,max:void 0},withdraw:{min:this.parseNumber(t),max:void 0},deposit:{min:void 0,max:void 0}}}}return d}async fetchMarkets(e={}){this.options.adjustForTimeDifference&&await this.loadTimeDifference();let t=[this.fetchSpotMarkets(e),this.fetchSwapAndFutureMarkets(e)],r=await Promise.all(t),i=r[0],s=r[1];return this.arrayConcat(i,s)}async fetchSpotMarkets(e={}){let t=await this.publicSpotGetSymbol(e),r=this.safeValue(t,"result",{}),i=this.safeValue(r,"symbols",[]);return this.parseMarkets(i)}async fetchSwapAndFutureMarkets(e={}){let t=await Promise.all([this.publicLinearGetFutureMarketV1PublicSymbolList(e),this.publicInverseGetFutureMarketV1PublicSymbolList(e)]),r=this.arrayConcat(this.safeValue(t[0],"result",[]),this.safeValue(t[1],"result",[]));return this.parseMarkets(r)}parseMarkets(e){let t=[];for(let r=0;r<e.length;r++)t.push(this.parseMarket(e[r]));return t}parseMarket(e){let t,r,i,s,a,n,o,u,d,h,l,c;let p=this.safeString(e,"symbol"),f=this.safeString2(e,"baseCurrency","baseCoin"),m=this.safeString2(e,"quoteCurrency","quoteCoin"),v=this.safeCurrencyCode(f),b=this.safeCurrencyCode(m),g=this.safeString(e,"state"),T=v+"/"+b,y=this.safeValue(e,"filters",[]);for(let e=0;e<y.length;e++){let s=y[e],u=this.safeString(s,"filter");"QUANTITY"===u&&(t=this.safeNumber(s,"min"),r=this.safeNumber(s,"max"),o=this.safeNumber(s,"tickSize")),"QUOTE_QTY"===u&&(i=this.safeNumber(s,"min")),"PRICE"===u&&(a=this.safeNumber(s,"min"),n=this.safeNumber(s,"max"))}void 0===o&&(o=this.parseNumber(this.parsePrecision(this.safeString(e,"quantityPrecision"))));let S=this.safeString(e,"underlyingType"),k=!1,w=!1,N=!1,O=!0,P="spot";"U_BASED"===S?(T=T+":"+b,h=f,l=b,u=!0,d=!1):"COIN_BASED"===S&&(T=T+":"+v,h=f,l=v,u=!1,d=!0),void 0!==S&&(c=this.safeInteger(e,"deliveryDate"),"perpetual"!==this.safeString(e,"productType")?(T=T+"-"+this.yymmdd(c),P="future",k=!0):(P="swap",w=!0),t=this.safeNumber(e,"minQty"),i=this.safeNumber(e,"minNotional"),s=this.safeNumber(e,"maxNotional"),a=this.safeNumber(e,"minPrice"),n=this.safeNumber(e,"maxPrice"),N=!0,O=!1);let R=!1;return N?R=this.safeValue(e,"isOpenApi",!1):"ONLINE"===g&&this.safeValue(e,"tradingEnabled")&&this.safeValue(e,"openapiEnabled")&&(R=!0),this.safeMarketStructure({id:p,symbol:T,base:v,quote:b,settle:l,baseId:f,quoteId:m,settleId:h,type:P,spot:O,margin:void 0,swap:w,future:k,option:!1,active:R,contract:N,linear:u,inverse:d,taker:this.safeNumber(e,"takerFee"),maker:this.safeNumber(e,"makerFee"),contractSize:this.safeNumber(e,"contractSize"),expiry:c,expiryDatetime:this.iso8601(c),strike:void 0,optionType:void 0,precision:{price:this.parseNumber(this.parsePrecision(this.safeString(e,"pricePrecision"))),amount:o,base:this.parseNumber(this.parsePrecision(this.safeString(e,"baseCoinPrecision"))),quote:this.parseNumber(this.parsePrecision(this.safeString(e,"quoteCoinPrecision")))},limits:{leverage:{min:this.parseNumber("1"),max:void 0},amount:{min:t,max:r},price:{min:a,max:n},cost:{min:i,max:s}},info:e})}async fetchOHLCV(e,t="1m",r,i,s={}){let a;await this.loadMarkets();let n=this.market(e),o={symbol:n.id,interval:this.safeString(this.timeframes,t,t)};void 0!==r&&(o.startTime=r),void 0!==i&&(o.limit=i),a=n.linear?await this.publicLinearGetFutureMarketV1PublicQKline(this.extend(o,s)):n.inverse?await this.publicInverseGetFutureMarketV1PublicQKline(this.extend(o,s)):await this.publicSpotGetKline(this.extend(o,s));let u=this.safeValue(a,"result",[]);return this.parseOHLCVs(u,n,t,r,i)}parseOHLCV(e,t){let r=t.inverse?"v":"a";return[this.safeInteger(e,"t"),this.safeNumber(e,"o"),this.safeNumber(e,"h"),this.safeNumber(e,"l"),this.safeNumber(e,"c"),this.safeNumber2(e,"q",r)]}async fetchOrderBook(e,t,r={}){let i;await this.loadMarkets();let s=this.market(e),a={symbol:s.id};s.spot?(void 0!==t&&(a.limit=Math.min(t,500)),i=await this.publicSpotGetDepth(this.extend(a,r))):(void 0!==t?a.level=Math.min(t,50):a.level=50,s.linear?i=await this.publicLinearGetFutureMarketV1PublicQDepth(this.extend(a,r)):s.inverse&&(i=await this.publicInverseGetFutureMarketV1PublicQDepth(this.extend(a,r))));let n=this.safeValue(i,"result",{}),o=this.safeInteger2(n,"timestamp","t");if(s.spot){let t=this.parseOrderBook(n,e,o);return t.nonce=this.safeInteger(n,"lastUpdateId"),t}let u=this.parseOrderBook(n,e,o,"b","a");return u.nonce=this.safeInteger2(n,"u","lastUpdateId"),u}async fetchTicker(e,t={}){let r;await this.loadMarkets();let i=this.market(e),s={symbol:i.id};r=i.linear?await this.publicLinearGetFutureMarketV1PublicQAggTicker(this.extend(s,t)):i.inverse?await this.publicInverseGetFutureMarketV1PublicQAggTicker(this.extend(s,t)):await this.publicSpotGetTicker24h(this.extend(s,t));let a=this.safeValue(r,"result");return i.spot?this.parseTicker(a[0],i):this.parseTicker(a,i)}async fetchTickers(e,t={}){let r,i,s,a;await this.loadMarkets(),void 0!==e&&(e=this.marketSymbols(e),r=this.market(e[0]));let n={};[i,t]=this.handleMarketTypeAndParams("fetchTickers",r,t),[s,t]=this.handleSubTypeAndParams("fetchTickers",r,t),a="inverse"===s?await this.publicInverseGetFutureMarketV1PublicQAggTickers(this.extend(n,t)):"linear"===s||"swap"===i||"future"===i?await this.publicLinearGetFutureMarketV1PublicQAggTickers(this.extend(n,t)):await this.publicSpotGetTicker24h(this.extend(n,t));let o=this.safeValue(a,"result",[]),u={};for(let e=0;e<o.length;e++){let t=this.parseTicker(o[e],r);u[t.symbol]=t}return this.filterByArray(u,"symbol",e)}async fetchBidsAsks(e,t={}){let r,i;if(await this.loadMarkets(),void 0!==(e=this.marketSymbols(e))&&(r=this.market(e[0])),[i,t]=this.handleSubTypeAndParams("fetchBidsAsks",r,t),void 0!==i)throw new n.NotSupported(this.id+" fetchBidsAsks() is not available for swap and future markets, only spot markets are supported");let s=await this.publicSpotGetTickerBook(this.extend({},t)),a=this.safeValue(s,"result",[]);return this.parseTickers(a,e)}parseTicker(e,t){let r=this.safeString(e,"s"),i=void 0!==t?t.type:void 0,a="cv"in e||"aq"in e;void 0===i&&(i=a?"spot":"contract");let n=(t=this.safeMarket(r,t,"_",i)).symbol,o=this.safeInteger(e,"t"),u=this.safeString2(e,"cr","r");return void 0!==u&&(u=s.Y.stringMul(u,"100")),this.safeTicker({symbol:n,timestamp:o,datetime:this.iso8601(o),high:this.safeNumber(e,"h"),low:this.safeNumber(e,"l"),bid:this.safeNumber(e,"bp"),bidVolume:this.safeNumber(e,"bq"),ask:this.safeNumber(e,"ap"),askVolume:this.safeNumber(e,"aq"),vwap:void 0,open:this.safeString(e,"o"),close:this.safeString(e,"c"),last:this.safeString(e,"c"),previousClose:void 0,change:this.safeNumber(e,"cv"),percentage:this.parseNumber(u),average:void 0,baseVolume:void 0,quoteVolume:this.safeNumber2(e,"a","v"),info:e},t)}async fetchTrades(e,t,r,i={}){let s;await this.loadMarkets();let a=this.market(e),n={symbol:a.id};a.spot?(void 0!==r&&(n.limit=r),s=await this.publicSpotGetTradeRecent(this.extend(n,i))):(void 0!==r&&(n.num=r),a.linear?s=await this.publicLinearGetFutureMarketV1PublicQDeal(this.extend(n,i)):a.inverse&&(s=await this.publicInverseGetFutureMarketV1PublicQDeal(this.extend(n,i))));let o=this.safeValue(s,"result",[]);return this.parseTrades(o,a)}async fetchMyTrades(e,t,r,i={}){let s,a,n,o;await this.loadMarkets();let u={};if(void 0!==e&&(s=this.market(e),u.symbol=s.id),void 0!==t&&(u.startTime=t),[a,i]=this.handleMarketTypeAndParams("fetchMyTrades",s,i),[n,i]=this.handleSubTypeAndParams("fetchMyTrades",s,i),void 0!==n||"swap"===a||"future"===a)void 0!==r&&(u.size=r),o="inverse"===n?await this.privateInverseGetFutureTradeV1OrderTradeList(this.extend(u,i)):await this.privateLinearGetFutureTradeV1OrderTradeList(this.extend(u,i));else{let e;[e,i]=this.handleMarginModeAndParams("fetchMyTrades",i),u.bizType=void 0!==e?"LEVER":"SPOT",void 0!==r&&(u.limit=r),o=await this.privateSpotGetTrade(this.extend(u,i))}let d=this.safeValue(o,"result",{}),h=this.safeValue(d,"items",[]);return this.parseTrades(h,s,t,r)}parseTrade(e,t){let r,i,a;let n=this.safeString2(e,"s","symbol"),o=void 0!==t?t.type:void 0,u="b"in e||"bizType"in e||"oi"in e;void 0===o&&(o=u?"spot":"contract"),t=this.safeMarket(n,t,"_",o);let d=this.safeBool(e,"b");if(void 0!==d)r=d?"sell":"buy",i="taker";else{let t=this.safeStringLower(e,"takerMaker");if(void 0!==t)i=t;else{let t=this.safeBool(e,"isMaker");void 0!==t&&(i=t?"maker":"taker")}let s=this.safeStringLower(e,"orderSide");if(void 0!==s)r=s;else{let t=this.safeString(e,"m");void 0!==t&&(r="BID"===t?"buy":"sell")}}let h=this.safeIntegerN(e,["t","time","timestamp"]),l=this.safeString2(e,"q","quantity");return a="spot"===o?l:void 0===l?s.Y.stringMul(this.safeString(e,"a"),this.numberToString(t.contractSize)):s.Y.stringMul(l,this.numberToString(t.contractSize)),this.safeTrade({info:e,id:this.safeStringN(e,["i","tradeId","execId"]),timestamp:h,datetime:this.iso8601(h),symbol:t.symbol,order:this.safeString2(e,"orderId","oi"),type:this.safeStringLower(e,"orderType"),side:r,takerOrMaker:i,price:this.safeString2(e,"p","price"),amount:a,cost:void 0,fee:{currency:this.safeCurrencyCode(this.safeString2(e,"feeCurrency","feeCoin")),cost:this.safeString(e,"fee")}},t)}async fetchBalance(e={}){let t,r,i,s;await this.loadMarkets(),[t,e]=this.handleMarketTypeAndParams("fetchBalance",void 0,e),[r,e]=this.handleSubTypeAndParams("fetchBalance",void 0,e);let a="swap"===t||"future"===t;if(i="inverse"===r?await this.privateInverseGetFutureUserV1BalanceList(e):"linear"===r||a?await this.privateLinearGetFutureUserV1BalanceList(e):await this.privateSpotGetBalances(e),void 0!==r||a)s=this.safeValue(i,"result",[]);else{let e=this.safeValue(i,"result",{});s=this.safeValue(e,"assets",[])}return this.parseBalance(s)}parseBalance(e){let t={info:e};for(let r=0;r<e.length;r++){let i=e[r],a=this.safeString2(i,"currency","coin"),n=this.safeCurrencyCode(a),o=this.account(),u=this.safeString2(i,"availableAmount","availableBalance"),d=this.safeString(i,"frozenAmount"),h=this.safeString2(i,"totalAmount","walletBalance");if(void 0===d){let e=s.Y.stringAdd(this.safeString(i,"crossedMargin"),this.safeString(i,"isolatedMargin"));d=s.Y.stringAdd(this.safeString(i,"openOrderMarginFrozen"),e)}o.free=u,o.used=d,o.total=h,t[n]=o}return this.safeBalance(t)}async createMarketBuyOrderWithCost(e,t,r={}){if(await this.loadMarkets(),!this.market(e).spot)throw new n.NotSupported(this.id+" createMarketBuyOrderWithCost() supports spot orders only");return await this.createOrder(e,"market","buy",t,1,r)}async createOrder(e,t,r,i,s,a={}){await this.loadMarkets();let n=this.market(e);return(e=n.symbol,n.spot)?await this.createSpotOrder(e,t,r,i,s,a):await this.createContractOrder(e,t,r,i,s,a)}async createSpotOrder(e,t,r,i,a,o={}){let u,d;await this.loadMarkets();let h=this.market(e),l={symbol:h.id,side:r.toUpperCase(),type:t.toUpperCase()};if([d,o]=this.handleMarginModeAndParams("createOrder",o),l.bizType=void 0!==d?"LEVER":"SPOT","market"===t){if(u=this.safeStringUpper(o,"timeInForce","FOK"),"buy"===r){let t=this.safeString(o,"cost");if(o=this.omit(o,"cost"),this.safeBool(this.options,"createMarketBuyOrderRequiresPrice",!0)){if(void 0===a&&void 0===t)throw new n.InvalidOrder(this.id+" createOrder() requires a price argument or cost in params for market buy orders on spot markets to calculate the total amount to spend (amount * price), alternatively set the createMarketBuyOrderRequiresPrice option to false and pass in the cost to spend into the amount parameter");{let r;let n=this.numberToString(i),o=this.numberToString(a);r=void 0!==a?s.Y.stringMul(n,o):t,l.quoteQty=this.costToPrecision(e,r)}}else l.quoteQty=this.costToPrecision(e,void 0!==t?t:i)}}else u=this.safeStringUpper(o,"timeInForce","GTC"),l.price=this.priceToPrecision(e,a);("sell"===r||"limit"===t)&&(l.quantity=this.amountToPrecision(e,i)),l.timeInForce=u;let c=await this.privateSpotPostOrder(this.extend(l,o)),p=this.safeValue(c,"result",{});return this.parseOrder(p,h)}async createContractOrder(e,t,r,i,s,a={}){let n;await this.loadMarkets();let o=this.market(e),u={symbol:o.id,origQty:this.amountToPrecision(e,i)},d=this.safeStringUpper(a,"timeInForce");void 0!==d&&(u.timeInForce=d);let h=this.safeValue(a,"reduceOnly",!1);"buy"===r?u.positionSide=h?"SHORT":"LONG":u.positionSide=h?"LONG":"SHORT";let l=this.safeNumber2(a,"triggerPrice","stopPrice"),c=this.safeNumber2(a,"stopLoss","triggerStopPrice"),p=this.safeNumber2(a,"takeProfit","triggerProfitPrice"),f=void 0!==l,m=void 0!==c,v=void 0!==p;if(void 0===s||m||v||(u.price=this.priceToPrecision(e,s)),f){u.timeInForce=this.safeStringUpper(a,"timeInForce","GTC"),u.triggerPriceType=this.safeString(a,"triggerPriceType","LATEST_PRICE"),u.orderSide=r.toUpperCase(),u.stopPrice=this.priceToPrecision(e,l);let i="market"===t?"STOP_MARKET":"STOP";u.entrustType=i,a=this.omit(a,"triggerPrice"),o.linear?n=await this.privateLinearPostFutureTradeV1EntrustCreatePlan(this.extend(u,a)):o.inverse&&(n=await this.privateInversePostFutureTradeV1EntrustCreatePlan(this.extend(u,a)))}else m||v?(m?u.triggerStopPrice=this.priceToPrecision(e,c):u.triggerProfitPrice=this.priceToPrecision(e,p),a=this.omit(a,["stopLoss","takeProfit"]),o.linear?n=await this.privateLinearPostFutureTradeV1EntrustCreateProfit(this.extend(u,a)):o.inverse&&(n=await this.privateInversePostFutureTradeV1EntrustCreateProfit(this.extend(u,a)))):(u.orderSide=r.toUpperCase(),u.orderType=t.toUpperCase(),o.linear?n=await this.privateLinearPostFutureTradeV1OrderCreate(this.extend(u,a)):o.inverse&&(n=await this.privateInversePostFutureTradeV1OrderCreate(this.extend(u,a))));return this.parseOrder(n,o)}async fetchOrder(e,t,r={}){let i,s,a,n;await this.loadMarkets(),void 0!==t&&(i=this.market(t));let o={};[s,r]=this.handleMarketTypeAndParams("fetchOrder",i,r),[a,r]=this.handleSubTypeAndParams("fetchOrder",i,r);let u=this.safeValue(r,"stop"),d=this.safeValue(r,"stopLossTakeProfit");u?o.entrustId=e:d?o.profitId=e:o.orderId=e,u?(r=this.omit(r,"stop"),n="inverse"===a?await this.privateInverseGetFutureTradeV1EntrustPlanDetail(this.extend(o,r)):await this.privateLinearGetFutureTradeV1EntrustPlanDetail(this.extend(o,r))):d?(r=this.omit(r,"stopLossTakeProfit"),n="inverse"===a?await this.privateInverseGetFutureTradeV1EntrustProfitDetail(this.extend(o,r)):await this.privateLinearGetFutureTradeV1EntrustProfitDetail(this.extend(o,r))):n="inverse"===a?await this.privateInverseGetFutureTradeV1OrderDetail(this.extend(o,r)):"linear"===a||"swap"===s||"future"===s?await this.privateLinearGetFutureTradeV1OrderDetail(this.extend(o,r)):await this.privateSpotGetOrderOrderId(this.extend(o,r));let h=this.safeValue(n,"result",{});return this.parseOrder(h,i)}async fetchOrders(e,t,r,i={}){let s,a,n,o;await this.loadMarkets();let u={};if(void 0!==e&&(s=this.market(e),u.symbol=s.id),void 0!==t&&(u.startTime=t),void 0!==r&&(u.limit=r),[a,i]=this.handleMarketTypeAndParams("fetchOrders",s,i),[n,i]=this.handleSubTypeAndParams("fetchOrders",s,i),this.safeValue2(i,"trigger","stop"))i=this.omit(i,["trigger","stop"]),o="inverse"===n?await this.privateInverseGetFutureTradeV1EntrustPlanListHistory(this.extend(u,i)):await this.privateLinearGetFutureTradeV1EntrustPlanListHistory(this.extend(u,i));else if("inverse"===n)o=await this.privateInverseGetFutureTradeV1OrderListHistory(this.extend(u,i));else if("linear"===n||"swap"===a||"future"===a)o=await this.privateLinearGetFutureTradeV1OrderListHistory(this.extend(u,i));else{let e;[e,i]=this.handleMarginModeAndParams("fetchOrders",i),u.bizType=void 0!==e?"LEVER":"SPOT",o=await this.privateSpotGetHistoryOrder(this.extend(u,i))}let d=this.safeValue(o,"result",{}),h=this.safeValue(d,"items",[]);return this.parseOrders(h,s,t,r)}async fetchOrdersByStatus(e,t,r,i,s={}){let a,n,o,u;await this.loadMarkets();let d={};void 0!==t&&(a=this.market(t),d.symbol=a.id),[n,s]=this.handleMarketTypeAndParams("fetchOrdersByStatus",a,s),[o,s]=this.handleSubTypeAndParams("fetchOrdersByStatus",a,s);let h=this.safeValue(s,"stop"),l=this.safeValue(s,"stopLossTakeProfit");if("open"===e?h||l?d.state="NOT_TRIGGERED":void 0!==o&&(d.state="NEW"):"closed"===e?h||l?d.state="TRIGGERED":d.state="FILLED":"canceled"===e?h||l?d.state="USER_REVOCATION":d.state="CANCELED":d.state=e,(h||l||void 0!==o||"swap"===n||"future"===n)&&(void 0!==r&&(d.startTime=r),void 0!==i&&(d.size=i)),h)s=this.omit(s,"stop"),u="inverse"===o?await this.privateInverseGetFutureTradeV1EntrustPlanList(this.extend(d,s)):await this.privateLinearGetFutureTradeV1EntrustPlanList(this.extend(d,s));else if(l)s=this.omit(s,"stopLossTakeProfit"),u="inverse"===o?await this.privateInverseGetFutureTradeV1EntrustProfitList(this.extend(d,s)):await this.privateLinearGetFutureTradeV1EntrustProfitList(this.extend(d,s));else if(void 0!==o||"swap"===n||"future"===n)u="inverse"===o?await this.privateInverseGetFutureTradeV1OrderList(this.extend(d,s)):await this.privateLinearGetFutureTradeV1OrderList(this.extend(d,s));else{let t;[t,s]=this.handleMarginModeAndParams("fetchOrdersByStatus",s),d.bizType=void 0!==t?"LEVER":"SPOT","open"!==e?(void 0!==r&&(d.startTime=r),void 0!==i&&(d.limit=i),u=await this.privateSpotGetHistoryOrder(this.extend(d,s))):u=await this.privateSpotGetOpenOrder(this.extend(d,s))}let c="open"===e&&void 0===o,p=this.safeValue(u,"result",{}),f=c?this.safeValue(u,"result",[]):this.safeValue(p,"items",[]);return this.parseOrders(f,a,r,i)}async fetchOpenOrders(e,t,r,i={}){return await this.fetchOrdersByStatus("open",e,t,r,i)}async fetchClosedOrders(e,t,r,i={}){return await this.fetchOrdersByStatus("closed",e,t,r,i)}async fetchCanceledOrders(e,t,r,i={}){return await this.fetchOrdersByStatus("canceled",e,t,r,i)}async cancelOrder(e,t,r={}){let i,s,a,n;await this.loadMarkets(),void 0!==t&&(i=this.market(t));let o={};[s,r]=this.handleMarketTypeAndParams("cancelOrder",i,r),[a,r]=this.handleSubTypeAndParams("cancelOrder",i,r);let u=this.safeValue2(r,"trigger","stop"),d=this.safeValue(r,"stopLossTakeProfit");u?o.entrustId=e:d?o.profitId=e:o.orderId=e,u?(r=this.omit(r,["trigger","stop"]),n="inverse"===a?await this.privateInversePostFutureTradeV1EntrustCancelPlan(this.extend(o,r)):await this.privateLinearPostFutureTradeV1EntrustCancelPlan(this.extend(o,r))):d?(r=this.omit(r,"stopLossTakeProfit"),n="inverse"===a?await this.privateInversePostFutureTradeV1EntrustCancelProfitStop(this.extend(o,r)):await this.privateLinearPostFutureTradeV1EntrustCancelProfitStop(this.extend(o,r))):n="inverse"===a?await this.privateInversePostFutureTradeV1OrderCancel(this.extend(o,r)):"linear"===a||"swap"===s||"future"===s?await this.privateLinearPostFutureTradeV1OrderCancel(this.extend(o,r)):await this.privateSpotDeleteOrderOrderId(this.extend(o,r));let h=void 0!==a||"swap"===s||"future"===s?n:this.safeValue(n,"result",{});return this.parseOrder(h,i)}async cancelAllOrders(e,t={}){let r,i,s,a;await this.loadMarkets();let n={};void 0!==e&&(r=this.market(e),n.symbol=r.id),[i,t]=this.handleMarketTypeAndParams("cancelAllOrders",r,t),[s,t]=this.handleSubTypeAndParams("cancelAllOrders",r,t);let o=this.safeValue2(t,"trigger","stop"),u=this.safeValue(t,"stopLossTakeProfit");if(o)t=this.omit(t,["trigger","stop"]),a="inverse"===s?await this.privateInversePostFutureTradeV1EntrustCancelAllPlan(this.extend(n,t)):await this.privateLinearPostFutureTradeV1EntrustCancelAllPlan(this.extend(n,t));else if(u)t=this.omit(t,"stopLossTakeProfit"),a="inverse"===s?await this.privateInversePostFutureTradeV1EntrustCancelAllProfitStop(this.extend(n,t)):await this.privateLinearPostFutureTradeV1EntrustCancelAllProfitStop(this.extend(n,t));else if("inverse"===s)a=await this.privateInversePostFutureTradeV1OrderCancelAll(this.extend(n,t));else if("linear"===s||"swap"===i||"future"===i)a=await this.privateLinearPostFutureTradeV1OrderCancelAll(this.extend(n,t));else{let e;[e,t]=this.handleMarginModeAndParams("cancelAllOrders",t),n.bizType=void 0!==e?"LEVER":"SPOT",a=await this.privateSpotDeleteOpenOrder(this.extend(n,t))}return[this.safeOrder(a)]}async cancelOrders(e,t,r={}){let i,s;if(await this.loadMarkets(),void 0!==t&&(i=this.market(t)),[s,r]=this.handleSubTypeAndParams("cancelOrders",i,r),void 0!==s)throw new n.NotSupported(this.id+" cancelOrders() does not support swap and future orders, only spot orders are accepted");let a=await this.privateSpotDeleteBatchOrder(this.extend({orderIds:e},r));return[this.safeOrder(a)]}parseOrder(e,t){let r=this.safeString(e,"symbol"),i="result"in e||"positionSide"in e?"contract":"spot";t=this.safeMarket(r,t,void 0,i);let a=this.safeSymbol(r,t,void 0,i),n=this.safeInteger2(e,"time","createdTime"),o=this.safeNumber(e,"origQty"),u="spot"===i?o:s.Y.stringMul(this.numberToString(o),this.numberToString(t.contractSize)),d=this.safeNumber(e,"executedQty"),h="spot"===i?d:s.Y.stringMul(this.numberToString(d),this.numberToString(t.contractSize)),l=this.safeInteger(e,"updatedTime");return this.safeOrder({info:e,id:this.safeStringN(e,["orderId","result","cancelId","entrustId","profitId"]),clientOrderId:this.safeString(e,"clientOrderId"),timestamp:n,datetime:this.iso8601(n),lastTradeTimestamp:l,lastUpdateTimestamp:l,symbol:a,type:this.safeStringLower2(e,"type","orderType"),timeInForce:this.safeString(e,"timeInForce"),postOnly:void 0,side:this.safeStringLower2(e,"side","orderSide"),price:this.safeNumber(e,"price"),triggerPrice:this.safeNumber(e,"stopPrice"),stopLoss:this.safeNumber(e,"triggerStopPrice"),takeProfit:this.safeNumber(e,"triggerProfitPrice"),amount:u,filled:h,remaining:this.safeNumber(e,"leavingQty"),cost:void 0,average:this.safeNumber(e,"avgPrice"),status:this.parseOrderStatus(this.safeString(e,"state")),fee:{currency:this.safeCurrencyCode(this.safeString(e,"feeCurrency")),cost:this.safeNumber(e,"fee")},trades:void 0},t)}parseOrderStatus(e){return this.safeString({NEW:"open",PARTIALLY_FILLED:"open",FILLED:"closed",CANCELED:"canceled",REJECTED:"rejected",EXPIRED:"expired",UNFINISHED:"open",NOT_TRIGGERED:"open",TRIGGERING:"open",TRIGGERED:"closed",USER_REVOCATION:"canceled",PLATFORM_REVOCATION:"rejected",HISTORY:"expired"},e,e)}async fetchLedger(e,t,r,i={}){let s,a,o,u;await this.loadMarkets();let d={};if(void 0!==e&&(s=this.currency(e)),void 0!==t&&(d.startTime=t),void 0!==r&&(d.limit=r),[a,i]=this.handleMarketTypeAndParams("fetchLedger",void 0,i),[o,i]=this.handleSubTypeAndParams("fetchLedger",void 0,i),"inverse"===o)u=await this.privateInverseGetFutureUserV1BalanceBills(this.extend(d,i));else if("linear"===o||"swap"===a||"future"===a)u=await this.privateLinearGetFutureUserV1BalanceBills(this.extend(d,i));else throw new n.NotSupported(this.id+" fetchLedger() does not support spot transactions, only swap and future wallet transactions are supported");let h=this.safeValue(u,"result",{}),l=this.safeValue(h,"items",[]);return this.parseLedger(l,s,t,r)}parseLedgerEntry(e,t){let r=this.safeString(e,"side"),i=this.safeString(e,"coin");t=this.safeCurrency(i,t);let s=this.safeInteger(e,"createdTime");return this.safeLedgerEntry({info:e,id:this.safeString(e,"id"),direction:"ADD"===r?"in":"out",account:void 0,referenceId:void 0,referenceAccount:void 0,type:this.parseLedgerEntryType(this.safeString(e,"type")),currency:this.safeCurrencyCode(i,t),amount:this.safeNumber(e,"amount"),timestamp:s,datetime:this.iso8601(s),before:void 0,after:this.safeNumber(e,"afterAmount"),status:void 0,fee:{currency:void 0,cost:void 0}},t)}parseLedgerEntryType(e){return this.safeString({EXCHANGE:"transfer",CLOSE_POSITION:"trade",TAKE_OVER:"trade",MERGE:"trade",QIANG_PING_MANAGER:"fee",FUND:"fee",FEE:"fee",ADL:"auto-deleveraging"},e,e)}async fetchDepositAddress(e,t={}){let r;await this.loadMarkets(),[r,t]=this.handleNetworkCodeAndParams(t);let i=this.currency(e),s=this.networkCodeToId(r,e);this.checkRequiredArgument("fetchDepositAddress",s,"network");let a={currency:i.id,chain:s},n=await this.privateSpotGetDepositAddress(this.extend(a,t)),o=this.safeValue(n,"result",{});return this.parseDepositAddress(o,i)}parseDepositAddress(e,t){let r=this.safeString(e,"address");return this.checkAddress(r),{info:e,currency:this.safeCurrencyCode(void 0,t),network:void 0,address:r,tag:this.safeString(e,"memo")}}async fetchDeposits(e,t,r,i={}){let s;await this.loadMarkets();let a={};void 0!==e&&(s=this.currency(e),a.currency=s.id),void 0!==t&&(a.startTime=t),void 0!==r&&(a.limit=r);let n=await this.privateSpotGetDepositHistory(this.extend(a,i)),o=this.safeValue(n,"result",{}),u=this.safeValue(o,"items",[]);return this.parseTransactions(u,s,t,r,i)}async fetchWithdrawals(e,t,r,i={}){let s;await this.loadMarkets();let a={};void 0!==e&&(s=this.currency(e),a.currency=s.id),void 0!==t&&(a.startTime=t),void 0!==r&&(a.limit=r);let n=await this.privateSpotGetWithdrawHistory(this.extend(a,i)),o=this.safeValue(n,"result",{}),u=this.safeValue(o,"items",[]);return this.parseTransactions(u,s,t,r,i)}async withdraw(e,t,r,i,s={}){let a;this.checkAddress(r),await this.loadMarkets();let n=this.currency(e);[i,s]=this.handleWithdrawTagAndParams(i,s),[a,s]=this.handleNetworkCodeAndParams(s);let o=this.safeValue(this.options,"networks",{}),u=this.safeString2(o,a,e,e),d={currency:n.id,chain:u,amount:this.currencyToPrecision(e,t),address:r};void 0!==i&&(d.memo=i);let h=await this.privateSpotPostWithdraw(this.extend(d,s)),l=this.safeValue(h,"result",{});return this.parseTransaction(l,n)}parseTransaction(e,t){let r="fromAddr"in e?"deposit":"withdraw",i=this.safeInteger(e,"createdTime"),s=this.safeString(e,"address"),a=this.safeString(e,"memo"),n=this.safeCurrencyCode(this.safeString(e,"currency"),t),o=this.safeNumber(e,"fee"),u=void 0!==o?n:void 0,d=this.safeString(e,"chain");return{info:e,id:this.safeString(e,"id"),txid:this.safeString(e,"transactionId"),timestamp:i,datetime:this.iso8601(i),updated:void 0,addressFrom:this.safeString(e,"fromAddr"),addressTo:s,address:s,tagFrom:void 0,tagTo:void 0,tag:a,type:r,amount:this.safeNumber(e,"amount"),currency:n,network:this.networkIdToCode(d,n),status:this.parseTransactionStatus(this.safeString(e,"status")),comment:a,fee:{currency:u,cost:o,rate:void 0},internal:void 0}}parseTransactionStatus(e){return this.safeString({SUBMIT:"pending",REVIEW:"pending",AUDITED:"pending",PENDING:"pending",CANCEL:"canceled",FAIL:"failed",SUCCESS:"ok"},e,e)}async setLeverage(e,t,r={}){let i;if(void 0===t)throw new n.ArgumentsRequired(this.id+" setLeverage() requires a symbol argument");let s=this.safeString(r,"positionSide");if(this.checkRequiredArgument("setLeverage",s,"positionSide",["LONG","SHORT"]),e<1||e>125)throw new n.BadRequest(this.id+" setLeverage() leverage should be between 1 and 125");await this.loadMarkets();let a=this.market(t);if(!a.contract)throw new n.BadSymbol(this.id+" setLeverage() supports contract markets only");let o={symbol:a.id,positionSide:s,leverage:e};return[i,r]=this.handleSubTypeAndParams("setLeverage",a,r),"inverse"===i?await this.privateInversePostFutureUserV1PositionAdjustLeverage(this.extend(o,r)):await this.privateLinearPostFutureUserV1PositionAdjustLeverage(this.extend(o,r))}async addMargin(e,t,r={}){return await this.modifyMarginHelper(e,t,"ADD",r)}async reduceMargin(e,t,r={}){return await this.modifyMarginHelper(e,t,"SUB",r)}async modifyMarginHelper(e,t,r,i={}){let s,a;let n=this.safeString(i,"positionSide");this.checkRequiredArgument("setLeverage",n,"positionSide",["LONG","SHORT"]),await this.loadMarkets();let o=this.market(e),u={symbol:o.id,margin:t,type:r,positionSide:n};return[s,i]=this.handleSubTypeAndParams("modifyMarginHelper",o,i),a="inverse"===s?await this.privateInversePostFutureUserV1PositionMargin(this.extend(u,i)):await this.privateLinearPostFutureUserV1PositionMargin(this.extend(u,i)),this.parseMarginModification(a,o)}parseMarginModification(e,t){return{info:e,type:void 0,amount:void 0,code:void 0,symbol:this.safeSymbol(void 0,t),status:void 0,marginMode:void 0,total:void 0,timestamp:void 0,datetime:void 0}}async fetchLeverageTiers(e,t={}){let r,i;await this.loadMarkets(),[r,t]=this.handleSubTypeAndParams("fetchLeverageTiers",void 0,t),i="inverse"===r?await this.publicInverseGetFutureMarketV1PublicLeverageBracketList(t):await this.publicLinearGetFutureMarketV1PublicLeverageBracketList(t);let s=this.safeValue(i,"result",[]);return e=this.marketSymbols(e),this.parseLeverageTiers(s,e,"symbol")}parseLeverageTiers(e,t,r){let i={};for(let r=0;r<e.length;r++){let s=e[r],a=this.safeString(s,"symbol"),n=this.safeMarket(a,void 0,"_","contract"),o=this.safeSymbol(a,n);void 0!==t?this.inArray(o,t)&&(i[o]=this.parseMarketLeverageTiers(s,n)):i[o]=this.parseMarketLeverageTiers(e[r],n)}return i}async fetchMarketLeverageTiers(e,t={}){let r,i;await this.loadMarkets();let s=this.market(e),a={symbol:s.id};[r,t]=this.handleSubTypeAndParams("fetchMarketLeverageTiers",s,t),i="inverse"===r?await this.publicInverseGetFutureMarketV1PublicLeverageBracketDetail(this.extend(a,t)):await this.publicLinearGetFutureMarketV1PublicLeverageBracketDetail(this.extend(a,t));let n=this.safeValue(i,"result",{});return this.parseMarketLeverageTiers(n,s)}parseMarketLeverageTiers(e,t){let r=[],i=this.safeValue(e,"leverageBrackets",[]);for(let s=0;s<i.length;s++){let a=i[s],n=this.safeString(e,"symbol");t=this.safeMarket(n,t,"_","contract"),r.push({tier:this.safeInteger(a,"bracket"),symbol:this.safeSymbol(n,t,"_","contract"),currency:t.settle,minNotional:this.safeNumber(i[s-1],"maxNominalValue",0),maxNotional:this.safeNumber(a,"maxNominalValue"),maintenanceMarginRate:this.safeNumber(a,"maintMarginRate"),maxLeverage:this.safeNumber(a,"maxLeverage"),info:a})}return r}async fetchFundingRateHistory(e,t,r,i={}){let s,a;if(void 0===e)throw new n.ArgumentsRequired(this.id+" fetchFundingRateHistory() requires a symbol argument");await this.loadMarkets();let o=this.market(e);if(!o.swap)throw new n.BadSymbol(this.id+" fetchFundingRateHistory() supports swap contracts only");let u={symbol:o.id};void 0!==r&&(u.limit=r),[s,i]=this.handleSubTypeAndParams("fetchFundingRateHistory",o,i),a="inverse"===s?await this.publicInverseGetFutureMarketV1PublicQFundingRateRecord(this.extend(u,i)):await this.publicLinearGetFutureMarketV1PublicQFundingRateRecord(this.extend(u,i));let d=this.safeValue(a,"result",{}),h=this.safeValue(d,"items",[]),l=[];for(let e=0;e<h.length;e++){let t=h[e],r=this.safeString(t,"symbol"),i=this.safeSymbol(r,o),s=this.safeInteger(t,"createdTime");l.push({info:t,symbol:i,fundingRate:this.safeNumber(t,"fundingRate"),timestamp:s,datetime:this.iso8601(s)})}let c=this.sortBy(l,"timestamp");return this.filterBySymbolSinceLimit(c,o.symbol,t,r)}async fetchFundingInterval(e,t={}){return await this.fetchFundingRate(e,t)}async fetchFundingRate(e,t={}){let r,i;await this.loadMarkets();let s=this.market(e);if(!s.swap)throw new n.BadSymbol(this.id+" fetchFundingRate() supports swap contracts only");let a={symbol:s.id};[r,t]=this.handleSubTypeAndParams("fetchFundingRate",s,t),i="inverse"===r?await this.publicInverseGetFutureMarketV1PublicQFundingRate(this.extend(a,t)):await this.publicLinearGetFutureMarketV1PublicQFundingRate(this.extend(a,t));let o=this.safeValue(i,"result",{});return this.parseFundingRate(o,s)}parseFundingRate(e,t){let r=this.safeString(e,"symbol"),i=this.safeSymbol(r,t,"_","swap"),s=this.safeInteger(e,"nextCollectionTime"),a=this.safeString(e,"collectionInternal");return void 0!==a&&(a+="h"),{info:e,symbol:i,markPrice:void 0,indexPrice:void 0,interestRate:void 0,estimatedSettlePrice:void 0,timestamp:void 0,datetime:void 0,fundingRate:this.safeNumber(e,"fundingRate"),fundingTimestamp:s,fundingDatetime:this.iso8601(s),nextFundingRate:void 0,nextFundingTimestamp:void 0,nextFundingDatetime:void 0,previousFundingRate:void 0,previousFundingTimestamp:void 0,previousFundingDatetime:void 0,interval:a}}async fetchFundingHistory(e,t,r,i={}){let s,a;await this.loadMarkets();let o=this.market(e);if(!o.swap)throw new n.BadSymbol(this.id+" fetchFundingHistory() supports swap contracts only");let u={symbol:o.id};void 0!==t&&(u.startTime=t),void 0!==r&&(u.limit=r),[s,i]=this.handleSubTypeAndParams("fetchFundingHistory",o,i),a="inverse"===s?await this.privateInverseGetFutureUserV1BalanceFundingRateList(this.extend(u,i)):await this.privateLinearGetFutureUserV1BalanceFundingRateList(this.extend(u,i));let d=this.safeValue(a,"result",{}),h=this.safeValue(d,"items",[]),l=[];for(let e=0;e<h.length;e++){let t=h[e];l.push(this.parseFundingHistory(t,o))}let c=this.sortBy(l,"timestamp");return this.filterBySinceLimit(c,t,r)}parseFundingHistory(e,t){let r=this.safeString(e,"symbol"),i=this.safeSymbol(r,t,"_","swap"),s=this.safeString(e,"coin"),a=this.safeCurrencyCode(s),n=this.safeInteger(e,"createdTime");return{info:e,symbol:i,code:a,timestamp:n,datetime:this.iso8601(n),id:this.safeString(e,"id"),amount:this.safeNumber(e,"cast")}}async fetchPosition(e,t={}){let r,i;await this.loadMarkets();let s=this.market(e),a={symbol:s.id};[r,t]=this.handleSubTypeAndParams("fetchPosition",s,t),i="inverse"===r?await this.privateInverseGetFutureUserV1PositionList(this.extend(a,t)):await this.privateLinearGetFutureUserV1PositionList(this.extend(a,t));let n=this.safeValue(i,"result",[]);for(let e=0;e<n.length;e++){let t=n[e],r=this.safeString(t,"symbol"),i=this.safeMarket(r,void 0,void 0,"contract");if("0"!==this.safeString(t,"positionSize"))return this.parsePosition(t,i)}}async fetchPositions(e,t={}){let r,i;await this.loadMarkets(),[r,t]=this.handleSubTypeAndParams("fetchPositions",void 0,t),i="inverse"===r?await this.privateInverseGetFutureUserV1PositionList(t):await this.privateLinearGetFutureUserV1PositionList(t);let s=this.safeValue(i,"result",[]),a=[];for(let e=0;e<s.length;e++){let t=s[e],r=this.safeString(t,"symbol"),i=this.safeMarket(r,void 0,void 0,"contract");a.push(this.parsePosition(t,i))}return this.filterByArrayPositions(a,"symbol",e,!1)}parsePosition(e,t){let r=this.safeString(e,"symbol");t=this.safeMarket(r,t,void 0,"contract");let i=this.safeSymbol(r,t,void 0,"contract"),s=this.safeString(e,"positionType"),a=this.safeNumber(e,"isolatedMargin");return this.safePosition({info:e,id:void 0,symbol:i,timestamp:void 0,datetime:void 0,hedged:void 0,side:this.safeStringLower(e,"positionSide"),contracts:this.safeNumber(e,"positionSize"),contractSize:t.contractSize,entryPrice:this.safeNumber(e,"entryPrice"),markPrice:void 0,notional:void 0,leverage:this.safeInteger(e,"leverage"),collateral:a,initialMargin:a,maintenanceMargin:void 0,initialMarginPercentage:void 0,maintenanceMarginPercentage:void 0,unrealizedPnl:void 0,liquidationPrice:void 0,marginMode:"CROSSED"===s?"cross":"isolated",percentage:void 0,marginRatio:void 0})}async transfer(e,t,r,i,s={}){await this.loadMarkets();let a=this.currency(e),n=this.safeValue(this.options,"accountsById"),o=this.safeString(n,r,r),u=this.safeString(n,i,i),d=this.currencyToPrecision(e,t),h={bizId:this.uuid(),currency:a.id,amount:d,from:o,to:u},l=await this.privateSpotPostBalanceTransfer(this.extend(h,s));return this.parseTransfer(l,a)}parseTransfer(e,t){return{info:e,id:this.safeString(e,"result"),timestamp:void 0,datetime:void 0,currency:void 0,amount:void 0,fromAccount:void 0,toAccount:void 0,status:void 0}}handleErrors(e,t,r,i,s,a,o,u,d){let h=this.safeStringUpper2(o,"msgInfo","mc");if(void 0!==h&&"SUCCESS"!==h){let e=this.id+" "+a,t=this.safeValue(o,"error",{}),r=this.safeString(o,"mc"),i=this.safeString(t,"code",r),s=this.safeString(o,"msgInfo"),u=this.safeString(t,"msg",s);throw this.throwExactlyMatchedException(this.exceptions.exact,i,e),this.throwBroadlyMatchedException(this.exceptions.broad,u,e),new n.ExchangeError(e)}}sign(e,t=[],r="GET",i={},s,a){let n;let u="private"===t[0],d=t[1],h="/"+this.implodeParams(e,i);n="spot"===d||"user"===d?u?"/"+this.version+h:"/"+this.version+"/public"+h:h;let l=this.urls.api[d]+n,c=this.omit(i,this.extractParams(e)),p=this.urlencode(this.keysort(c));if(s={"Content-Type":"application/json"},u){let t;this.checkRequiredCredentials();let i=this.safeString(this.options,"recvWindow"),u=this.safeString(c,"recvWindow",i),h=this.numberToString(this.nonce());if(a=c,"/v4/order"===n||"/future/trade/v1/order/create"===n||"/future/trade/v1/entrust/create-plan"===n||"/future/trade/v1/entrust/create-profit"===n||"/future/trade/v1/order/create-batch"===n){let e="CCXT";n.indexOf("future")>-1?a.clientMedia=e:a.media=e}let f="GET"===r||"order/{orderId}"===e||"ws-token"===e;a=f?void 0:this.json(a),"spot"===d||"user"===d?(t="xt-validate-algorithms=HmacSHA256&xt-validate-appkey="+this.apiKey+"&xt-validate-recvwindow="+u+"&xt-validate-timestamp="+h,f?p?(l+="?"+p,t+="#"+r+"#"+n+"#"+this.rawencode(this.keysort(c))):t+="#"+r+"#"+n:t+="#"+r+"#"+n+"#"+a,s["xt-validate-algorithms"]="HmacSHA256",s["xt-validate-recvwindow"]=u):(t="xt-validate-appkey="+this.apiKey+"&xt-validate-timestamp="+h,"GET"===r?p?(l+="?"+p,t+="#"+n+"#"+p):t+="#"+n:t+="#"+n+"#"+a);let m=this.hmac(this.encode(t),this.encode(this.secret),o.s);s["xt-validate-appkey"]=this.apiKey,s["xt-validate-timestamp"]=h,s["xt-validate-signature"]=m}else p&&(l+="?"+p);return{url:l,method:r,body:a,headers:s}}}}}]);